0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 00:14:16 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _LCDprint2
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _TIMER0_Init
0000             37            public _Volts_at_Pin
0000             38            public _ADC_at_Pin
0000             39            public _InitPinADC
0000             40            public _waitms
0000             41            public _Timer3us
0000             42            public _InitADC
0000             43            public __c51_external_startup
0000             44            public _LCDprint_PARM_3
0000             45            public _LCDprint2_PARM_3
0000             46            public _LCDprint2_PARM_2
0000             47            public _LCDprint_PARM_2
0000             48            public _v2
0000             49            public _v1
0000             50            public _v2_rms
0000             51            public _v1_rms
0000             52            public _overflow_count
0000             53   ;--------------------------------------------------------
0000             54   ; Special Function Registers
0000             55   ;--------------------------------------------------------
0000             56   _ACC            DATA 0xe0
0000             57   _ADC0ASAH       DATA 0xb6
0000             58   _ADC0ASAL       DATA 0xb5
0000             59   _ADC0ASCF       DATA 0xa1
0000             60   _ADC0ASCT       DATA 0xc7
0000             61   _ADC0CF0        DATA 0xbc
0000             62   _ADC0CF1        DATA 0xb9
0000             63   _ADC0CF2        DATA 0xdf
0000             64   _ADC0CN0        DATA 0xe8
0000             65   _ADC0CN1        DATA 0xb2
0000             66   _ADC0CN2        DATA 0xb3
0000             67   _ADC0GTH        DATA 0xc4
0000             68   _ADC0GTL        DATA 0xc3
0000             69   _ADC0H          DATA 0xbe
0000             70   _ADC0L          DATA 0xbd
0000             71   _ADC0LTH        DATA 0xc6
0000             72   _ADC0LTL        DATA 0xc5
0000             73   _ADC0MX         DATA 0xbb
0000             74   _B              DATA 0xf0
0000             75   _CKCON0         DATA 0x8e
0000             76   _CKCON1         DATA 0xa6
0000             77   _CLEN0          DATA 0xc6
0000             78   _CLIE0          DATA 0xc7
0000             79   _CLIF0          DATA 0xe8
0000             80   _CLKSEL         DATA 0xa9
0000             81   _CLOUT0         DATA 0xd1
0000             82   _CLU0CF         DATA 0xb1
0000             83   _CLU0FN         DATA 0xaf
0000             84   _CLU0MX         DATA 0x84
0000             85   _CLU1CF         DATA 0xb3
0000             86   _CLU1FN         DATA 0xb2
0000             87   _CLU1MX         DATA 0x85
0000             88   _CLU2CF         DATA 0xb6
0000             89   _CLU2FN         DATA 0xb5
0000             90   _CLU2MX         DATA 0x91
0000             91   _CLU3CF         DATA 0xbf
0000             92   _CLU3FN         DATA 0xbe
0000             93   _CLU3MX         DATA 0xae
0000             94   _CMP0CN0        DATA 0x9b
0000             95   _CMP0CN1        DATA 0x99
0000             96   _CMP0MD         DATA 0x9d
0000             97   _CMP0MX         DATA 0x9f
0000             98   _CMP1CN0        DATA 0xbf
0000             99   _CMP1CN1        DATA 0xac
0000            100   _CMP1MD         DATA 0xab
0000            101   _CMP1MX         DATA 0xaa
0000            102   _CRC0CN0        DATA 0xce
0000            103   _CRC0CN1        DATA 0x86
0000            104   _CRC0CNT        DATA 0xd3
0000            105   _CRC0DAT        DATA 0xcb
0000            106   _CRC0FLIP       DATA 0xcf
0000            107   _CRC0IN         DATA 0xca
0000            108   _CRC0ST         DATA 0xd2
0000            109   _DAC0CF0        DATA 0x91
0000            110   _DAC0CF1        DATA 0x92
0000            111   _DAC0H          DATA 0x85
0000            112   _DAC0L          DATA 0x84
0000            113   _DAC1CF0        DATA 0x93
0000            114   _DAC1CF1        DATA 0x94
0000            115   _DAC1H          DATA 0x8a
0000            116   _DAC1L          DATA 0x89
0000            117   _DAC2CF0        DATA 0x95
0000            118   _DAC2CF1        DATA 0x96
0000            119   _DAC2H          DATA 0x8c
0000            120   _DAC2L          DATA 0x8b
0000            121   _DAC3CF0        DATA 0x9a
0000            122   _DAC3CF1        DATA 0x9c
0000            123   _DAC3H          DATA 0x8e
0000            124   _DAC3L          DATA 0x8d
0000            125   _DACGCF0        DATA 0x88
0000            126   _DACGCF1        DATA 0x98
0000            127   _DACGCF2        DATA 0xa2
0000            128   _DERIVID        DATA 0xad
0000            129   _DEVICEID       DATA 0xb5
0000            130   _DPH            DATA 0x83
0000            131   _DPL            DATA 0x82
0000            132   _EIE1           DATA 0xe6
0000            133   _EIE2           DATA 0xf3
0000            134   _EIP1           DATA 0xbb
0000            135   _EIP1H          DATA 0xee
0000            136   _EIP2           DATA 0xed
0000            137   _EIP2H          DATA 0xf6
0000            138   _EMI0CN         DATA 0xe7
0000            139   _FLKEY          DATA 0xb7
0000            140   _HFO0CAL        DATA 0xc7
0000            141   _HFO1CAL        DATA 0xd6
0000            142   _HFOCN          DATA 0xef
0000            143   _I2C0ADM        DATA 0xff
0000            144   _I2C0CN0        DATA 0xba
0000            145   _I2C0DIN        DATA 0xbc
0000            146   _I2C0DOUT       DATA 0xbb
0000            147   _I2C0FCN0       DATA 0xad
0000            148   _I2C0FCN1       DATA 0xab
0000            149   _I2C0FCT        DATA 0xf5
0000            150   _I2C0SLAD       DATA 0xbd
0000            151   _I2C0STAT       DATA 0xb9
0000            152   _IE             DATA 0xa8
0000            153   _IP             DATA 0xb8
0000            154   _IPH            DATA 0xf2
0000            155   _IT01CF         DATA 0xe4
0000            156   _LFO0CN         DATA 0xb1
0000            157   _P0             DATA 0x80
0000            158   _P0MASK         DATA 0xfe
0000            159   _P0MAT          DATA 0xfd
0000            160   _P0MDIN         DATA 0xf1
0000            161   _P0MDOUT        DATA 0xa4
0000            162   _P0SKIP         DATA 0xd4
0000            163   _P1             DATA 0x90
0000            164   _P1MASK         DATA 0xee
0000            165   _P1MAT          DATA 0xed
0000            166   _P1MDIN         DATA 0xf2
0000            167   _P1MDOUT        DATA 0xa5
0000            168   _P1SKIP         DATA 0xd5
0000            169   _P2             DATA 0xa0
0000            170   _P2MASK         DATA 0xfc
0000            171   _P2MAT          DATA 0xfb
0000            172   _P2MDIN         DATA 0xf3
0000            173   _P2MDOUT        DATA 0xa6
0000            174   _P2SKIP         DATA 0xcc
0000            175   _P3             DATA 0xb0
0000            176   _P3MDIN         DATA 0xf4
0000            177   _P3MDOUT        DATA 0x9c
0000            178   _PCA0CENT       DATA 0x9e
0000            179   _PCA0CLR        DATA 0x9c
0000            180   _PCA0CN0        DATA 0xd8
0000            181   _PCA0CPH0       DATA 0xfc
0000            182   _PCA0CPH1       DATA 0xea
0000            183   _PCA0CPH2       DATA 0xec
0000            184   _PCA0CPH3       DATA 0xf5
0000            185   _PCA0CPH4       DATA 0x85
0000            186   _PCA0CPH5       DATA 0xde
0000            187   _PCA0CPL0       DATA 0xfb
0000            188   _PCA0CPL1       DATA 0xe9
0000            189   _PCA0CPL2       DATA 0xeb
0000            190   _PCA0CPL3       DATA 0xf4
0000            191   _PCA0CPL4       DATA 0x84
0000            192   _PCA0CPL5       DATA 0xdd
0000            193   _PCA0CPM0       DATA 0xda
0000            194   _PCA0CPM1       DATA 0xdb
0000            195   _PCA0CPM2       DATA 0xdc
0000            196   _PCA0CPM3       DATA 0xae
0000            197   _PCA0CPM4       DATA 0xaf
0000            198   _PCA0CPM5       DATA 0xcc
0000            199   _PCA0H          DATA 0xfa
0000            200   _PCA0L          DATA 0xf9
0000            201   _PCA0MD         DATA 0xd9
0000            202   _PCA0POL        DATA 0x96
0000            203   _PCA0PWM        DATA 0xf7
0000            204   _PCON0          DATA 0x87
0000            205   _PCON1          DATA 0xcd
0000            206   _PFE0CN         DATA 0xc1
0000            207   _PRTDRV         DATA 0xf6
0000            208   _PSCTL          DATA 0x8f
0000            209   _PSTAT0         DATA 0xaa
0000            210   _PSW            DATA 0xd0
0000            211   _REF0CN         DATA 0xd1
0000            212   _REG0CN         DATA 0xc9
0000            213   _REVID          DATA 0xb6
0000            214   _RSTSRC         DATA 0xef
0000            215   _SBCON1         DATA 0x94
0000            216   _SBRLH1         DATA 0x96
0000            217   _SBRLL1         DATA 0x95
0000            218   _SBUF           DATA 0x99
0000            219   _SBUF0          DATA 0x99
0000            220   _SBUF1          DATA 0x92
0000            221   _SCON           DATA 0x98
0000            222   _SCON0          DATA 0x98
0000            223   _SCON1          DATA 0xc8
0000            224   _SFRPAGE        DATA 0xa7
0000            225   _SFRPGCN        DATA 0xbc
0000            226   _SFRSTACK       DATA 0xd7
0000            227   _SMB0ADM        DATA 0xd6
0000            228   _SMB0ADR        DATA 0xd7
0000            229   _SMB0CF         DATA 0xc1
0000            230   _SMB0CN0        DATA 0xc0
0000            231   _SMB0DAT        DATA 0xc2
0000            232   _SMB0FCN0       DATA 0xc3
0000            233   _SMB0FCN1       DATA 0xc4
0000            234   _SMB0FCT        DATA 0xef
0000            235   _SMB0RXLN       DATA 0xc5
0000            236   _SMB0TC         DATA 0xac
0000            237   _SMOD1          DATA 0x93
0000            238   _SP             DATA 0x81
0000            239   _SPI0CFG        DATA 0xa1
0000            240   _SPI0CKR        DATA 0xa2
0000            241   _SPI0CN0        DATA 0xf8
0000            242   _SPI0DAT        DATA 0xa3
0000            243   _SPI0FCN0       DATA 0x9a
0000            244   _SPI0FCN1       DATA 0x9b
0000            245   _SPI0FCT        DATA 0xf7
0000            246   _SPI0PCF        DATA 0xdf
0000            247   _TCON           DATA 0x88
0000            248   _TH0            DATA 0x8c
0000            249   _TH1            DATA 0x8d
0000            250   _TL0            DATA 0x8a
0000            251   _TL1            DATA 0x8b
0000            252   _TMOD           DATA 0x89
0000            253   _TMR2CN0        DATA 0xc8
0000            254   _TMR2CN1        DATA 0xfd
0000            255   _TMR2H          DATA 0xcf
0000            256   _TMR2L          DATA 0xce
0000            257   _TMR2RLH        DATA 0xcb
0000            258   _TMR2RLL        DATA 0xca
0000            259   _TMR3CN0        DATA 0x91
0000            260   _TMR3CN1        DATA 0xfe
0000            261   _TMR3H          DATA 0x95
0000            262   _TMR3L          DATA 0x94
0000            263   _TMR3RLH        DATA 0x93
0000            264   _TMR3RLL        DATA 0x92
0000            265   _TMR4CN0        DATA 0x98
0000            266   _TMR4CN1        DATA 0xff
0000            267   _TMR4H          DATA 0xa5
0000            268   _TMR4L          DATA 0xa4
0000            269   _TMR4RLH        DATA 0xa3
0000            270   _TMR4RLL        DATA 0xa2
0000            271   _TMR5CN0        DATA 0xc0
0000            272   _TMR5CN1        DATA 0xf1
0000            273   _TMR5H          DATA 0xd5
0000            274   _TMR5L          DATA 0xd4
0000            275   _TMR5RLH        DATA 0xd3
0000            276   _TMR5RLL        DATA 0xd2
0000            277   _UART0PCF       DATA 0xd9
0000            278   _UART1FCN0      DATA 0x9d
0000            279   _UART1FCN1      DATA 0xd8
0000            280   _UART1FCT       DATA 0xfa
0000            281   _UART1LIN       DATA 0x9e
0000            282   _UART1PCF       DATA 0xda
0000            283   _VDM0CN         DATA 0xff
0000            284   _WDTCN          DATA 0x97
0000            285   _XBR0           DATA 0xe1
0000            286   _XBR1           DATA 0xe2
0000            287   _XBR2           DATA 0xe3
0000            288   _XOSC0CN        DATA 0x86
0000            289   _DPTR           DATA 0x8382
0000            290   _TMR2RL         DATA 0xcbca
0000            291   _TMR3RL         DATA 0x9392
0000            292   _TMR4RL         DATA 0xa3a2
0000            293   _TMR5RL         DATA 0xd3d2
0000            294   _TMR0           DATA 0x8c8a
0000            295   _TMR1           DATA 0x8d8b
0000            296   _TMR2           DATA 0xcfce
0000            297   _TMR3           DATA 0x9594
0000            298   _TMR4           DATA 0xa5a4
0000            299   _TMR5           DATA 0xd5d4
0000            300   _SBRL1          DATA 0x9695
0000            301   _PCA0           DATA 0xfaf9
0000            302   _PCA0CP0        DATA 0xfcfb
0000            303   _PCA0CP1        DATA 0xeae9
0000            304   _PCA0CP2        DATA 0xeceb
0000            305   _PCA0CP3        DATA 0xf5f4
0000            306   _PCA0CP4        DATA 0x8584
0000            307   _PCA0CP5        DATA 0xdedd
0000            308   _ADC0ASA        DATA 0xb6b5
0000            309   _ADC0GT         DATA 0xc4c3
0000            310   _ADC0           DATA 0xbebd
0000            311   _ADC0LT         DATA 0xc6c5
0000            312   _DAC0           DATA 0x8584
0000            313   _DAC1           DATA 0x8a89
0000            314   _DAC2           DATA 0x8c8b
0000            315   _DAC3           DATA 0x8e8d
0000            316   ;--------------------------------------------------------
0000            317   ; special function bits
0000            318   ;--------------------------------------------------------
0000            319   _ACC_0          BIT 0xe0
0000            320   _ACC_1          BIT 0xe1
0000            321   _ACC_2          BIT 0xe2
0000            322   _ACC_3          BIT 0xe3
0000            323   _ACC_4          BIT 0xe4
0000            324   _ACC_5          BIT 0xe5
0000            325   _ACC_6          BIT 0xe6
0000            326   _ACC_7          BIT 0xe7
0000            327   _TEMPE          BIT 0xe8
0000            328   _ADGN0          BIT 0xe9
0000            329   _ADGN1          BIT 0xea
0000            330   _ADWINT         BIT 0xeb
0000            331   _ADBUSY         BIT 0xec
0000            332   _ADINT          BIT 0xed
0000            333   _IPOEN          BIT 0xee
0000            334   _ADEN           BIT 0xef
0000            335   _B_0            BIT 0xf0
0000            336   _B_1            BIT 0xf1
0000            337   _B_2            BIT 0xf2
0000            338   _B_3            BIT 0xf3
0000            339   _B_4            BIT 0xf4
0000            340   _B_5            BIT 0xf5
0000            341   _B_6            BIT 0xf6
0000            342   _B_7            BIT 0xf7
0000            343   _C0FIF          BIT 0xe8
0000            344   _C0RIF          BIT 0xe9
0000            345   _C1FIF          BIT 0xea
0000            346   _C1RIF          BIT 0xeb
0000            347   _C2FIF          BIT 0xec
0000            348   _C2RIF          BIT 0xed
0000            349   _C3FIF          BIT 0xee
0000            350   _C3RIF          BIT 0xef
0000            351   _D1SRC0         BIT 0x88
0000            352   _D1SRC1         BIT 0x89
0000            353   _D1AMEN         BIT 0x8a
0000            354   _D01REFSL       BIT 0x8b
0000            355   _D3SRC0         BIT 0x8c
0000            356   _D3SRC1         BIT 0x8d
0000            357   _D3AMEN         BIT 0x8e
0000            358   _D23REFSL       BIT 0x8f
0000            359   _D0UDIS         BIT 0x98
0000            360   _D1UDIS         BIT 0x99
0000            361   _D2UDIS         BIT 0x9a
0000            362   _D3UDIS         BIT 0x9b
0000            363   _EX0            BIT 0xa8
0000            364   _ET0            BIT 0xa9
0000            365   _EX1            BIT 0xaa
0000            366   _ET1            BIT 0xab
0000            367   _ES0            BIT 0xac
0000            368   _ET2            BIT 0xad
0000            369   _ESPI0          BIT 0xae
0000            370   _EA             BIT 0xaf
0000            371   _PX0            BIT 0xb8
0000            372   _PT0            BIT 0xb9
0000            373   _PX1            BIT 0xba
0000            374   _PT1            BIT 0xbb
0000            375   _PS0            BIT 0xbc
0000            376   _PT2            BIT 0xbd
0000            377   _PSPI0          BIT 0xbe
0000            378   _P0_0           BIT 0x80
0000            379   _P0_1           BIT 0x81
0000            380   _P0_2           BIT 0x82
0000            381   _P0_3           BIT 0x83
0000            382   _P0_4           BIT 0x84
0000            383   _P0_5           BIT 0x85
0000            384   _P0_6           BIT 0x86
0000            385   _P0_7           BIT 0x87
0000            386   _P1_0           BIT 0x90
0000            387   _P1_1           BIT 0x91
0000            388   _P1_2           BIT 0x92
0000            389   _P1_3           BIT 0x93
0000            390   _P1_4           BIT 0x94
0000            391   _P1_5           BIT 0x95
0000            392   _P1_6           BIT 0x96
0000            393   _P1_7           BIT 0x97
0000            394   _P2_0           BIT 0xa0
0000            395   _P2_1           BIT 0xa1
0000            396   _P2_2           BIT 0xa2
0000            397   _P2_3           BIT 0xa3
0000            398   _P2_4           BIT 0xa4
0000            399   _P2_5           BIT 0xa5
0000            400   _P2_6           BIT 0xa6
0000            401   _P3_0           BIT 0xb0
0000            402   _P3_1           BIT 0xb1
0000            403   _P3_2           BIT 0xb2
0000            404   _P3_3           BIT 0xb3
0000            405   _P3_4           BIT 0xb4
0000            406   _P3_7           BIT 0xb7
0000            407   _CCF0           BIT 0xd8
0000            408   _CCF1           BIT 0xd9
0000            409   _CCF2           BIT 0xda
0000            410   _CCF3           BIT 0xdb
0000            411   _CCF4           BIT 0xdc
0000            412   _CCF5           BIT 0xdd
0000            413   _CR             BIT 0xde
0000            414   _CF             BIT 0xdf
0000            415   _PARITY         BIT 0xd0
0000            416   _F1             BIT 0xd1
0000            417   _OV             BIT 0xd2
0000            418   _RS0            BIT 0xd3
0000            419   _RS1            BIT 0xd4
0000            420   _F0             BIT 0xd5
0000            421   _AC             BIT 0xd6
0000            422   _CY             BIT 0xd7
0000            423   _RI             BIT 0x98
0000            424   _TI             BIT 0x99
0000            425   _RB8            BIT 0x9a
0000            426   _TB8            BIT 0x9b
0000            427   _REN            BIT 0x9c
0000            428   _CE             BIT 0x9d
0000            429   _SMODE          BIT 0x9e
0000            430   _RI1            BIT 0xc8
0000            431   _TI1            BIT 0xc9
0000            432   _RBX1           BIT 0xca
0000            433   _TBX1           BIT 0xcb
0000            434   _REN1           BIT 0xcc
0000            435   _PERR1          BIT 0xcd
0000            436   _OVR1           BIT 0xce
0000            437   _SI             BIT 0xc0
0000            438   _ACK            BIT 0xc1
0000            439   _ARBLOST        BIT 0xc2
0000            440   _ACKRQ          BIT 0xc3
0000            441   _STO            BIT 0xc4
0000            442   _STA            BIT 0xc5
0000            443   _TXMODE         BIT 0xc6
0000            444   _MASTER         BIT 0xc7
0000            445   _SPIEN          BIT 0xf8
0000            446   _TXNF           BIT 0xf9
0000            447   _NSSMD0         BIT 0xfa
0000            448   _NSSMD1         BIT 0xfb
0000            449   _RXOVRN         BIT 0xfc
0000            450   _MODF           BIT 0xfd
0000            451   _WCOL           BIT 0xfe
0000            452   _SPIF           BIT 0xff
0000            453   _IT0            BIT 0x88
0000            454   _IE0            BIT 0x89
0000            455   _IT1            BIT 0x8a
0000            456   _IE1            BIT 0x8b
0000            457   _TR0            BIT 0x8c
0000            458   _TF0            BIT 0x8d
0000            459   _TR1            BIT 0x8e
0000            460   _TF1            BIT 0x8f
0000            461   _T2XCLK0        BIT 0xc8
0000            462   _T2XCLK1        BIT 0xc9
0000            463   _TR2            BIT 0xca
0000            464   _T2SPLIT        BIT 0xcb
0000            465   _TF2CEN         BIT 0xcc
0000            466   _TF2LEN         BIT 0xcd
0000            467   _TF2L           BIT 0xce
0000            468   _TF2H           BIT 0xcf
0000            469   _T4XCLK0        BIT 0x98
0000            470   _T4XCLK1        BIT 0x99
0000            471   _TR4            BIT 0x9a
0000            472   _T4SPLIT        BIT 0x9b
0000            473   _TF4CEN         BIT 0x9c
0000            474   _TF4LEN         BIT 0x9d
0000            475   _TF4L           BIT 0x9e
0000            476   _TF4H           BIT 0x9f
0000            477   _T5XCLK0        BIT 0xc0
0000            478   _T5XCLK1        BIT 0xc1
0000            479   _TR5            BIT 0xc2
0000            480   _T5SPLIT        BIT 0xc3
0000            481   _TF5CEN         BIT 0xc4
0000            482   _TF5LEN         BIT 0xc5
0000            483   _TF5L           BIT 0xc6
0000            484   _TF5H           BIT 0xc7
0000            485   _RIE            BIT 0xd8
0000            486   _RXTO0          BIT 0xd9
0000            487   _RXTO1          BIT 0xda
0000            488   _RFRQ           BIT 0xdb
0000            489   _TIE            BIT 0xdc
0000            490   _TXHOLD         BIT 0xdd
0000            491   _TXNF1          BIT 0xde
0000            492   _TFRQ           BIT 0xdf
0000            493   ;--------------------------------------------------------
0000            494   ; overlayable register banks
0000            495   ;--------------------------------------------------------
0000            496            rbank0 segment data overlay
0000            497   ;--------------------------------------------------------
0000            498   ; internal ram data
0000            499   ;--------------------------------------------------------
0000            500            rseg R_DSEG
0000            501   _overflow_count:
0000            502            ds 1
0001            503   _v1_rms:
0001            504            ds 4
0005            505   _v2_rms:
0005            506            ds 4
0009            507   _v1:
0009            508            ds 4
000D            509   _v2:
000D            510            ds 4
0011            511   _LCDprint_PARM_2:
0011            512            ds 1
0012            513   _LCDprint2_PARM_2:
0012            514            ds 1
0013            515   _LCDprint2_PARM_3:
0013            516            ds 1
0014            517   _main_period_1_76:
0014            518            ds 4
0018            519   _main_sloc0_1_0:
0018            520            ds 2
001A            521   _main_sloc1_1_0:
001A            522            ds 4
001E            523   ;--------------------------------------------------------
001E            524   ; overlayable items in internal ram 
001E            525   ;--------------------------------------------------------
0000            526            rseg    R_OSEG
0000            527            rseg    R_OSEG
0000            528   _InitPinADC_PARM_2:
0000            529            ds 1
0001            530            rseg    R_OSEG
0001            531   ;--------------------------------------------------------
0001            532   ; indirectly addressable internal ram data
0001            533   ;--------------------------------------------------------
0000            534            rseg R_ISEG
0000            535   ;--------------------------------------------------------
0000            536   ; absolute internal ram data
0000            537   ;--------------------------------------------------------
0000            538            DSEG
0000            539   ;--------------------------------------------------------
0000            540   ; bit data
0000            541   ;--------------------------------------------------------
0000            542            rseg R_BSEG
0000            543   _LCDprint_PARM_3:
0000            544            DBIT    1
0001            545   ;--------------------------------------------------------
0001            546   ; paged external ram data
0001            547   ;--------------------------------------------------------
0000            548            rseg R_PSEG
0000            549   ;--------------------------------------------------------
0000            550   ; external ram data
0000            551   ;--------------------------------------------------------
0000            552            rseg R_XSEG
0000            553   ;--------------------------------------------------------
0000            554   ; absolute external ram data
0000            555   ;--------------------------------------------------------
0000            556            XSEG
0000            557   ;--------------------------------------------------------
0000            558   ; external initialized ram data
0000            559   ;--------------------------------------------------------
0000            560            rseg R_IXSEG
0000            561            rseg R_HOME
0000            562            rseg R_GSINIT
0000            563            rseg R_CSEG
0000            564   ;--------------------------------------------------------
0000            565   ; Reset entry point and interrupt vectors
0000            566   ;--------------------------------------------------------
0000            567            CSEG at 0x0000
0000 020000     568            ljmp    _crt0
0003            569   ;--------------------------------------------------------
0003            570   ; global & static initialisations
0003            571   ;--------------------------------------------------------
0000            572            rseg R_HOME
0000            573            rseg R_GSINIT
0000            574            rseg R_GSINIT
0000            575   ;--------------------------------------------------------
0000            576   ; data variables initialization
0000            577   ;--------------------------------------------------------
0000            578            rseg R_DINIT
0000            579   ;        sourcecode.c:29: float v1_rms = 0; float v2_rms = 0;
0000 751800     580            mov     _v1_rms,#0x00
0003 751900     581            mov     (_v1_rms + 1),#0x00
0006 751A00     582            mov     (_v1_rms + 2),#0x00
0009 751B00     583            mov     (_v1_rms + 3),#0x00
000C            584   ;        sourcecode.c:29: float v1 = 0; float v2 = 0;
000C 75D800     585            mov     _v2_rms,#0x00
000F 75D900     586            mov     (_v2_rms + 1),#0x00
0012 75DA00     587            mov     (_v2_rms + 2),#0x00
0015 75DB00     588            mov     (_v2_rms + 3),#0x00
0018            589   ;        sourcecode.c:30: 
0018 759800     590            mov     _v1,#0x00
001B 759900     591            mov     (_v1 + 1),#0x00
001E 759A00     592            mov     (_v1 + 2),#0x00
0021 759B00     593            mov     (_v1 + 3),#0x00
0024            594   ;        sourcecode.c:30: float v1 = 0; float v2 = 0;
0024 755800     595            mov     _v2,#0x00
0027 755900     596            mov     (_v2 + 1),#0x00
002A 755A00     597            mov     (_v2 + 2),#0x00
002D 755B00     598            mov     (_v2 + 3),#0x00
0030            599            ; The linker places a 'ret' at the end of segment R_DINIT.
0030            600   ;--------------------------------------------------------
0030            601   ; code
0030            602   ;--------------------------------------------------------
0000            603            rseg R_CSEG
0000            604   ;------------------------------------------------------------
0000            605   ;Allocation info for local variables in function '_c51_external_startup'
0000            606   ;------------------------------------------------------------
0000            607   ;------------------------------------------------------------
0000            608   ;        sourcecode.c:32: char _c51_external_startup (void)
0000            609   ;        -----------------------------------------
0000            610   ;         function _c51_external_startup
0000            611   ;        -----------------------------------------
0000            612   __c51_external_startup:
0000            613            using   0
0000            614   ;        sourcecode.c:35: SFRPAGE = 0x00;
0000 75A700     615            mov     _SFRPAGE,#0x00
0003            616   ;        sourcecode.c:36: WDTCN = 0xDE; //First key
0003 7597DE     617            mov     _WDTCN,#0xDE
0006            618   ;        sourcecode.c:37: WDTCN = 0xAD; //Second key
0006 7597AD     619            mov     _WDTCN,#0xAD
0009            620   ;        sourcecode.c:39: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     621            mov     _VDM0CN,#0x80
000C            622   ;        sourcecode.c:40: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     623            mov     _RSTSRC,#0x06
000F            624   ;        sourcecode.c:47: SFRPAGE = 0x10;
000F 75A710     625            mov     _SFRPAGE,#0x10
0012            626   ;        sourcecode.c:48: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     627            mov     _PFE0CN,#0x20
0015            628   ;        sourcecode.c:49: SFRPAGE = 0x00;
0015 75A700     629            mov     _SFRPAGE,#0x00
0018            630   ;        sourcecode.c:70: CLKSEL = 0x00;
0018 75A900     631            mov     _CLKSEL,#0x00
001B            632   ;        sourcecode.c:71: CLKSEL = 0x00;
001B 75A900     633            mov     _CLKSEL,#0x00
001E            634   ;        sourcecode.c:72: while ((CLKSEL & 0x80) == 0);
001E            635   L002001?:
001E E5A9       636            mov     a,_CLKSEL
0020 30E7E0     637            jnb     acc.7,L002001?
0023            638   ;        sourcecode.c:73: CLKSEL = 0x03;
0023 75A903     639            mov     _CLKSEL,#0x03
0026            640   ;        sourcecode.c:74: CLKSEL = 0x03;
0026 75A903     641            mov     _CLKSEL,#0x03
0029            642   ;        sourcecode.c:75: while ((CLKSEL & 0x80) == 0);
0029            643   L002004?:
0029 E5A9       644            mov     a,_CLKSEL
002B 30E760     645            jnb     acc.7,L002004?
002E            646   ;        sourcecode.c:80: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     647            orl     _P0MDOUT,#0x10
0031            648   ;        sourcecode.c:81: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     649            mov     _XBR0,#0x01
0034            650   ;        sourcecode.c:82: XBR1     = 0X00;
0034 75E200     651            mov     _XBR1,#0x00
0037            652   ;        sourcecode.c:83: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     653            mov     _XBR2,#0x40
003A            654   ;        sourcecode.c:89: SCON0 = 0x10;
003A 759810     655            mov     _SCON0,#0x10
003D            656   ;        sourcecode.c:90: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     657            mov     _TH1,#0xE6
0040            658   ;        sourcecode.c:91: TL1 = TH1;      // Init Timer1
0040 858D8B     659            mov     _TL1,_TH1
0043            660   ;        sourcecode.c:92: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     661            anl     _TMOD,#0x0F
0046            662   ;        sourcecode.c:93: TMOD |=  0x20;                       
0046 438920     663            orl     _TMOD,#0x20
0049            664   ;        sourcecode.c:94: TR1 = 1; // START Timer1
0049 D28E       665            setb    _TR1
004B            666   ;        sourcecode.c:95: TI = 1;  // Indicate TX0 ready
004B D299       667            setb    _TI
004D            668   ;        sourcecode.c:97: return 0;
004D 758200     669            mov     dpl,#0x00
0050 22         670            ret
0051            671   ;------------------------------------------------------------
0051            672   ;Allocation info for local variables in function 'InitADC'
0051            673   ;------------------------------------------------------------
0051            674   ;------------------------------------------------------------
0051            675   ;        sourcecode.c:100: void InitADC (void)
0051            676   ;        -----------------------------------------
0051            677   ;         function InitADC
0051            678   ;        -----------------------------------------
0051            679   _InitADC:
0051            680   ;        sourcecode.c:102: SFRPAGE = 0x00;
0051 75A700     681            mov     _SFRPAGE,#0x00
0054            682   ;        sourcecode.c:103: ADEN=0; // Disable ADC
0054 C2EF       683            clr     _ADEN
0056            684   ;        sourcecode.c:108: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     685            mov     _ADC0CN1,#0x80
0059            686   ;        sourcecode.c:112: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     687            mov     _ADC0CF0,#0x20
005C            688   ;        sourcecode.c:116: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     689            mov     _ADC0CF1,#0x1E
005F            690   ;        sourcecode.c:125: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     691            mov     _ADC0CN0,#0x00
0062            692   ;        sourcecode.c:130: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     693            mov     _ADC0CF2,#0x3F
0065            694   ;        sourcecode.c:134: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     695            mov     _ADC0CN2,#0x00
0068            696   ;        sourcecode.c:136: ADEN=1; // Enable ADC
0068 D2EF       697            setb    _ADEN
006A 22         698            ret
006B            699   ;------------------------------------------------------------
006B            700   ;Allocation info for local variables in function 'Timer3us'
006B            701   ;------------------------------------------------------------
006B            702   ;us                        Allocated to registers r2 
006B            703   ;i                         Allocated to registers r3 
006B            704   ;------------------------------------------------------------
006B            705   ;        sourcecode.c:140: void Timer3us(unsigned char us)
006B            706   ;        -----------------------------------------
006B            707   ;         function Timer3us
006B            708   ;        -----------------------------------------
006B            709   _Timer3us:
006B AA82       710            mov     r2,dpl
006D            711   ;        sourcecode.c:145: CKCON0|=0b_0100_0000;
006D 438E40     712            orl     _CKCON0,#0x40
0070            713   ;        sourcecode.c:147: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     714            mov     _TMR3RL,#0xB8
0073 7593FF     715            mov     (_TMR3RL >> 8),#0xFF
0076            716   ;        sourcecode.c:148: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     717            mov     _TMR3,_TMR3RL
0079 859395     718            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            719   ;        sourcecode.c:150: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     720            mov     _TMR3CN0,#0x04
007F            721   ;        sourcecode.c:151: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       722            mov     r3,#0x00
0081            723   L004004?:
0081 C3         724            clr     c
0082 EB         725            mov     a,r3
0083 9A         726            subb    a,r2
0084 5000       727            jnc     L004007?
0086            728   ;        sourcecode.c:153: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            729   L004001?:
0086 E591       730            mov     a,_TMR3CN0
0088 30E760     731            jnb     acc.7,L004001?
008B            732   ;        sourcecode.c:154: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     733            anl     _TMR3CN0,#0x7F
008E            734   ;        sourcecode.c:151: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         735            inc     r3
008F 8000       736            sjmp    L004004?
0091            737   L004007?:
0091            738   ;        sourcecode.c:156: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     739            mov     _TMR3CN0,#0x00
0094 22         740            ret
0095            741   ;------------------------------------------------------------
0095            742   ;Allocation info for local variables in function 'waitms'
0095            743   ;------------------------------------------------------------
0095            744   ;ms                        Allocated to registers r2 r3 
0095            745   ;j                         Allocated to registers r4 r5 
0095            746   ;k                         Allocated to registers r6 
0095            747   ;------------------------------------------------------------
0095            748   ;        sourcecode.c:159: void waitms (unsigned int ms)
0095            749   ;        -----------------------------------------
0095            750   ;         function waitms
0095            751   ;        -----------------------------------------
0095            752   _waitms:
0095 AA82       753            mov     r2,dpl
0097 AB83       754            mov     r3,dph
0099            755   ;        sourcecode.c:163: for(j=0; j<ms; j++)
0099 7C00       756            mov     r4,#0x00
009B 7D00       757            mov     r5,#0x00
009D            758   L005005?:
009D C3         759            clr     c
009E EC         760            mov     a,r4
009F 9A         761            subb    a,r2
00A0 ED         762            mov     a,r5
00A1 9B         763            subb    a,r3
00A2 5000       764            jnc     L005009?
00A4            765   ;        sourcecode.c:164: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       766            mov     r6,#0x00
00A6            767   L005001?:
00A6 BE04A8     768            cjne    r6,#0x04,L005018?
00A9            769   L005018?:
00A9 5000       770            jnc     L005007?
00AB 7582FA     771            mov     dpl,#0xFA
00AE C002       772            push    ar2
00B0 C003       773            push    ar3
00B2 C004       774            push    ar4
00B4 C005       775            push    ar5
00B6 C006       776            push    ar6
00B8 120000     777            lcall   _Timer3us
00BB D006       778            pop     ar6
00BD D005       779            pop     ar5
00BF D004       780            pop     ar4
00C1 D003       781            pop     ar3
00C3 D002       782            pop     ar2
00C5 0E         783            inc     r6
00C6 8000       784            sjmp    L005001?
00C8            785   L005007?:
00C8            786   ;        sourcecode.c:163: for(j=0; j<ms; j++)
00C8 0C         787            inc     r4
00C9 BC00E8     788            cjne    r4,#0x00,L005005?
00CC 0D         789            inc     r5
00CD 8000       790            sjmp    L005005?
00CF            791   L005009?:
00CF 22         792            ret
00D0            793   ;------------------------------------------------------------
00D0            794   ;Allocation info for local variables in function 'InitPinADC'
00D0            795   ;------------------------------------------------------------
00D0            796   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            797   ;portno                    Allocated to registers r2 
00D0            798   ;mask                      Allocated to registers r3 
00D0            799   ;------------------------------------------------------------
00D0            800   ;        sourcecode.c:169: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            801   ;        -----------------------------------------
00D0            802   ;         function InitPinADC
00D0            803   ;        -----------------------------------------
00D0            804   _InitPinADC:
00D0 AA82       805            mov     r2,dpl
00D2            806   ;        sourcecode.c:173: mask=1<<pinno;
00D2 85C8F0     807            mov     b,_InitPinADC_PARM_2
00D5 05F0       808            inc     b
00D7 7401       809            mov     a,#0x01
00D9 8000       810            sjmp    L006013?
00DB            811   L006011?:
00DB 25E0       812            add     a,acc
00DD            813   L006013?:
00DD D5F0A8     814            djnz    b,L006011?
00E0 FB         815            mov     r3,a
00E1            816   ;        sourcecode.c:175: SFRPAGE = 0x20;
00E1 75A720     817            mov     _SFRPAGE,#0x20
00E4            818   ;        sourcecode.c:176: switch (portno)
00E4 BA00E8     819            cjne    r2,#0x00,L006014?
00E7 8000       820            sjmp    L006001?
00E9            821   L006014?:
00E9 BA0168     822            cjne    r2,#0x01,L006015?
00EC 8000       823            sjmp    L006002?
00EE            824   L006015?:
00EE            825   ;        sourcecode.c:178: case 0:
00EE BA02E8     826            cjne    r2,#0x02,L006005?
00F1 8000       827            sjmp    L006003?
00F3            828   L006001?:
00F3            829   ;        sourcecode.c:179: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         830            mov     a,r3
00F4 F4         831            cpl     a
00F5 FA         832            mov     r2,a
00F6 52F1       833            anl     _P0MDIN,a
00F8            834   ;        sourcecode.c:180: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         835            mov     a,r3
00F9 42D4       836            orl     _P0SKIP,a
00FB            837   ;        sourcecode.c:181: break;
00FB            838   ;        sourcecode.c:182: case 1:
00FB 8000       839            sjmp    L006005?
00FD            840   L006002?:
00FD            841   ;        sourcecode.c:183: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         842            mov     a,r3
00FE F4         843            cpl     a
00FF FA         844            mov     r2,a
0100 52F2       845            anl     _P1MDIN,a
0102            846   ;        sourcecode.c:184: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         847            mov     a,r3
0103 42D5       848            orl     _P1SKIP,a
0105            849   ;        sourcecode.c:185: break;
0105            850   ;        sourcecode.c:186: case 2:
0105 8000       851            sjmp    L006005?
0107            852   L006003?:
0107            853   ;        sourcecode.c:187: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         854            mov     a,r3
0108 F4         855            cpl     a
0109 FA         856            mov     r2,a
010A 52F3       857            anl     _P2MDIN,a
010C            858   ;        sourcecode.c:188: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         859            mov     a,r3
010D 42CC       860            orl     _P2SKIP,a
010F            861   ;        sourcecode.c:192: }
010F            862   L006005?:
010F            863   ;        sourcecode.c:193: SFRPAGE = 0x00;
010F 75A700     864            mov     _SFRPAGE,#0x00
0112 22         865            ret
0113            866   ;------------------------------------------------------------
0113            867   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            868   ;------------------------------------------------------------
0113            869   ;pin                       Allocated to registers 
0113            870   ;------------------------------------------------------------
0113            871   ;        sourcecode.c:196: unsigned int ADC_at_Pin(unsigned char pin)
0113            872   ;        -----------------------------------------
0113            873   ;         function ADC_at_Pin
0113            874   ;        -----------------------------------------
0113            875   _ADC_at_Pin:
0113 8582BB     876            mov     _ADC0MX,dpl
0116            877   ;        sourcecode.c:199: ADINT = 0;
0116 C2ED       878            clr     _ADINT
0118            879   ;        sourcecode.c:200: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       880            setb    _ADBUSY
011A            881   ;        sourcecode.c:201: while (!ADINT); // Wait for conversion to complete
011A            882   L007001?:
011A 30ED68     883            jnb     _ADINT,L007001?
011D            884   ;        sourcecode.c:202: return (ADC0);
011D 85BD82     885            mov     dpl,_ADC0
0120 85BE83     886            mov     dph,(_ADC0 >> 8)
0123 22         887            ret
0124            888   ;------------------------------------------------------------
0124            889   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            890   ;------------------------------------------------------------
0124            891   ;pin                       Allocated to registers r2 
0124            892   ;------------------------------------------------------------
0124            893   ;        sourcecode.c:213: float Volts_at_Pin(unsigned char pin)
0124            894   ;        -----------------------------------------
0124            895   ;         function Volts_at_Pin
0124            896   ;        -----------------------------------------
0124            897   _Volts_at_Pin:
0124            898   ;        sourcecode.c:215: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     899            lcall   _ADC_at_Pin
0127 120000     900            lcall   ___uint2fs
012A AA82       901            mov     r2,dpl
012C AB83       902            mov     r3,dph
012E ACF0       903            mov     r4,b
0130 FD         904            mov     r5,a
0131 C002       905            push    ar2
0133 C003       906            push    ar3
0135 C004       907            push    ar4
0137 C005       908            push    ar5
0139 90923A     909            mov     dptr,#0x923A
013C 75F053     910            mov     b,#0x53
013F 7440       911            mov     a,#0x40
0141 120000     912            lcall   ___fsmul
0144 AA82       913            mov     r2,dpl
0146 AB83       914            mov     r3,dph
0148 ACF0       915            mov     r4,b
014A FD         916            mov     r5,a
014B E581       917            mov     a,sp
014D 24FC       918            add     a,#0xfc
014F F581       919            mov     sp,a
0151 E4         920            clr     a
0152 C0E0       921            push    acc
0154 74FC       922            mov     a,#0xFC
0156 C0E0       923            push    acc
0158 747F       924            mov     a,#0x7F
015A C0E0       925            push    acc
015C 7446       926            mov     a,#0x46
015E C0E0       927            push    acc
0160 8A82       928            mov     dpl,r2
0162 8B83       929            mov     dph,r3
0164 8CF0       930            mov     b,r4
0166 ED         931            mov     a,r5
0167 120000     932            lcall   ___fsdiv
016A AA82       933            mov     r2,dpl
016C AB83       934            mov     r3,dph
016E ACF0       935            mov     r4,b
0170 FD         936            mov     r5,a
0171 E581       937            mov     a,sp
0173 24FC       938            add     a,#0xfc
0175 F581       939            mov     sp,a
0177 8A82       940            mov     dpl,r2
0179 8B83       941            mov     dph,r3
017B 8CF0       942            mov     b,r4
017D ED         943            mov     a,r5
017E 22         944            ret
017F            945   ;------------------------------------------------------------
017F            946   ;Allocation info for local variables in function 'TIMER0_Init'
017F            947   ;------------------------------------------------------------
017F            948   ;------------------------------------------------------------
017F            949   ;        sourcecode.c:218: void TIMER0_Init(void)
017F            950   ;        -----------------------------------------
017F            951   ;         function TIMER0_Init
017F            952   ;        -----------------------------------------
017F            953   _TIMER0_Init:
017F            954   ;        sourcecode.c:220: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
017F 5389F0     955            anl     _TMOD,#0xF0
0182            956   ;        sourcecode.c:221: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0182 438901     957            orl     _TMOD,#0x01
0185            958   ;        sourcecode.c:222: TR0=0; // Stop Timer/Counter 0
0185 C28C       959            clr     _TR0
0187 22         960            ret
0188            961   ;------------------------------------------------------------
0188            962   ;Allocation info for local variables in function 'LCD_pulse'
0188            963   ;------------------------------------------------------------
0188            964   ;------------------------------------------------------------
0188            965   ;        sourcecode.c:225: void LCD_pulse (void)
0188            966   ;        -----------------------------------------
0188            967   ;         function LCD_pulse
0188            968   ;        -----------------------------------------
0188            969   _LCD_pulse:
0188            970   ;        sourcecode.c:227: LCD_E=1;
0188 D2A0       971            setb    _P2_0
018A            972   ;        sourcecode.c:228: Timer3us(40);
018A 758228     973            mov     dpl,#0x28
018D 120000     974            lcall   _Timer3us
0190            975   ;        sourcecode.c:229: LCD_E=0;
0190 C2A0       976            clr     _P2_0
0192 22         977            ret
0193            978   ;------------------------------------------------------------
0193            979   ;Allocation info for local variables in function 'LCD_byte'
0193            980   ;------------------------------------------------------------
0193            981   ;x                         Allocated to registers r2 
0193            982   ;------------------------------------------------------------
0193            983   ;        sourcecode.c:232: void LCD_byte (unsigned char x)
0193            984   ;        -----------------------------------------
0193            985   ;         function LCD_byte
0193            986   ;        -----------------------------------------
0193            987   _LCD_byte:
0193 AA82       988            mov     r2,dpl
0195            989   ;        sourcecode.c:235: ACC=x; //Send high nible
0195 8AE0       990            mov     _ACC,r2
0197            991   ;        sourcecode.c:236: LCD_D7=ACC_7;
0197 A2E7       992            mov     c,_ACC_7
0199 9290       993            mov     _P1_0,c
019B            994   ;        sourcecode.c:237: LCD_D6=ACC_6;
019B A2E6       995            mov     c,_ACC_6
019D 9291       996            mov     _P1_1,c
019F            997   ;        sourcecode.c:238: LCD_D5=ACC_5;
019F A2E5       998            mov     c,_ACC_5
01A1 9292       999            mov     _P1_2,c
01A3           1000   ;        sourcecode.c:239: LCD_D4=ACC_4;
01A3 A2E4      1001            mov     c,_ACC_4
01A5 9293      1002            mov     _P1_3,c
01A7           1003   ;        sourcecode.c:240: LCD_pulse();
01A7 C002      1004            push    ar2
01A9 120000    1005            lcall   _LCD_pulse
01AC           1006   ;        sourcecode.c:241: Timer3us(40);
01AC 758228    1007            mov     dpl,#0x28
01AF 120000    1008            lcall   _Timer3us
01B2 D002      1009            pop     ar2
01B4           1010   ;        sourcecode.c:242: ACC=x; //Send low nible
01B4 8AE0      1011            mov     _ACC,r2
01B6           1012   ;        sourcecode.c:243: LCD_D7=ACC_3;
01B6 A2E3      1013            mov     c,_ACC_3
01B8 9290      1014            mov     _P1_0,c
01BA           1015   ;        sourcecode.c:244: LCD_D6=ACC_2;
01BA A2E2      1016            mov     c,_ACC_2
01BC 9291      1017            mov     _P1_1,c
01BE           1018   ;        sourcecode.c:245: LCD_D5=ACC_1;
01BE A2E1      1019            mov     c,_ACC_1
01C0 9292      1020            mov     _P1_2,c
01C2           1021   ;        sourcecode.c:246: LCD_D4=ACC_0;
01C2 A2E0      1022            mov     c,_ACC_0
01C4 9293      1023            mov     _P1_3,c
01C6           1024   ;        sourcecode.c:247: LCD_pulse();
01C6 020000    1025            ljmp    _LCD_pulse
01C9           1026   ;------------------------------------------------------------
01C9           1027   ;Allocation info for local variables in function 'WriteData'
01C9           1028   ;------------------------------------------------------------
01C9           1029   ;x                         Allocated to registers r2 
01C9           1030   ;------------------------------------------------------------
01C9           1031   ;        sourcecode.c:250: void WriteData (unsigned char x)
01C9           1032   ;        -----------------------------------------
01C9           1033   ;         function WriteData
01C9           1034   ;        -----------------------------------------
01C9           1035   _WriteData:
01C9 AA82      1036            mov     r2,dpl
01CB           1037   ;        sourcecode.c:252: LCD_RS=1;
01CB D297      1038            setb    _P1_7
01CD           1039   ;        sourcecode.c:253: LCD_byte(x);
01CD 8A82      1040            mov     dpl,r2
01CF 120000    1041            lcall   _LCD_byte
01D2           1042   ;        sourcecode.c:254: waitms(2);
01D2 900002    1043            mov     dptr,#0x0002
01D5 020000    1044            ljmp    _waitms
01D8           1045   ;------------------------------------------------------------
01D8           1046   ;Allocation info for local variables in function 'WriteCommand'
01D8           1047   ;------------------------------------------------------------
01D8           1048   ;x                         Allocated to registers r2 
01D8           1049   ;------------------------------------------------------------
01D8           1050   ;        sourcecode.c:257: void WriteCommand (unsigned char x)
01D8           1051   ;        -----------------------------------------
01D8           1052   ;         function WriteCommand
01D8           1053   ;        -----------------------------------------
01D8           1054   _WriteCommand:
01D8 AA82      1055            mov     r2,dpl
01DA           1056   ;        sourcecode.c:259: LCD_RS=0;
01DA C297      1057            clr     _P1_7
01DC           1058   ;        sourcecode.c:260: LCD_byte(x);
01DC 8A82      1059            mov     dpl,r2
01DE 120000    1060            lcall   _LCD_byte
01E1           1061   ;        sourcecode.c:261: waitms(5);
01E1 900005    1062            mov     dptr,#0x0005
01E4 020000    1063            ljmp    _waitms
01E7           1064   ;------------------------------------------------------------
01E7           1065   ;Allocation info for local variables in function 'LCD_4BIT'
01E7           1066   ;------------------------------------------------------------
01E7           1067   ;------------------------------------------------------------
01E7           1068   ;        sourcecode.c:264: void LCD_4BIT (void)
01E7           1069   ;        -----------------------------------------
01E7           1070   ;         function LCD_4BIT
01E7           1071   ;        -----------------------------------------
01E7           1072   _LCD_4BIT:
01E7           1073   ;        sourcecode.c:266: LCD_E=0; // Resting state of LCD's enable is zero
01E7 C2A0      1074            clr     _P2_0
01E9           1075   ;        sourcecode.c:268: waitms(20);
01E9 900014    1076            mov     dptr,#0x0014
01EC 120000    1077            lcall   _waitms
01EF           1078   ;        sourcecode.c:270: WriteCommand(0x33);
01EF 758233    1079            mov     dpl,#0x33
01F2 120000    1080            lcall   _WriteCommand
01F5           1081   ;        sourcecode.c:271: WriteCommand(0x33);
01F5 758233    1082            mov     dpl,#0x33
01F8 120000    1083            lcall   _WriteCommand
01FB           1084   ;        sourcecode.c:272: WriteCommand(0x32); // Change to 4-bit mode
01FB 758232    1085            mov     dpl,#0x32
01FE 120000    1086            lcall   _WriteCommand
0201           1087   ;        sourcecode.c:275: WriteCommand(0x28);
0201 758228    1088            mov     dpl,#0x28
0204 120000    1089            lcall   _WriteCommand
0207           1090   ;        sourcecode.c:276: WriteCommand(0x0c);
0207 75820C    1091            mov     dpl,#0x0C
020A 120000    1092            lcall   _WriteCommand
020D           1093   ;        sourcecode.c:277: WriteCommand(0x01); // Clear screen command (takes some time)
020D 758201    1094            mov     dpl,#0x01
0210 120000    1095            lcall   _WriteCommand
0213           1096   ;        sourcecode.c:278: waitms(20); // Wait for clear screen command to finsih.
0213 900014    1097            mov     dptr,#0x0014
0216 020000    1098            ljmp    _waitms
0219           1099   ;------------------------------------------------------------
0219           1100   ;Allocation info for local variables in function 'LCDprint'
0219           1101   ;------------------------------------------------------------
0219           1102   ;line                      Allocated with name '_LCDprint_PARM_2'
0219           1103   ;string                    Allocated to registers r2 r3 r4 
0219           1104   ;j                         Allocated to registers r5 r6 
0219           1105   ;------------------------------------------------------------
0219           1106   ;        sourcecode.c:281: void LCDprint(char * string, unsigned char line, bit clear)
0219           1107   ;        -----------------------------------------
0219           1108   ;         function LCDprint
0219           1109   ;        -----------------------------------------
0219           1110   _LCDprint:
0219 AA82      1111            mov     r2,dpl
021B AB83      1112            mov     r3,dph
021D ACF0      1113            mov     r4,b
021F           1114   ;        sourcecode.c:285: WriteCommand(line==2?0xc0:0x80);
021F 7402      1115            mov     a,#0x02
0221 B518A8    1116            cjne    a,_LCDprint_PARM_2,L015013?
0224 7DC0      1117            mov     r5,#0xC0
0226 8000      1118            sjmp    L015014?
0228           1119   L015013?:
0228 7D80      1120            mov     r5,#0x80
022A           1121   L015014?:
022A 8D82      1122            mov     dpl,r5
022C C002      1123            push    ar2
022E C003      1124            push    ar3
0230 C004      1125            push    ar4
0232 120000    1126            lcall   _WriteCommand
0235           1127   ;        sourcecode.c:286: waitms(5);
0235 900005    1128            mov     dptr,#0x0005
0238 120000    1129            lcall   _waitms
023B D004      1130            pop     ar4
023D D003      1131            pop     ar3
023F D002      1132            pop     ar2
0241           1133   ;        sourcecode.c:287: for(j=0; string[j]!=0; j++)   WriteData(string[j]);// Write the message
0241 7D00      1134            mov     r5,#0x00
0243 7E00      1135            mov     r6,#0x00
0245           1136   L015003?:
0245 ED        1137            mov     a,r5
0246 2A        1138            add     a,r2
0247 FF        1139            mov     r7,a
0248 EE        1140            mov     a,r6
0249 3B        1141            addc    a,r3
024A F8        1142            mov     r0,a
024B 8C01      1143            mov     ar1,r4
024D 8F82      1144            mov     dpl,r7
024F 8883      1145            mov     dph,r0
0251 89F0      1146            mov     b,r1
0253 120000    1147            lcall   __gptrget
0256 FF        1148            mov     r7,a
0257 6000      1149            jz      L015006?
0259 8F82      1150            mov     dpl,r7
025B C002      1151            push    ar2
025D C003      1152            push    ar3
025F C004      1153            push    ar4
0261 C005      1154            push    ar5
0263 C006      1155            push    ar6
0265 120000    1156            lcall   _WriteData
0268 D006      1157            pop     ar6
026A D005      1158            pop     ar5
026C D004      1159            pop     ar4
026E D003      1160            pop     ar3
0270 D002      1161            pop     ar2
0272 0D        1162            inc     r5
0273 BD0028    1163            cjne    r5,#0x00,L015003?
0276 0E        1164            inc     r6
0277 8000      1165            sjmp    L015003?
0279           1166   L015006?:
0279           1167   ;        sourcecode.c:288: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0279 3028E8    1168            jnb     _LCDprint_PARM_3,L015011?
027C 8D02      1169            mov     ar2,r5
027E 8E03      1170            mov     ar3,r6
0280           1171   L015007?:
0280 C3        1172            clr     c
0281 EA        1173            mov     a,r2
0282 9410      1174            subb    a,#0x10
0284 EB        1175            mov     a,r3
0285 6480      1176            xrl     a,#0x80
0287 9480      1177            subb    a,#0x80
0289 5000      1178            jnc     L015011?
028B 758220    1179            mov     dpl,#0x20
028E C002      1180            push    ar2
0290 C003      1181            push    ar3
0292 120000    1182            lcall   _WriteData
0295 D003      1183            pop     ar3
0297 D002      1184            pop     ar2
0299 0A        1185            inc     r2
029A BA0028    1186            cjne    r2,#0x00,L015007?
029D 0B        1187            inc     r3
029E 8000      1188            sjmp    L015007?
02A0           1189   L015011?:
02A0 22        1190            ret
02A1           1191   ;------------------------------------------------------------
02A1           1192   ;Allocation info for local variables in function 'LCDprint2'
02A1           1193   ;------------------------------------------------------------
02A1           1194   ;line                      Allocated with name '_LCDprint2_PARM_2'
02A1           1195   ;col                       Allocated with name '_LCDprint2_PARM_3'
02A1           1196   ;string                    Allocated to registers r2 r3 r4 
02A1           1197   ;j                         Allocated to registers r5 r6 
02A1           1198   ;------------------------------------------------------------
02A1           1199   ;        sourcecode.c:291: void LCDprint2(char * string, unsigned char line, unsigned char col)
02A1           1200   ;        -----------------------------------------
02A1           1201   ;         function LCDprint2
02A1           1202   ;        -----------------------------------------
02A1           1203   _LCDprint2:
02A1 AA82      1204            mov     r2,dpl
02A3 AB83      1205            mov     r3,dph
02A5 ACF0      1206            mov     r4,b
02A7           1207   ;        sourcecode.c:295: WriteCommand(line==2?0xc0|col:0x80|col); // Move cursor to line and column
02A7 7402      1208            mov     a,#0x02
02A9 B5C868    1209            cjne    a,_LCDprint2_PARM_2,L016007?
02AC 74C0      1210            mov     a,#0xC0
02AE 4578      1211            orl     a,_LCDprint2_PARM_3
02B0 FD        1212            mov     r5,a
02B1 8000      1213            sjmp    L016008?
02B3           1214   L016007?:
02B3 7480      1215            mov     a,#0x80
02B5 4578      1216            orl     a,_LCDprint2_PARM_3
02B7 FD        1217            mov     r5,a
02B8           1218   L016008?:
02B8 8D82      1219            mov     dpl,r5
02BA C002      1220            push    ar2
02BC C003      1221            push    ar3
02BE C004      1222            push    ar4
02C0 120000    1223            lcall   _WriteCommand
02C3 D004      1224            pop     ar4
02C5 D003      1225            pop     ar3
02C7 D002      1226            pop     ar2
02C9           1227   ;        sourcecode.c:296: for(j=0; string[j]!=0; j++){ 
02C9 7D00      1228            mov     r5,#0x00
02CB 7E00      1229            mov     r6,#0x00
02CD           1230   L016001?:
02CD ED        1231            mov     a,r5
02CE 2A        1232            add     a,r2
02CF FF        1233            mov     r7,a
02D0 EE        1234            mov     a,r6
02D1 3B        1235            addc    a,r3
02D2 F8        1236            mov     r0,a
02D3 8C01      1237            mov     ar1,r4
02D5 8F82      1238            mov     dpl,r7
02D7 8883      1239            mov     dph,r0
02D9 89F0      1240            mov     b,r1
02DB 120000    1241            lcall   __gptrget
02DE FF        1242            mov     r7,a
02DF 6000      1243            jz      L016005?
02E1           1244   ;        sourcecode.c:297: WriteData(string[j]); // Write the message
02E1 8F82      1245            mov     dpl,r7
02E3 C002      1246            push    ar2
02E5 C003      1247            push    ar3
02E7 C004      1248            push    ar4
02E9 C005      1249            push    ar5
02EB C006      1250            push    ar6
02ED 120000    1251            lcall   _WriteData
02F0 D006      1252            pop     ar6
02F2 D005      1253            pop     ar5
02F4 D004      1254            pop     ar4
02F6 D003      1255            pop     ar3
02F8 D002      1256            pop     ar2
02FA           1257   ;        sourcecode.c:296: for(j=0; string[j]!=0; j++){ 
02FA 0D        1258            inc     r5
02FB BD00E8    1259            cjne    r5,#0x00,L016001?
02FE 0E        1260            inc     r6
02FF 8000      1261            sjmp    L016001?
0301           1262   L016005?:
0301 22        1263            ret
0302           1264   ;------------------------------------------------------------
0302           1265   ;Allocation info for local variables in function 'main'
0302           1266   ;------------------------------------------------------------
0302           1267   ;period                    Allocated with name '_main_period_1_76'
0302           1268   ;Phase_Shift               Allocated to registers r2 r3 r4 r5 
0302           1269   ;time_difference           Allocated to registers r2 r3 r4 r5 
0302           1270   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0302           1271   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0302           1272   ;------------------------------------------------------------
0302           1273   ;        sourcecode.c:305: void main (void)
0302           1274   ;        -----------------------------------------
0302           1275   ;         function main
0302           1276   ;        -----------------------------------------
0302           1277   _main:
0302           1278   ;        sourcecode.c:311: TIMER0_Init();
0302 120000    1279            lcall   _TIMER0_Init
0305           1280   ;        sourcecode.c:314: LCD_4BIT();
0305 120000    1281            lcall   _LCD_4BIT
0308           1282   ;        sourcecode.c:316: waitms(500); // Give PuTTy a chance to start before sending
0308 9001F4    1283            mov     dptr,#0x01F4
030B 120000    1284            lcall   _waitms
030E           1285   ;        sourcecode.c:317: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
030E 7468      1286            mov     a,#__str_0
0310 C0E0      1287            push    acc
0312 74D7      1288            mov     a,#(__str_0 >> 8)
0314 C0E0      1289            push    acc
0316 7480      1290            mov     a,#0x80
0318 C0E0      1291            push    acc
031A 120000    1292            lcall   _printf
031D 1581      1293            dec     sp
031F 1581      1294            dec     sp
0321 1581      1295            dec     sp
0323           1296   ;        sourcecode.c:322: __FILE__, __DATE__, __TIME__);
0323           1297   ;        sourcecode.c:321: "Compiled: %s, %s\n\n",
0323 74E8      1298            mov     a,#__str_4
0325 C0E0      1299            push    acc
0327 74D7      1300            mov     a,#(__str_4 >> 8)
0329 C0E0      1301            push    acc
032B 7480      1302            mov     a,#0x80
032D C0E0      1303            push    acc
032F 7428      1304            mov     a,#__str_3
0331 C0E0      1305            push    acc
0333 74D8      1306            mov     a,#(__str_3 >> 8)
0335 C0E0      1307            push    acc
0337 7480      1308            mov     a,#0x80
0339 C0E0      1309            push    acc
033B 7468      1310            mov     a,#__str_2
033D C0E0      1311            push    acc
033F 74D8      1312            mov     a,#(__str_2 >> 8)
0341 C0E0      1313            push    acc
0343 7480      1314            mov     a,#0x80
0345 C0E0      1315            push    acc
0347 74A8      1316            mov     a,#__str_1
0349 C0E0      1317            push    acc
034B 74D8      1318            mov     a,#(__str_1 >> 8)
034D C0E0      1319            push    acc
034F 7480      1320            mov     a,#0x80
0351 C0E0      1321            push    acc
0353 120000    1322            lcall   _printf
0356 E581      1323            mov     a,sp
0358 24F4      1324            add     a,#0xf4
035A F581      1325            mov     sp,a
035C           1326   ;        sourcecode.c:327: LCDprint2("F:XXHz   PH:_XXX", 1, 0); //string, row, column
035C 75C801    1327            mov     _LCDprint2_PARM_2,#0x01
035F 757800    1328            mov     _LCDprint2_PARM_3,#0x00
0362 90D8E8    1329            mov     dptr,#__str_5
0365 75F080    1330            mov     b,#0x80
0368 120000    1331            lcall   _LCDprint2
036B           1332   ;        sourcecode.c:328: LCDprint2("VR:X.XX  VT:X.XX", 2, 0); //string, row, column
036B 75C802    1333            mov     _LCDprint2_PARM_2,#0x02
036E 757800    1334            mov     _LCDprint2_PARM_3,#0x00
0371 90D928    1335            mov     dptr,#__str_6
0374 75F080    1336            mov     b,#0x80
0377 120000    1337            lcall   _LCDprint2
037A           1338   ;        sourcecode.c:330: InitPinADC(2, 1); // Configure P2.1 as analog input
037A 75C801    1339            mov     _InitPinADC_PARM_2,#0x01
037D 758202    1340            mov     dpl,#0x02
0380 120000    1341            lcall   _InitPinADC
0383           1342   ;        sourcecode.c:331: InitPinADC(2, 2); // Configure P2.2 as analog input
0383 75C802    1343            mov     _InitPinADC_PARM_2,#0x02
0386 758202    1344            mov     dpl,#0x02
0389 120000    1345            lcall   _InitPinADC
038C           1346   ;        sourcecode.c:333: InitADC();
038C 120000    1347            lcall   _InitADC
038F           1348   ;        sourcecode.c:335: while(1)
038F           1349   L017046?:
038F           1350   ;        sourcecode.c:338: TL0 = 0; 
038F 758A00    1351            mov     _TL0,#0x00
0392           1352   ;        sourcecode.c:339: TH0 = 0;
0392 758C00    1353            mov     _TH0,#0x00
0395           1354   ;        sourcecode.c:340: TF0 = 0;
0395 C28D      1355            clr     _TF0
0397           1356   ;        sourcecode.c:341: overflow_count = 0;
0397 75E800    1357            mov     _overflow_count,#0x00
039A           1358   ;        sourcecode.c:343: while(Volts_at_Pin(QFP32_MUX_P2_2) > 0); // Wait for the signal to be zero
039A           1359   L017001?:
039A 75820F    1360            mov     dpl,#0x0F
039D 120000    1361            lcall   _Volts_at_Pin
03A0 AA82      1362            mov     r2,dpl
03A2 AB83      1363            mov     r3,dph
03A4 ACF0      1364            mov     r4,b
03A6 FD        1365            mov     r5,a
03A7 E4        1366            clr     a
03A8 C0E0      1367            push    acc
03AA C0E0      1368            push    acc
03AC C0E0      1369            push    acc
03AE C0E0      1370            push    acc
03B0 8A82      1371            mov     dpl,r2
03B2 8B83      1372            mov     dph,r3
03B4 8CF0      1373            mov     b,r4
03B6 ED        1374            mov     a,r5
03B7 120000    1375            lcall   ___fsgt
03BA AA82      1376            mov     r2,dpl
03BC E581      1377            mov     a,sp
03BE 24FC      1378            add     a,#0xfc
03C0 F581      1379            mov     sp,a
03C2 EA        1380            mov     a,r2
03C3 7000      1381            jnz     L017001?
03C5           1382   ;        sourcecode.c:344: while(Volts_at_Pin(QFP32_MUX_P2_2) == 0); // Wait for the signal to be one
03C5           1383   L017004?:
03C5 75820F    1384            mov     dpl,#0x0F
03C8 120000    1385            lcall   _Volts_at_Pin
03CB AA82      1386            mov     r2,dpl
03CD AB83      1387            mov     r3,dph
03CF ACF0      1388            mov     r4,b
03D1 FD        1389            mov     r5,a
03D2 EA        1390            mov     a,r2
03D3 4B        1391            orl     a,r3
03D4 4C        1392            orl     a,r4
03D5 8DF0      1393            mov     b,r5
03D7 C2F7      1394            clr     b.7 ; Clear the sign bit
03D9 45F0      1395            orl     a,b
03DB 6000      1396            jz      L017004?
03DD           1397   ;        sourcecode.c:345: TR0 = 1; // Start the timer
03DD D28C      1398            setb    _TR0
03DF           1399   ;        sourcecode.c:346: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0) { // Wait for the signal to be zero
03DF           1400   L017009?:
03DF 75820F    1401            mov     dpl,#0x0F
03E2 120000    1402            lcall   _Volts_at_Pin
03E5 AA82      1403            mov     r2,dpl
03E7 AB83      1404            mov     r3,dph
03E9 ACF0      1405            mov     r4,b
03EB FD        1406            mov     r5,a
03EC E4        1407            clr     a
03ED C0E0      1408            push    acc
03EF C0E0      1409            push    acc
03F1 C0E0      1410            push    acc
03F3 C0E0      1411            push    acc
03F5 8A82      1412            mov     dpl,r2
03F7 8B83      1413            mov     dph,r3
03F9 8CF0      1414            mov     b,r4
03FB ED        1415            mov     a,r5
03FC 120000    1416            lcall   ___fsgt
03FF AA82      1417            mov     r2,dpl
0401 E581      1418            mov     a,sp
0403 24FC      1419            add     a,#0xfc
0405 F581      1420            mov     sp,a
0407 EA        1421            mov     a,r2
0408 6000      1422            jz      L017014?
040A           1423   ;        sourcecode.c:347: if (TF0 == 1) { // Did the 16-bit timer overflow?
040A           1424   ;        sourcecode.c:348: TF0 = 0;
040A 108DE8    1425            jbc     _TF0,L017078?
040D 8000      1426            sjmp    L017009?
040F           1427   L017078?:
040F           1428   ;        sourcecode.c:349: overflow_count++;
040F 05E8      1429            inc     _overflow_count
0411           1430   ;        sourcecode.c:352: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0) { // Wait for the signal to be one
0411 8000      1431            sjmp    L017009?
0413           1432   L017014?:
0413 75820F    1433            mov     dpl,#0x0F
0416 120000    1434            lcall   _Volts_at_Pin
0419 AA82      1435            mov     r2,dpl
041B AB83      1436            mov     r3,dph
041D ACF0      1437            mov     r4,b
041F FD        1438            mov     r5,a
0420 E4        1439            clr     a
0421 C0E0      1440            push    acc
0423 C0E0      1441            push    acc
0425 C0E0      1442            push    acc
0427 C0E0      1443            push    acc
0429 8A82      1444            mov     dpl,r2
042B 8B83      1445            mov     dph,r3
042D 8CF0      1446            mov     b,r4
042F ED        1447            mov     a,r5
0430 120000    1448            lcall   ___fsgt
0433 AA82      1449            mov     r2,dpl
0435 E581      1450            mov     a,sp
0437 24FC      1451            add     a,#0xfc
0439 F581      1452            mov     sp,a
043B EA        1453            mov     a,r2
043C 6000      1454            jz      L017016?
043E           1455   ;        sourcecode.c:353: if (TF0 == 1) { // Did the 16-bit timer overflow?
043E           1456   ;        sourcecode.c:354: TF0 = 0;
043E 108D68    1457            jbc     _TF0,L017080?
0441 8000      1458            sjmp    L017014?
0443           1459   L017080?:
0443           1460   ;        sourcecode.c:355: overflow_count++;
0443 05E8      1461            inc     _overflow_count
0445 8000      1462            sjmp    L017014?
0447           1463   L017016?:
0447           1464   ;        sourcecode.c:358: TR0 = 0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0447 C28C      1465            clr     _TR0
0449           1466   ;        sourcecode.c:359: period = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*(2);
0449 85E882    1467            mov     dpl,_overflow_count
044C 120000    1468            lcall   ___uchar2fs
044F AA82      1469            mov     r2,dpl
0451 AB83      1470            mov     r3,dph
0453 ACF0      1471            mov     r4,b
0455 FD        1472            mov     r5,a
0456 C002      1473            push    ar2
0458 C003      1474            push    ar3
045A C004      1475            push    ar4
045C C005      1476            push    ar5
045E 900000    1477            mov     dptr,#0x0000
0461 75F080    1478            mov     b,#0x80
0464 7447      1479            mov     a,#0x47
0466 120000    1480            lcall   ___fsmul
0469 AA82      1481            mov     r2,dpl
046B AB83      1482            mov     r3,dph
046D ACF0      1483            mov     r4,b
046F FD        1484            mov     r5,a
0470 E581      1485            mov     a,sp
0472 24FC      1486            add     a,#0xfc
0474 F581      1487            mov     sp,a
0476 858C82    1488            mov     dpl,_TH0
0479 C002      1489            push    ar2
047B C003      1490            push    ar3
047D C004      1491            push    ar4
047F C005      1492            push    ar5
0481 120000    1493            lcall   ___uchar2fs
0484 AE82      1494            mov     r6,dpl
0486 AF83      1495            mov     r7,dph
0488 A8F0      1496            mov     r0,b
048A F9        1497            mov     r1,a
048B C006      1498            push    ar6
048D C007      1499            push    ar7
048F C000      1500            push    ar0
0491 C001      1501            push    ar1
0493 900000    1502            mov     dptr,#0x0000
0496 75F080    1503            mov     b,#0x80
0499 7443      1504            mov     a,#0x43
049B 120000    1505            lcall   ___fsmul
049E AE82      1506            mov     r6,dpl
04A0 AF83      1507            mov     r7,dph
04A2 A8F0      1508            mov     r0,b
04A4 F9        1509            mov     r1,a
04A5 E581      1510            mov     a,sp
04A7 24FC      1511            add     a,#0xfc
04A9 F581      1512            mov     sp,a
04AB D005      1513            pop     ar5
04AD D004      1514            pop     ar4
04AF D003      1515            pop     ar3
04B1 D002      1516            pop     ar2
04B3 C006      1517            push    ar6
04B5 C007      1518            push    ar7
04B7 C000      1519            push    ar0
04B9 C001      1520            push    ar1
04BB 8A82      1521            mov     dpl,r2
04BD 8B83      1522            mov     dph,r3
04BF 8CF0      1523            mov     b,r4
04C1 ED        1524            mov     a,r5
04C2 120000    1525            lcall   ___fsadd
04C5 AA82      1526            mov     r2,dpl
04C7 AB83      1527            mov     r3,dph
04C9 ACF0      1528            mov     r4,b
04CB FD        1529            mov     r5,a
04CC E581      1530            mov     a,sp
04CE 24FC      1531            add     a,#0xfc
04D0 F581      1532            mov     sp,a
04D2 AE8A      1533            mov     r6,_TL0
04D4 7F00      1534            mov     r7,#0x00
04D6 8E82      1535            mov     dpl,r6
04D8 8F83      1536            mov     dph,r7
04DA C002      1537            push    ar2
04DC C003      1538            push    ar3
04DE C004      1539            push    ar4
04E0 C005      1540            push    ar5
04E2 120000    1541            lcall   ___sint2fs
04E5 AE82      1542            mov     r6,dpl
04E7 AF83      1543            mov     r7,dph
04E9 A8F0      1544            mov     r0,b
04EB F9        1545            mov     r1,a
04EC D005      1546            pop     ar5
04EE D004      1547            pop     ar4
04F0 D003      1548            pop     ar3
04F2 D002      1549            pop     ar2
04F4 C006      1550            push    ar6
04F6 C007      1551            push    ar7
04F8 C000      1552            push    ar0
04FA C001      1553            push    ar1
04FC 8A82      1554            mov     dpl,r2
04FE 8B83      1555            mov     dph,r3
0500 8CF0      1556            mov     b,r4
0502 ED        1557            mov     a,r5
0503 120000    1558            lcall   ___fsadd
0506 AA82      1559            mov     r2,dpl
0508 AB83      1560            mov     r3,dph
050A ACF0      1561            mov     r4,b
050C FD        1562            mov     r5,a
050D E581      1563            mov     a,sp
050F 24FC      1564            add     a,#0xfc
0511 F581      1565            mov     sp,a
0513 C002      1566            push    ar2
0515 C003      1567            push    ar3
0517 C004      1568            push    ar4
0519 C005      1569            push    ar5
051B 90F4FC    1570            mov     dptr,#0xF4FC
051E 75F0B2    1571            mov     b,#0xB2
0521 7434      1572            mov     a,#0x34
0523 120000    1573            lcall   ___fsmul
0526 8582E0    1574            mov     _main_period_1_76,dpl
0529 8583E1    1575            mov     (_main_period_1_76 + 1),dph
052C 85F0E2    1576            mov     (_main_period_1_76 + 2),b
052F F5E3      1577            mov     (_main_period_1_76 + 3),a
0531 E581      1578            mov     a,sp
0533 24FC      1579            add     a,#0xfc
0535 F581      1580            mov     sp,a
0537           1581   ;        sourcecode.c:362: while(Volts_at_Pin(QFP32_MUX_P2_2) > 0);
0537           1582   L017017?:
0537 75820F    1583            mov     dpl,#0x0F
053A 120000    1584            lcall   _Volts_at_Pin
053D AE82      1585            mov     r6,dpl
053F AF83      1586            mov     r7,dph
0541 A8F0      1587            mov     r0,b
0543 F9        1588            mov     r1,a
0544 E4        1589            clr     a
0545 C0E0      1590            push    acc
0547 C0E0      1591            push    acc
0549 C0E0      1592            push    acc
054B C0E0      1593            push    acc
054D 8E82      1594            mov     dpl,r6
054F 8F83      1595            mov     dph,r7
0551 88F0      1596            mov     b,r0
0553 E9        1597            mov     a,r1
0554 120000    1598            lcall   ___fsgt
0557 AE82      1599            mov     r6,dpl
0559 E581      1600            mov     a,sp
055B 24FC      1601            add     a,#0xfc
055D F581      1602            mov     sp,a
055F EE        1603            mov     a,r6
0560 7000      1604            jnz     L017017?
0562           1605   ;        sourcecode.c:363: while(Volts_at_Pin(QFP32_MUX_P2_2) == 0);
0562           1606   L017020?:
0562 75820F    1607            mov     dpl,#0x0F
0565 120000    1608            lcall   _Volts_at_Pin
0568 AE82      1609            mov     r6,dpl
056A AF83      1610            mov     r7,dph
056C A8F0      1611            mov     r0,b
056E F9        1612            mov     r1,a
056F EE        1613            mov     a,r6
0570 4F        1614            orl     a,r7
0571 48        1615            orl     a,r0
0572 89F0      1616            mov     b,r1
0574 C2F7      1617            clr     b.7 ; Clear the sign bit
0576 45F0      1618            orl     a,b
0578 6000      1619            jz      L017020?
057A           1620   ;        sourcecode.c:364: waitms(period*1000/4);
057A C0E0      1621            push    _main_period_1_76
057C C0E1      1622            push    (_main_period_1_76 + 1)
057E C0E2      1623            push    (_main_period_1_76 + 2)
0580 C0E3      1624            push    (_main_period_1_76 + 3)
0582 900000    1625            mov     dptr,#0x0000
0585 75F07A    1626            mov     b,#0x7A
0588 7444      1627            mov     a,#0x44
058A 120000    1628            lcall   ___fsmul
058D AE82      1629            mov     r6,dpl
058F AF83      1630            mov     r7,dph
0591 A8F0      1631            mov     r0,b
0593 F9        1632            mov     r1,a
0594 E581      1633            mov     a,sp
0596 24FC      1634            add     a,#0xfc
0598 F581      1635            mov     sp,a
059A C006      1636            push    ar6
059C C007      1637            push    ar7
059E C000      1638            push    ar0
05A0 C001      1639            push    ar1
05A2 E4        1640            clr     a
05A3 C0E0      1641            push    acc
05A5 C0E0      1642            push    acc
05A7 7480      1643            mov     a,#0x80
05A9 C0E0      1644            push    acc
05AB 7440      1645            mov     a,#0x40
05AD C0E0      1646            push    acc
05AF 8E82      1647            mov     dpl,r6
05B1 8F83      1648            mov     dph,r7
05B3 88F0      1649            mov     b,r0
05B5 E9        1650            mov     a,r1
05B6 120000    1651            lcall   ___fsdiv
05B9 AA82      1652            mov     r2,dpl
05BB AB83      1653            mov     r3,dph
05BD ACF0      1654            mov     r4,b
05BF FD        1655            mov     r5,a
05C0 E581      1656            mov     a,sp
05C2 24FC      1657            add     a,#0xfc
05C4 F581      1658            mov     sp,a
05C6 8A82      1659            mov     dpl,r2
05C8 8B83      1660            mov     dph,r3
05CA 8CF0      1661            mov     b,r4
05CC ED        1662            mov     a,r5
05CD 120000    1663            lcall   ___fs2uint
05D0 858220    1664            mov     _main_sloc0_1_0,dpl
05D3 858321    1665            mov  (_main_sloc0_1_0 + 1),dph
05D6 120000    1666            lcall   _waitms
05D9           1667   ;        sourcecode.c:365: v1_rms = Volts_at_Pin(QFP32_MUX_P2_2) / 1.41321356237;
05D9 75820F    1668            mov     dpl,#0x0F
05DC 120000    1669            lcall   _Volts_at_Pin
05DF AC82      1670            mov     r4,dpl
05E1 AD83      1671            mov     r5,dph
05E3 AAF0      1672            mov     r2,b
05E5 FB        1673            mov     r3,a
05E6 742F      1674            mov     a,#0x2F
05E8 C0E0      1675            push    acc
05EA 74E4      1676            mov     a,#0xE4
05EC C0E0      1677            push    acc
05EE 74B4      1678            mov     a,#0xB4
05F0 C0E0      1679            push    acc
05F2 743F      1680            mov     a,#0x3F
05F4 C0E0      1681            push    acc
05F6 8C82      1682            mov     dpl,r4
05F8 8D83      1683            mov     dph,r5
05FA 8AF0      1684            mov     b,r2
05FC EB        1685            mov     a,r3
05FD 120000    1686            lcall   ___fsdiv
0600 858218    1687            mov     _v1_rms,dpl
0603 858319    1688            mov     (_v1_rms + 1),dph
0606 85F01A    1689            mov     (_v1_rms + 2),b
0609 F51B      1690            mov     (_v1_rms + 3),a
060B E581      1691            mov     a,sp
060D 24FC      1692            add     a,#0xfc
060F F581      1693            mov     sp,a
0611 D001      1694            pop     ar1
0613 D000      1695            pop     ar0
0615 D007      1696            pop     ar7
0617 D006      1697            pop     ar6
0619           1698   ;        sourcecode.c:367: while(Volts_at_Pin(QFP32_MUX_P2_1) > 0); //wait for zero cross of other signal
0619           1699   L017023?:
0619 75820E    1700            mov     dpl,#0x0E
061C C006      1701            push    ar6
061E C007      1702            push    ar7
0620 C000      1703            push    ar0
0622 C001      1704            push    ar1
0624 120000    1705            lcall   _Volts_at_Pin
0627 AA82      1706            mov     r2,dpl
0629 AB83      1707            mov     r3,dph
062B ACF0      1708            mov     r4,b
062D FD        1709            mov     r5,a
062E E4        1710            clr     a
062F C0E0      1711            push    acc
0631 C0E0      1712            push    acc
0633 C0E0      1713            push    acc
0635 C0E0      1714            push    acc
0637 8A82      1715            mov     dpl,r2
0639 8B83      1716            mov     dph,r3
063B 8CF0      1717            mov     b,r4
063D ED        1718            mov     a,r5
063E 120000    1719            lcall   ___fsgt
0641 AA82      1720            mov     r2,dpl
0643 E581      1721            mov     a,sp
0645 24FC      1722            add     a,#0xfc
0647 F581      1723            mov     sp,a
0649 D001      1724            pop     ar1
064B D000      1725            pop     ar0
064D D007      1726            pop     ar7
064F D006      1727            pop     ar6
0651 EA        1728            mov     a,r2
0652 7000      1729            jnz     L017023?
0654           1730   ;        sourcecode.c:368: while(Volts_at_Pin(QFP32_MUX_P2_1) == 0);
0654           1731   L017026?:
0654 75820E    1732            mov     dpl,#0x0E
0657 C006      1733            push    ar6
0659 C007      1734            push    ar7
065B C000      1735            push    ar0
065D C001      1736            push    ar1
065F 120000    1737            lcall   _Volts_at_Pin
0662 AA82      1738            mov     r2,dpl
0664 AB83      1739            mov     r3,dph
0666 ACF0      1740            mov     r4,b
0668 FD        1741            mov     r5,a
0669 D001      1742            pop     ar1
066B D000      1743            pop     ar0
066D D007      1744            pop     ar7
066F D006      1745            pop     ar6
0671 EA        1746            mov     a,r2
0672 4B        1747            orl     a,r3
0673 4C        1748            orl     a,r4
0674 8DF0      1749            mov     b,r5
0676 C2F7      1750            clr     b.7 ; Clear the sign bit
0678 45F0      1751            orl     a,b
067A 6000      1752            jz      L017026?
067C           1753   ;        sourcecode.c:369: waitms(period*1000/4);
067C 852082    1754            mov     dpl,_main_sloc0_1_0
067F 852183    1755            mov     dph,(_main_sloc0_1_0 + 1)
0682 C006      1756            push    ar6
0684 C007      1757            push    ar7
0686 C000      1758            push    ar0
0688 C001      1759            push    ar1
068A 120000    1760            lcall   _waitms
068D           1761   ;        sourcecode.c:370: v2_rms = Volts_at_Pin(QFP32_MUX_P2_1) / 1.41321356237;
068D 75820E    1762            mov     dpl,#0x0E
0690 120000    1763            lcall   _Volts_at_Pin
0693 AA82      1764            mov     r2,dpl
0695 AB83      1765            mov     r3,dph
0697 ACF0      1766            mov     r4,b
0699 FD        1767            mov     r5,a
069A 742F      1768            mov     a,#0x2F
069C C0E0      1769            push    acc
069E 74E4      1770            mov     a,#0xE4
06A0 C0E0      1771            push    acc
06A2 74B4      1772            mov     a,#0xB4
06A4 C0E0      1773            push    acc
06A6 743F      1774            mov     a,#0x3F
06A8 C0E0      1775            push    acc
06AA 8A82      1776            mov     dpl,r2
06AC 8B83      1777            mov     dph,r3
06AE 8CF0      1778            mov     b,r4
06B0 ED        1779            mov     a,r5
06B1 120000    1780            lcall   ___fsdiv
06B4 8582D8    1781            mov     _v2_rms,dpl
06B7 8583D9    1782            mov     (_v2_rms + 1),dph
06BA 85F0DA    1783            mov     (_v2_rms + 2),b
06BD F5DB      1784            mov     (_v2_rms + 3),a
06BF E581      1785            mov     a,sp
06C1 24FC      1786            add     a,#0xfc
06C3 F581      1787            mov     sp,a
06C5 D001      1788            pop     ar1
06C7 D000      1789            pop     ar0
06C9 D007      1790            pop     ar7
06CB D006      1791            pop     ar6
06CD           1792   ;        sourcecode.c:374: TR0=0; // Stop timer 0
06CD C28C      1793            clr     _TR0
06CF           1794   ;        sourcecode.c:375: overflow_count = 0;
06CF 75E800    1795            mov     _overflow_count,#0x00
06D2           1796   ;        sourcecode.c:376: TH0=0; TL0=0; TF0 = 0;                // Reset the timer
06D2 758C00    1797            mov     _TH0,#0x00
06D5 758A00    1798            mov     _TL0,#0x00
06D8 C28D      1799            clr     _TF0
06DA           1800   ;        sourcecode.c:378: while (Volts_at_Pin(QFP32_MUX_P2_2) != 0);    
06DA           1801   L017029?:
06DA 75820F    1802            mov     dpl,#0x0F
06DD C006      1803            push    ar6
06DF C007      1804            push    ar7
06E1 C000      1805            push    ar0
06E3 C001      1806            push    ar1
06E5 120000    1807            lcall   _Volts_at_Pin
06E8 AA82      1808            mov     r2,dpl
06EA AB83      1809            mov     r3,dph
06EC ACF0      1810            mov     r4,b
06EE FD        1811            mov     r5,a
06EF D001      1812            pop     ar1
06F1 D000      1813            pop     ar0
06F3 D007      1814            pop     ar7
06F5 D006      1815            pop     ar6
06F7 EA        1816            mov     a,r2
06F8 4B        1817            orl     a,r3
06F9 4C        1818            orl     a,r4
06FA 8DF0      1819            mov     b,r5
06FC C2F7      1820            clr     b.7 ; Clear the sign bit
06FE 45F0      1821            orl     a,b
0700 7000      1822            jnz     L017029?
0702           1823   ;        sourcecode.c:379: while (Volts_at_Pin(QFP32_MUX_P2_2) == 0);                    // Wait for reference signal to be zero
0702           1824   L017032?:
0702 75820F    1825            mov     dpl,#0x0F
0705 C006      1826            push    ar6
0707 C007      1827            push    ar7
0709 C000      1828            push    ar0
070B C001      1829            push    ar1
070D 120000    1830            lcall   _Volts_at_Pin
0710 AA82      1831            mov     r2,dpl
0712 AB83      1832            mov     r3,dph
0714 ACF0      1833            mov     r4,b
0716 FD        1834            mov     r5,a
0717 D001      1835            pop     ar1
0719 D000      1836            pop     ar0
071B D007      1837            pop     ar7
071D D006      1838            pop     ar6
071F EA        1839            mov     a,r2
0720 4B        1840            orl     a,r3
0721 4C        1841            orl     a,r4
0722 8DF0      1842            mov     b,r5
0724 C2F7      1843            clr     b.7 ; Clear the sign bit
0726 45F0      1844            orl     a,b
0728 6000      1845            jz      L017032?
072A           1846   ;        sourcecode.c:380: TR0=1; // start timer
072A D28C      1847            setb    _TR0
072C           1848   ;        sourcecode.c:381: while (Volts_at_Pin(QFP32_MUX_P2_1) != 0) {
072C           1849   L017037?:
072C 75820E    1850            mov     dpl,#0x0E
072F C006      1851            push    ar6
0731 C007      1852            push    ar7
0733 C000      1853            push    ar0
0735 C001      1854            push    ar1
0737 120000    1855            lcall   _Volts_at_Pin
073A AA82      1856            mov     r2,dpl
073C AB83      1857            mov     r3,dph
073E ACF0      1858            mov     r4,b
0740 FD        1859            mov     r5,a
0741 D001      1860            pop     ar1
0743 D000      1861            pop     ar0
0745 D007      1862            pop     ar7
0747 D006      1863            pop     ar6
0749 EA        1864            mov     a,r2
074A 4B        1865            orl     a,r3
074B 4C        1866            orl     a,r4
074C 8DF0      1867            mov     b,r5
074E C2F7      1868            clr     b.7 ; Clear the sign bit
0750 45F0      1869            orl     a,b
0752 6000      1870            jz      L017042?
0754           1871   ;        sourcecode.c:382: if (TF0 == 1) { // Did the 16-bit timer overflow?
0754           1872   ;        sourcecode.c:383: TF0 = 0;
0754 108DA8    1873            jbc     _TF0,L017088?
0757 8000      1874            sjmp    L017037?
0759           1875   L017088?:
0759           1876   ;        sourcecode.c:384: overflow_count++;
0759 05E8      1877            inc     _overflow_count
075B           1878   ;        sourcecode.c:387: while (Volts_at_Pin(QFP32_MUX_P2_1) == 0) { // Wait for test signal to hit zero
075B 8000      1879            sjmp    L017037?
075D           1880   L017042?:
075D 75820E    1881            mov     dpl,#0x0E
0760 C006      1882            push    ar6
0762 C007      1883            push    ar7
0764 C000      1884            push    ar0
0766 C001      1885            push    ar1
0768 120000    1886            lcall   _Volts_at_Pin
076B AA82      1887            mov     r2,dpl
076D AB83      1888            mov     r3,dph
076F ACF0      1889            mov     r4,b
0771 FD        1890            mov     r5,a
0772 D001      1891            pop     ar1
0774 D000      1892            pop     ar0
0776 D007      1893            pop     ar7
0778 D006      1894            pop     ar6
077A EA        1895            mov     a,r2
077B 4B        1896            orl     a,r3
077C 4C        1897            orl     a,r4
077D 8DF0      1898            mov     b,r5
077F C2F7      1899            clr     b.7 ; Clear the sign bit
0781 45F0      1900            orl     a,b
0783 7000      1901            jnz     L017044?
0785           1902   ;        sourcecode.c:388: if (TF0 == 1) { // Did the 16-bit timer overflow?
0785           1903   ;        sourcecode.c:389: TF0 = 0;
0785 108D28    1904            jbc     _TF0,L017090?
0788 8000      1905            sjmp    L017042?
078A           1906   L017090?:
078A           1907   ;        sourcecode.c:390: overflow_count++;
078A 05E8      1908            inc     _overflow_count
078C 8000      1909            sjmp    L017042?
078E           1910   L017044?:
078E           1911   ;        sourcecode.c:393: TR0=0; // stop timer
078E C28C      1912            clr     _TR0
0790           1913   ;        sourcecode.c:397: time_difference = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0790 85E882    1914            mov     dpl,_overflow_count
0793 C006      1915            push    ar6
0795 C007      1916            push    ar7
0797 C000      1917            push    ar0
0799 C001      1918            push    ar1
079B 120000    1919            lcall   ___uchar2fs
079E AA82      1920            mov     r2,dpl
07A0 AB83      1921            mov     r3,dph
07A2 ACF0      1922            mov     r4,b
07A4 FD        1923            mov     r5,a
07A5 C002      1924            push    ar2
07A7 C003      1925            push    ar3
07A9 C004      1926            push    ar4
07AB C005      1927            push    ar5
07AD 900000    1928            mov     dptr,#0x0000
07B0 75F080    1929            mov     b,#0x80
07B3 7447      1930            mov     a,#0x47
07B5 120000    1931            lcall   ___fsmul
07B8 858260    1932            mov     _main_sloc1_1_0,dpl
07BB 858361    1933            mov     (_main_sloc1_1_0 + 1),dph
07BE 85F062    1934            mov     (_main_sloc1_1_0 + 2),b
07C1 F563      1935            mov     (_main_sloc1_1_0 + 3),a
07C3 E581      1936            mov     a,sp
07C5 24FC      1937            add     a,#0xfc
07C7 F581      1938            mov     sp,a
07C9 858C82    1939            mov     dpl,_TH0
07CC 120000    1940            lcall   ___uchar2fs
07CF AA82      1941            mov     r2,dpl
07D1 AB83      1942            mov     r3,dph
07D3 ACF0      1943            mov     r4,b
07D5 FD        1944            mov     r5,a
07D6 C002      1945            push    ar2
07D8 C003      1946            push    ar3
07DA C004      1947            push    ar4
07DC C005      1948            push    ar5
07DE 900000    1949            mov     dptr,#0x0000
07E1 75F080    1950            mov     b,#0x80
07E4 7443      1951            mov     a,#0x43
07E6 120000    1952            lcall   ___fsmul
07E9 AA82      1953            mov     r2,dpl
07EB AB83      1954            mov     r3,dph
07ED ACF0      1955            mov     r4,b
07EF FD        1956            mov     r5,a
07F0 E581      1957            mov     a,sp
07F2 24FC      1958            add     a,#0xfc
07F4 F581      1959            mov     sp,a
07F6 C002      1960            push    ar2
07F8 C003      1961            push    ar3
07FA C004      1962            push    ar4
07FC C005      1963            push    ar5
07FE 856082    1964            mov     dpl,_main_sloc1_1_0
0801 856183    1965            mov     dph,(_main_sloc1_1_0 + 1)
0804 8562F0    1966            mov     b,(_main_sloc1_1_0 + 2)
0807 E563      1967            mov     a,(_main_sloc1_1_0 + 3)
0809 120000    1968            lcall   ___fsadd
080C 858260    1969            mov     _main_sloc1_1_0,dpl
080F 858361    1970            mov     (_main_sloc1_1_0 + 1),dph
0812 85F062    1971            mov     (_main_sloc1_1_0 + 2),b
0815 F563      1972            mov     (_main_sloc1_1_0 + 3),a
0817 E581      1973            mov     a,sp
0819 24FC      1974            add     a,#0xfc
081B F581      1975            mov     sp,a
081D AA8A      1976            mov     r2,_TL0
081F 7B00      1977            mov     r3,#0x00
0821 8A82      1978            mov     dpl,r2
0823 8B83      1979            mov     dph,r3
0825 120000    1980            lcall   ___sint2fs
0828 AA82      1981            mov     r2,dpl
082A AB83      1982            mov     r3,dph
082C ACF0      1983            mov     r4,b
082E FD        1984            mov     r5,a
082F C002      1985            push    ar2
0831 C003      1986            push    ar3
0833 C004      1987            push    ar4
0835 C005      1988            push    ar5
0837 856082    1989            mov     dpl,_main_sloc1_1_0
083A 856183    1990            mov     dph,(_main_sloc1_1_0 + 1)
083D 8562F0    1991            mov     b,(_main_sloc1_1_0 + 2)
0840 E563      1992            mov     a,(_main_sloc1_1_0 + 3)
0842 120000    1993            lcall   ___fsadd
0845 AA82      1994            mov     r2,dpl
0847 AB83      1995            mov     r3,dph
0849 ACF0      1996            mov     r4,b
084B FD        1997            mov     r5,a
084C E581      1998            mov     a,sp
084E 24FC      1999            add     a,#0xfc
0850 F581      2000            mov     sp,a
0852 C002      2001            push    ar2
0854 C003      2002            push    ar3
0856 C004      2003            push    ar4
0858 C005      2004            push    ar5
085A 90F4FC    2005            mov     dptr,#0xF4FC
085D 75F032    2006            mov     b,#0x32
0860 7434      2007            mov     a,#0x34
0862 120000    2008            lcall   ___fsmul
0865 AA82      2009            mov     r2,dpl
0867 AB83      2010            mov     r3,dph
0869 ACF0      2011            mov     r4,b
086B FD        2012            mov     r5,a
086C E581      2013            mov     a,sp
086E 24FC      2014            add     a,#0xfc
0870 F581      2015            mov     sp,a
0872           2016   ;        sourcecode.c:398: Phase_Shift = (time_difference * 360.0) / period;   // we now have the phase shift   
0872 C002      2017            push    ar2
0874 C003      2018            push    ar3
0876 C004      2019            push    ar4
0878 C005      2020            push    ar5
087A 900000    2021            mov     dptr,#0x0000
087D 75F0B4    2022            mov     b,#0xB4
0880 7443      2023            mov     a,#0x43
0882 120000    2024            lcall   ___fsmul
0885 AA82      2025            mov     r2,dpl
0887 AB83      2026            mov     r3,dph
0889 ACF0      2027            mov     r4,b
088B FD        2028            mov     r5,a
088C E581      2029            mov     a,sp
088E 24FC      2030            add     a,#0xfc
0890 F581      2031            mov     sp,a
0892 C0E0      2032            push    _main_period_1_76
0894 C0E1      2033            push    (_main_period_1_76 + 1)
0896 C0E2      2034            push    (_main_period_1_76 + 2)
0898 C0E3      2035            push    (_main_period_1_76 + 3)
089A 8A82      2036            mov     dpl,r2
089C 8B83      2037            mov     dph,r3
089E 8CF0      2038            mov     b,r4
08A0 ED        2039            mov     a,r5
08A1 120000    2040            lcall   ___fsdiv
08A4 AA82      2041            mov     r2,dpl
08A6 AB83      2042            mov     r3,dph
08A8 ACF0      2043            mov     r4,b
08AA FD        2044            mov     r5,a
08AB E581      2045            mov     a,sp
08AD 24FC      2046            add     a,#0xfc
08AF F581      2047            mov     sp,a
08B1 D001      2048            pop     ar1
08B3 D000      2049            pop     ar0
08B5 D007      2050            pop     ar7
08B7 D006      2051            pop     ar6
08B9           2052   ;        sourcecode.c:400: printf("T=%fms, Phase: %f, v1_Rms:%f, v2_Rms:%f\r", 
08B9 C0D8      2053            push    _v2_rms
08BB C0D9      2054            push    (_v2_rms + 1)
08BD C0DA      2055            push    (_v2_rms + 2)
08BF C0DB      2056            push    (_v2_rms + 3)
08C1 C018      2057            push    _v1_rms
08C3 C019      2058            push    (_v1_rms + 1)
08C5 C01A      2059            push    (_v1_rms + 2)
08C7 C01B      2060            push    (_v1_rms + 3)
08C9 C002      2061            push    ar2
08CB C003      2062            push    ar3
08CD C004      2063            push    ar4
08CF C005      2064            push    ar5
08D1 C006      2065            push    ar6
08D3 C007      2066            push    ar7
08D5 C000      2067            push    ar0
08D7 C001      2068            push    ar1
08D9 7468      2069            mov     a,#__str_7
08DB C0E0      2070            push    acc
08DD 74DF      2071            mov     a,#(__str_7 >> 8)
08DF C0E0      2072            push    acc
08E1 7480      2073            mov     a,#0x80
08E3 C0E0      2074            push    acc
08E5 120000    2075            lcall   _printf
08E8 E581      2076            mov     a,sp
08EA 24ED      2077            add     a,#0xed
08EC F581      2078            mov     sp,a
08EE 020000    2079            ljmp    L017046?
08F1           2080            rseg R_CSEG
08F1           2081   
0000           2082            rseg R_XINIT
0000           2083   
0000           2084            rseg R_CONST
0000           2085   __str_0:
0000 1B        2086            db 0x1B
0001 5B324A    2087            db '[2J'
0004 00        2088            db 0x00
0005           2089   __str_1:
0005 41444320  2090            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        2091            db 0x0A
0016 46696C65  2092            db 'File: %s'
     3A202573
001E 0A        2093            db 0x0A
001F 436F6D70  2094            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        2095            db 0x0A
0030 0A        2096            db 0x0A
0031 00        2097            db 0x00
0032           2098   __str_2:
0032 736F7572  2099            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        2100            db 0x00
003F           2101   __str_3:
003F 4D617220  2102            db 'Mar  7 2024'
     20372032
     303234
004A 00        2103            db 0x00
004B           2104   __str_4:
004B 30303A31  2105            db '00:14:16'
     343A3136
0053 00        2106            db 0x00
0054           2107   __str_5:
0054 463A5858  2108            db 'F:XXHz   PH:_XXX'
     487A2020
     2050483A
     5F585858
0064 00        2109            db 0x00
0065           2110   __str_6:
0065 56523A58  2111            db 'VR:X.XX  VT:X.XX'
     2E585820
     2056543A
     582E5858
0075 00        2112            db 0x00
0076           2113   __str_7:
0076 543D2566  2114            db 'T=%fms, Phase: %f, v1_Rms:%f, v2_Rms:%f'
     6D732C20
     50686173
     653A2025
     662C2076
     315F526D
     733A2566
     2C207632
     5F526D73
     3A2566
009D 0D        2115            db 0x0D
009E 00        2116            db 0x00
009F           2117   
0003           2118            CSEG
0003           2119   
0003           2120   end
