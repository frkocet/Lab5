0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 06 03:03:15 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _Get_ADC
0000             32            public _ADC_at_Pin
0000             33            public _InitPinADC
0000             34            public _waitms
0000             35            public _Timer3us
0000             36            public _InitADC
0000             37            public __c51_external_startup
0000             38            public _v2
0000             39            public _v1
0000             40            public _v2_max
0000             41            public _v1_max
0000             42            public _Period
0000             43            public _F
0000             44            public _overflow_count
0000             45   ;--------------------------------------------------------
0000             46   ; Special Function Registers
0000             47   ;--------------------------------------------------------
0000             48   _ACC            DATA 0xe0
0000             49   _ADC0ASAH       DATA 0xb6
0000             50   _ADC0ASAL       DATA 0xb5
0000             51   _ADC0ASCF       DATA 0xa1
0000             52   _ADC0ASCT       DATA 0xc7
0000             53   _ADC0CF0        DATA 0xbc
0000             54   _ADC0CF1        DATA 0xb9
0000             55   _ADC0CF2        DATA 0xdf
0000             56   _ADC0CN0        DATA 0xe8
0000             57   _ADC0CN1        DATA 0xb2
0000             58   _ADC0CN2        DATA 0xb3
0000             59   _ADC0GTH        DATA 0xc4
0000             60   _ADC0GTL        DATA 0xc3
0000             61   _ADC0H          DATA 0xbe
0000             62   _ADC0L          DATA 0xbd
0000             63   _ADC0LTH        DATA 0xc6
0000             64   _ADC0LTL        DATA 0xc5
0000             65   _ADC0MX         DATA 0xbb
0000             66   _B              DATA 0xf0
0000             67   _CKCON0         DATA 0x8e
0000             68   _CKCON1         DATA 0xa6
0000             69   _CLEN0          DATA 0xc6
0000             70   _CLIE0          DATA 0xc7
0000             71   _CLIF0          DATA 0xe8
0000             72   _CLKSEL         DATA 0xa9
0000             73   _CLOUT0         DATA 0xd1
0000             74   _CLU0CF         DATA 0xb1
0000             75   _CLU0FN         DATA 0xaf
0000             76   _CLU0MX         DATA 0x84
0000             77   _CLU1CF         DATA 0xb3
0000             78   _CLU1FN         DATA 0xb2
0000             79   _CLU1MX         DATA 0x85
0000             80   _CLU2CF         DATA 0xb6
0000             81   _CLU2FN         DATA 0xb5
0000             82   _CLU2MX         DATA 0x91
0000             83   _CLU3CF         DATA 0xbf
0000             84   _CLU3FN         DATA 0xbe
0000             85   _CLU3MX         DATA 0xae
0000             86   _CMP0CN0        DATA 0x9b
0000             87   _CMP0CN1        DATA 0x99
0000             88   _CMP0MD         DATA 0x9d
0000             89   _CMP0MX         DATA 0x9f
0000             90   _CMP1CN0        DATA 0xbf
0000             91   _CMP1CN1        DATA 0xac
0000             92   _CMP1MD         DATA 0xab
0000             93   _CMP1MX         DATA 0xaa
0000             94   _CRC0CN0        DATA 0xce
0000             95   _CRC0CN1        DATA 0x86
0000             96   _CRC0CNT        DATA 0xd3
0000             97   _CRC0DAT        DATA 0xcb
0000             98   _CRC0FLIP       DATA 0xcf
0000             99   _CRC0IN         DATA 0xca
0000            100   _CRC0ST         DATA 0xd2
0000            101   _DAC0CF0        DATA 0x91
0000            102   _DAC0CF1        DATA 0x92
0000            103   _DAC0H          DATA 0x85
0000            104   _DAC0L          DATA 0x84
0000            105   _DAC1CF0        DATA 0x93
0000            106   _DAC1CF1        DATA 0x94
0000            107   _DAC1H          DATA 0x8a
0000            108   _DAC1L          DATA 0x89
0000            109   _DAC2CF0        DATA 0x95
0000            110   _DAC2CF1        DATA 0x96
0000            111   _DAC2H          DATA 0x8c
0000            112   _DAC2L          DATA 0x8b
0000            113   _DAC3CF0        DATA 0x9a
0000            114   _DAC3CF1        DATA 0x9c
0000            115   _DAC3H          DATA 0x8e
0000            116   _DAC3L          DATA 0x8d
0000            117   _DACGCF0        DATA 0x88
0000            118   _DACGCF1        DATA 0x98
0000            119   _DACGCF2        DATA 0xa2
0000            120   _DERIVID        DATA 0xad
0000            121   _DEVICEID       DATA 0xb5
0000            122   _DPH            DATA 0x83
0000            123   _DPL            DATA 0x82
0000            124   _EIE1           DATA 0xe6
0000            125   _EIE2           DATA 0xf3
0000            126   _EIP1           DATA 0xbb
0000            127   _EIP1H          DATA 0xee
0000            128   _EIP2           DATA 0xed
0000            129   _EIP2H          DATA 0xf6
0000            130   _EMI0CN         DATA 0xe7
0000            131   _FLKEY          DATA 0xb7
0000            132   _HFO0CAL        DATA 0xc7
0000            133   _HFO1CAL        DATA 0xd6
0000            134   _HFOCN          DATA 0xef
0000            135   _I2C0ADM        DATA 0xff
0000            136   _I2C0CN0        DATA 0xba
0000            137   _I2C0DIN        DATA 0xbc
0000            138   _I2C0DOUT       DATA 0xbb
0000            139   _I2C0FCN0       DATA 0xad
0000            140   _I2C0FCN1       DATA 0xab
0000            141   _I2C0FCT        DATA 0xf5
0000            142   _I2C0SLAD       DATA 0xbd
0000            143   _I2C0STAT       DATA 0xb9
0000            144   _IE             DATA 0xa8
0000            145   _IP             DATA 0xb8
0000            146   _IPH            DATA 0xf2
0000            147   _IT01CF         DATA 0xe4
0000            148   _LFO0CN         DATA 0xb1
0000            149   _P0             DATA 0x80
0000            150   _P0MASK         DATA 0xfe
0000            151   _P0MAT          DATA 0xfd
0000            152   _P0MDIN         DATA 0xf1
0000            153   _P0MDOUT        DATA 0xa4
0000            154   _P0SKIP         DATA 0xd4
0000            155   _P1             DATA 0x90
0000            156   _P1MASK         DATA 0xee
0000            157   _P1MAT          DATA 0xed
0000            158   _P1MDIN         DATA 0xf2
0000            159   _P1MDOUT        DATA 0xa5
0000            160   _P1SKIP         DATA 0xd5
0000            161   _P2             DATA 0xa0
0000            162   _P2MASK         DATA 0xfc
0000            163   _P2MAT          DATA 0xfb
0000            164   _P2MDIN         DATA 0xf3
0000            165   _P2MDOUT        DATA 0xa6
0000            166   _P2SKIP         DATA 0xcc
0000            167   _P3             DATA 0xb0
0000            168   _P3MDIN         DATA 0xf4
0000            169   _P3MDOUT        DATA 0x9c
0000            170   _PCA0CENT       DATA 0x9e
0000            171   _PCA0CLR        DATA 0x9c
0000            172   _PCA0CN0        DATA 0xd8
0000            173   _PCA0CPH0       DATA 0xfc
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPH2       DATA 0xec
0000            176   _PCA0CPH3       DATA 0xf5
0000            177   _PCA0CPH4       DATA 0x85
0000            178   _PCA0CPH5       DATA 0xde
0000            179   _PCA0CPL0       DATA 0xfb
0000            180   _PCA0CPL1       DATA 0xe9
0000            181   _PCA0CPL2       DATA 0xeb
0000            182   _PCA0CPL3       DATA 0xf4
0000            183   _PCA0CPL4       DATA 0x84
0000            184   _PCA0CPL5       DATA 0xdd
0000            185   _PCA0CPM0       DATA 0xda
0000            186   _PCA0CPM1       DATA 0xdb
0000            187   _PCA0CPM2       DATA 0xdc
0000            188   _PCA0CPM3       DATA 0xae
0000            189   _PCA0CPM4       DATA 0xaf
0000            190   _PCA0CPM5       DATA 0xcc
0000            191   _PCA0H          DATA 0xfa
0000            192   _PCA0L          DATA 0xf9
0000            193   _PCA0MD         DATA 0xd9
0000            194   _PCA0POL        DATA 0x96
0000            195   _PCA0PWM        DATA 0xf7
0000            196   _PCON0          DATA 0x87
0000            197   _PCON1          DATA 0xcd
0000            198   _PFE0CN         DATA 0xc1
0000            199   _PRTDRV         DATA 0xf6
0000            200   _PSCTL          DATA 0x8f
0000            201   _PSTAT0         DATA 0xaa
0000            202   _PSW            DATA 0xd0
0000            203   _REF0CN         DATA 0xd1
0000            204   _REG0CN         DATA 0xc9
0000            205   _REVID          DATA 0xb6
0000            206   _RSTSRC         DATA 0xef
0000            207   _SBCON1         DATA 0x94
0000            208   _SBRLH1         DATA 0x96
0000            209   _SBRLL1         DATA 0x95
0000            210   _SBUF           DATA 0x99
0000            211   _SBUF0          DATA 0x99
0000            212   _SBUF1          DATA 0x92
0000            213   _SCON           DATA 0x98
0000            214   _SCON0          DATA 0x98
0000            215   _SCON1          DATA 0xc8
0000            216   _SFRPAGE        DATA 0xa7
0000            217   _SFRPGCN        DATA 0xbc
0000            218   _SFRSTACK       DATA 0xd7
0000            219   _SMB0ADM        DATA 0xd6
0000            220   _SMB0ADR        DATA 0xd7
0000            221   _SMB0CF         DATA 0xc1
0000            222   _SMB0CN0        DATA 0xc0
0000            223   _SMB0DAT        DATA 0xc2
0000            224   _SMB0FCN0       DATA 0xc3
0000            225   _SMB0FCN1       DATA 0xc4
0000            226   _SMB0FCT        DATA 0xef
0000            227   _SMB0RXLN       DATA 0xc5
0000            228   _SMB0TC         DATA 0xac
0000            229   _SMOD1          DATA 0x93
0000            230   _SP             DATA 0x81
0000            231   _SPI0CFG        DATA 0xa1
0000            232   _SPI0CKR        DATA 0xa2
0000            233   _SPI0CN0        DATA 0xf8
0000            234   _SPI0DAT        DATA 0xa3
0000            235   _SPI0FCN0       DATA 0x9a
0000            236   _SPI0FCN1       DATA 0x9b
0000            237   _SPI0FCT        DATA 0xf7
0000            238   _SPI0PCF        DATA 0xdf
0000            239   _TCON           DATA 0x88
0000            240   _TH0            DATA 0x8c
0000            241   _TH1            DATA 0x8d
0000            242   _TL0            DATA 0x8a
0000            243   _TL1            DATA 0x8b
0000            244   _TMOD           DATA 0x89
0000            245   _TMR2CN0        DATA 0xc8
0000            246   _TMR2CN1        DATA 0xfd
0000            247   _TMR2H          DATA 0xcf
0000            248   _TMR2L          DATA 0xce
0000            249   _TMR2RLH        DATA 0xcb
0000            250   _TMR2RLL        DATA 0xca
0000            251   _TMR3CN0        DATA 0x91
0000            252   _TMR3CN1        DATA 0xfe
0000            253   _TMR3H          DATA 0x95
0000            254   _TMR3L          DATA 0x94
0000            255   _TMR3RLH        DATA 0x93
0000            256   _TMR3RLL        DATA 0x92
0000            257   _TMR4CN0        DATA 0x98
0000            258   _TMR4CN1        DATA 0xff
0000            259   _TMR4H          DATA 0xa5
0000            260   _TMR4L          DATA 0xa4
0000            261   _TMR4RLH        DATA 0xa3
0000            262   _TMR4RLL        DATA 0xa2
0000            263   _TMR5CN0        DATA 0xc0
0000            264   _TMR5CN1        DATA 0xf1
0000            265   _TMR5H          DATA 0xd5
0000            266   _TMR5L          DATA 0xd4
0000            267   _TMR5RLH        DATA 0xd3
0000            268   _TMR5RLL        DATA 0xd2
0000            269   _UART0PCF       DATA 0xd9
0000            270   _UART1FCN0      DATA 0x9d
0000            271   _UART1FCN1      DATA 0xd8
0000            272   _UART1FCT       DATA 0xfa
0000            273   _UART1LIN       DATA 0x9e
0000            274   _UART1PCF       DATA 0xda
0000            275   _VDM0CN         DATA 0xff
0000            276   _WDTCN          DATA 0x97
0000            277   _XBR0           DATA 0xe1
0000            278   _XBR1           DATA 0xe2
0000            279   _XBR2           DATA 0xe3
0000            280   _XOSC0CN        DATA 0x86
0000            281   _DPTR           DATA 0x8382
0000            282   _TMR2RL         DATA 0xcbca
0000            283   _TMR3RL         DATA 0x9392
0000            284   _TMR4RL         DATA 0xa3a2
0000            285   _TMR5RL         DATA 0xd3d2
0000            286   _TMR0           DATA 0x8c8a
0000            287   _TMR1           DATA 0x8d8b
0000            288   _TMR2           DATA 0xcfce
0000            289   _TMR3           DATA 0x9594
0000            290   _TMR4           DATA 0xa5a4
0000            291   _TMR5           DATA 0xd5d4
0000            292   _SBRL1          DATA 0x9695
0000            293   _PCA0           DATA 0xfaf9
0000            294   _PCA0CP0        DATA 0xfcfb
0000            295   _PCA0CP1        DATA 0xeae9
0000            296   _PCA0CP2        DATA 0xeceb
0000            297   _PCA0CP3        DATA 0xf5f4
0000            298   _PCA0CP4        DATA 0x8584
0000            299   _PCA0CP5        DATA 0xdedd
0000            300   _ADC0ASA        DATA 0xb6b5
0000            301   _ADC0GT         DATA 0xc4c3
0000            302   _ADC0           DATA 0xbebd
0000            303   _ADC0LT         DATA 0xc6c5
0000            304   _DAC0           DATA 0x8584
0000            305   _DAC1           DATA 0x8a89
0000            306   _DAC2           DATA 0x8c8b
0000            307   _DAC3           DATA 0x8e8d
0000            308   ;--------------------------------------------------------
0000            309   ; special function bits
0000            310   ;--------------------------------------------------------
0000            311   _ACC_0          BIT 0xe0
0000            312   _ACC_1          BIT 0xe1
0000            313   _ACC_2          BIT 0xe2
0000            314   _ACC_3          BIT 0xe3
0000            315   _ACC_4          BIT 0xe4
0000            316   _ACC_5          BIT 0xe5
0000            317   _ACC_6          BIT 0xe6
0000            318   _ACC_7          BIT 0xe7
0000            319   _TEMPE          BIT 0xe8
0000            320   _ADGN0          BIT 0xe9
0000            321   _ADGN1          BIT 0xea
0000            322   _ADWINT         BIT 0xeb
0000            323   _ADBUSY         BIT 0xec
0000            324   _ADINT          BIT 0xed
0000            325   _IPOEN          BIT 0xee
0000            326   _ADEN           BIT 0xef
0000            327   _B_0            BIT 0xf0
0000            328   _B_1            BIT 0xf1
0000            329   _B_2            BIT 0xf2
0000            330   _B_3            BIT 0xf3
0000            331   _B_4            BIT 0xf4
0000            332   _B_5            BIT 0xf5
0000            333   _B_6            BIT 0xf6
0000            334   _B_7            BIT 0xf7
0000            335   _C0FIF          BIT 0xe8
0000            336   _C0RIF          BIT 0xe9
0000            337   _C1FIF          BIT 0xea
0000            338   _C1RIF          BIT 0xeb
0000            339   _C2FIF          BIT 0xec
0000            340   _C2RIF          BIT 0xed
0000            341   _C3FIF          BIT 0xee
0000            342   _C3RIF          BIT 0xef
0000            343   _D1SRC0         BIT 0x88
0000            344   _D1SRC1         BIT 0x89
0000            345   _D1AMEN         BIT 0x8a
0000            346   _D01REFSL       BIT 0x8b
0000            347   _D3SRC0         BIT 0x8c
0000            348   _D3SRC1         BIT 0x8d
0000            349   _D3AMEN         BIT 0x8e
0000            350   _D23REFSL       BIT 0x8f
0000            351   _D0UDIS         BIT 0x98
0000            352   _D1UDIS         BIT 0x99
0000            353   _D2UDIS         BIT 0x9a
0000            354   _D3UDIS         BIT 0x9b
0000            355   _EX0            BIT 0xa8
0000            356   _ET0            BIT 0xa9
0000            357   _EX1            BIT 0xaa
0000            358   _ET1            BIT 0xab
0000            359   _ES0            BIT 0xac
0000            360   _ET2            BIT 0xad
0000            361   _ESPI0          BIT 0xae
0000            362   _EA             BIT 0xaf
0000            363   _PX0            BIT 0xb8
0000            364   _PT0            BIT 0xb9
0000            365   _PX1            BIT 0xba
0000            366   _PT1            BIT 0xbb
0000            367   _PS0            BIT 0xbc
0000            368   _PT2            BIT 0xbd
0000            369   _PSPI0          BIT 0xbe
0000            370   _P0_0           BIT 0x80
0000            371   _P0_1           BIT 0x81
0000            372   _P0_2           BIT 0x82
0000            373   _P0_3           BIT 0x83
0000            374   _P0_4           BIT 0x84
0000            375   _P0_5           BIT 0x85
0000            376   _P0_6           BIT 0x86
0000            377   _P0_7           BIT 0x87
0000            378   _P1_0           BIT 0x90
0000            379   _P1_1           BIT 0x91
0000            380   _P1_2           BIT 0x92
0000            381   _P1_3           BIT 0x93
0000            382   _P1_4           BIT 0x94
0000            383   _P1_5           BIT 0x95
0000            384   _P1_6           BIT 0x96
0000            385   _P1_7           BIT 0x97
0000            386   _P2_0           BIT 0xa0
0000            387   _P2_1           BIT 0xa1
0000            388   _P2_2           BIT 0xa2
0000            389   _P2_3           BIT 0xa3
0000            390   _P2_4           BIT 0xa4
0000            391   _P2_5           BIT 0xa5
0000            392   _P2_6           BIT 0xa6
0000            393   _P3_0           BIT 0xb0
0000            394   _P3_1           BIT 0xb1
0000            395   _P3_2           BIT 0xb2
0000            396   _P3_3           BIT 0xb3
0000            397   _P3_4           BIT 0xb4
0000            398   _P3_7           BIT 0xb7
0000            399   _CCF0           BIT 0xd8
0000            400   _CCF1           BIT 0xd9
0000            401   _CCF2           BIT 0xda
0000            402   _CCF3           BIT 0xdb
0000            403   _CCF4           BIT 0xdc
0000            404   _CCF5           BIT 0xdd
0000            405   _CR             BIT 0xde
0000            406   _CF             BIT 0xdf
0000            407   _PARITY         BIT 0xd0
0000            408   _F1             BIT 0xd1
0000            409   _OV             BIT 0xd2
0000            410   _RS0            BIT 0xd3
0000            411   _RS1            BIT 0xd4
0000            412   _F0             BIT 0xd5
0000            413   _AC             BIT 0xd6
0000            414   _CY             BIT 0xd7
0000            415   _RI             BIT 0x98
0000            416   _TI             BIT 0x99
0000            417   _RB8            BIT 0x9a
0000            418   _TB8            BIT 0x9b
0000            419   _REN            BIT 0x9c
0000            420   _CE             BIT 0x9d
0000            421   _SMODE          BIT 0x9e
0000            422   _RI1            BIT 0xc8
0000            423   _TI1            BIT 0xc9
0000            424   _RBX1           BIT 0xca
0000            425   _TBX1           BIT 0xcb
0000            426   _REN1           BIT 0xcc
0000            427   _PERR1          BIT 0xcd
0000            428   _OVR1           BIT 0xce
0000            429   _SI             BIT 0xc0
0000            430   _ACK            BIT 0xc1
0000            431   _ARBLOST        BIT 0xc2
0000            432   _ACKRQ          BIT 0xc3
0000            433   _STO            BIT 0xc4
0000            434   _STA            BIT 0xc5
0000            435   _TXMODE         BIT 0xc6
0000            436   _MASTER         BIT 0xc7
0000            437   _SPIEN          BIT 0xf8
0000            438   _TXNF           BIT 0xf9
0000            439   _NSSMD0         BIT 0xfa
0000            440   _NSSMD1         BIT 0xfb
0000            441   _RXOVRN         BIT 0xfc
0000            442   _MODF           BIT 0xfd
0000            443   _WCOL           BIT 0xfe
0000            444   _SPIF           BIT 0xff
0000            445   _IT0            BIT 0x88
0000            446   _IE0            BIT 0x89
0000            447   _IT1            BIT 0x8a
0000            448   _IE1            BIT 0x8b
0000            449   _TR0            BIT 0x8c
0000            450   _TF0            BIT 0x8d
0000            451   _TR1            BIT 0x8e
0000            452   _TF1            BIT 0x8f
0000            453   _T2XCLK0        BIT 0xc8
0000            454   _T2XCLK1        BIT 0xc9
0000            455   _TR2            BIT 0xca
0000            456   _T2SPLIT        BIT 0xcb
0000            457   _TF2CEN         BIT 0xcc
0000            458   _TF2LEN         BIT 0xcd
0000            459   _TF2L           BIT 0xce
0000            460   _TF2H           BIT 0xcf
0000            461   _T4XCLK0        BIT 0x98
0000            462   _T4XCLK1        BIT 0x99
0000            463   _TR4            BIT 0x9a
0000            464   _T4SPLIT        BIT 0x9b
0000            465   _TF4CEN         BIT 0x9c
0000            466   _TF4LEN         BIT 0x9d
0000            467   _TF4L           BIT 0x9e
0000            468   _TF4H           BIT 0x9f
0000            469   _T5XCLK0        BIT 0xc0
0000            470   _T5XCLK1        BIT 0xc1
0000            471   _TR5            BIT 0xc2
0000            472   _T5SPLIT        BIT 0xc3
0000            473   _TF5CEN         BIT 0xc4
0000            474   _TF5LEN         BIT 0xc5
0000            475   _TF5L           BIT 0xc6
0000            476   _TF5H           BIT 0xc7
0000            477   _RIE            BIT 0xd8
0000            478   _RXTO0          BIT 0xd9
0000            479   _RXTO1          BIT 0xda
0000            480   _RFRQ           BIT 0xdb
0000            481   _TIE            BIT 0xdc
0000            482   _TXHOLD         BIT 0xdd
0000            483   _TXNF1          BIT 0xde
0000            484   _TFRQ           BIT 0xdf
0000            485   ;--------------------------------------------------------
0000            486   ; overlayable register banks
0000            487   ;--------------------------------------------------------
0000            488            rbank0 segment data overlay
0000            489   ;--------------------------------------------------------
0000            490   ; internal ram data
0000            491   ;--------------------------------------------------------
0000            492            rseg R_DSEG
0000            493   _overflow_count:
0000            494            ds 1
0001            495   _F:
0001            496            ds 4
0005            497   _Period:
0005            498            ds 4
0009            499   _v1_max:
0009            500            ds 4
000D            501   _v2_max:
000D            502            ds 4
0011            503   _v1:
0011            504            ds 4
0015            505   _v2:
0015            506            ds 4
0019            507   _main_period_1_64:
0019            508            ds 4
001D            509   ;--------------------------------------------------------
001D            510   ; overlayable items in internal ram 
001D            511   ;--------------------------------------------------------
0000            512            rseg    R_OSEG
0000            513            rseg    R_OSEG
0000            514   _InitPinADC_PARM_2:
0000            515            ds 1
0001            516            rseg    R_OSEG
0001            517   ;--------------------------------------------------------
0001            518   ; indirectly addressable internal ram data
0001            519   ;--------------------------------------------------------
0000            520            rseg R_ISEG
0000            521   ;--------------------------------------------------------
0000            522   ; absolute internal ram data
0000            523   ;--------------------------------------------------------
0000            524            DSEG
0000            525   ;--------------------------------------------------------
0000            526   ; bit data
0000            527   ;--------------------------------------------------------
0000            528            rseg R_BSEG
0000            529   ;--------------------------------------------------------
0000            530   ; paged external ram data
0000            531   ;--------------------------------------------------------
0000            532            rseg R_PSEG
0000            533   ;--------------------------------------------------------
0000            534   ; external ram data
0000            535   ;--------------------------------------------------------
0000            536            rseg R_XSEG
0000            537   ;--------------------------------------------------------
0000            538   ; absolute external ram data
0000            539   ;--------------------------------------------------------
0000            540            XSEG
0000            541   ;--------------------------------------------------------
0000            542   ; external initialized ram data
0000            543   ;--------------------------------------------------------
0000            544            rseg R_IXSEG
0000            545            rseg R_HOME
0000            546            rseg R_GSINIT
0000            547            rseg R_CSEG
0000            548   ;--------------------------------------------------------
0000            549   ; Reset entry point and interrupt vectors
0000            550   ;--------------------------------------------------------
0000            551            CSEG at 0x0000
0000 020000     552            ljmp    _crt0
0003            553   ;--------------------------------------------------------
0003            554   ; global & static initialisations
0003            555   ;--------------------------------------------------------
0000            556            rseg R_HOME
0000            557            rseg R_GSINIT
0000            558            rseg R_GSINIT
0000            559   ;--------------------------------------------------------
0000            560   ; data variables initialization
0000            561   ;--------------------------------------------------------
0000            562            rseg R_DINIT
0000            563   ;        sourcecode.c:17: float v1_max = 0; float v2_max = 0;
0000 755800     564            mov     _v1_max,#0x00
0003 755900     565            mov     (_v1_max + 1),#0x00
0006 755A00     566            mov     (_v1_max + 2),#0x00
0009 755B00     567            mov     (_v1_max + 3),#0x00
000C            568   ;        sourcecode.c:17: float v1 = 0; float v2 = 0;
000C 751800     569            mov     _v2_max,#0x00
000F 751900     570            mov     (_v2_max + 1),#0x00
0012 751A00     571            mov     (_v2_max + 2),#0x00
0015 751B00     572            mov     (_v2_max + 3),#0x00
0018            573   ;        sourcecode.c:18: 
0018 75D800     574            mov     _v1,#0x00
001B 75D900     575            mov     (_v1 + 1),#0x00
001E 75DA00     576            mov     (_v1 + 2),#0x00
0021 75DB00     577            mov     (_v1 + 3),#0x00
0024            578   ;        sourcecode.c:18: float v1 = 0; float v2 = 0;
0024 759800     579            mov     _v2,#0x00
0027 759900     580            mov     (_v2 + 1),#0x00
002A 759A00     581            mov     (_v2 + 2),#0x00
002D 759B00     582            mov     (_v2 + 3),#0x00
0030            583            ; The linker places a 'ret' at the end of segment R_DINIT.
0030            584   ;--------------------------------------------------------
0030            585   ; code
0030            586   ;--------------------------------------------------------
0000            587            rseg R_CSEG
0000            588   ;------------------------------------------------------------
0000            589   ;Allocation info for local variables in function '_c51_external_startup'
0000            590   ;------------------------------------------------------------
0000            591   ;------------------------------------------------------------
0000            592   ;        sourcecode.c:20: char _c51_external_startup (void)
0000            593   ;        -----------------------------------------
0000            594   ;         function _c51_external_startup
0000            595   ;        -----------------------------------------
0000            596   __c51_external_startup:
0000            597            using   0
0000            598   ;        sourcecode.c:23: SFRPAGE = 0x00;
0000 75A700     599            mov     _SFRPAGE,#0x00
0003            600   ;        sourcecode.c:24: WDTCN = 0xDE; //First key
0003 7597DE     601            mov     _WDTCN,#0xDE
0006            602   ;        sourcecode.c:25: WDTCN = 0xAD; //Second key
0006 7597AD     603            mov     _WDTCN,#0xAD
0009            604   ;        sourcecode.c:27: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     605            mov     _VDM0CN,#0x80
000C            606   ;        sourcecode.c:28: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     607            mov     _RSTSRC,#0x06
000F            608   ;        sourcecode.c:35: SFRPAGE = 0x10;
000F 75A710     609            mov     _SFRPAGE,#0x10
0012            610   ;        sourcecode.c:36: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     611            mov     _PFE0CN,#0x20
0015            612   ;        sourcecode.c:37: SFRPAGE = 0x00;
0015 75A700     613            mov     _SFRPAGE,#0x00
0018            614   ;        sourcecode.c:58: CLKSEL = 0x00;
0018 75A900     615            mov     _CLKSEL,#0x00
001B            616   ;        sourcecode.c:59: CLKSEL = 0x00;
001B 75A900     617            mov     _CLKSEL,#0x00
001E            618   ;        sourcecode.c:60: while ((CLKSEL & 0x80) == 0);
001E            619   L002001?:
001E E5A9       620            mov     a,_CLKSEL
0020 30E720     621            jnb     acc.7,L002001?
0023            622   ;        sourcecode.c:61: CLKSEL = 0x03;
0023 75A903     623            mov     _CLKSEL,#0x03
0026            624   ;        sourcecode.c:62: CLKSEL = 0x03;
0026 75A903     625            mov     _CLKSEL,#0x03
0029            626   ;        sourcecode.c:63: while ((CLKSEL & 0x80) == 0);
0029            627   L002004?:
0029 E5A9       628            mov     a,_CLKSEL
002B 30E7A0     629            jnb     acc.7,L002004?
002E            630   ;        sourcecode.c:68: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     631            orl     _P0MDOUT,#0x10
0031            632   ;        sourcecode.c:69: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     633            mov     _XBR0,#0x01
0034            634   ;        sourcecode.c:70: XBR1     = 0X00;
0034 75E200     635            mov     _XBR1,#0x00
0037            636   ;        sourcecode.c:71: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     637            mov     _XBR2,#0x40
003A            638   ;        sourcecode.c:77: SCON0 = 0x10;
003A 759810     639            mov     _SCON0,#0x10
003D            640   ;        sourcecode.c:78: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     641            mov     _TH1,#0xE6
0040            642   ;        sourcecode.c:79: TL1 = TH1;      // Init Timer1
0040 858D8B     643            mov     _TL1,_TH1
0043            644   ;        sourcecode.c:80: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     645            anl     _TMOD,#0x0F
0046            646   ;        sourcecode.c:81: TMOD |=  0x20;                       
0046 438920     647            orl     _TMOD,#0x20
0049            648   ;        sourcecode.c:82: TR1 = 1; // START Timer1
0049 D28E       649            setb    _TR1
004B            650   ;        sourcecode.c:83: TI = 1;  // Indicate TX0 ready
004B D299       651            setb    _TI
004D            652   ;        sourcecode.c:85: return 0;
004D 758200     653            mov     dpl,#0x00
0050 22         654            ret
0051            655   ;------------------------------------------------------------
0051            656   ;Allocation info for local variables in function 'InitADC'
0051            657   ;------------------------------------------------------------
0051            658   ;------------------------------------------------------------
0051            659   ;        sourcecode.c:88: void InitADC (void)
0051            660   ;        -----------------------------------------
0051            661   ;         function InitADC
0051            662   ;        -----------------------------------------
0051            663   _InitADC:
0051            664   ;        sourcecode.c:90: SFRPAGE = 0x00;
0051 75A700     665            mov     _SFRPAGE,#0x00
0054            666   ;        sourcecode.c:91: ADEN=0; // Disable ADC
0054 C2EF       667            clr     _ADEN
0056            668   ;        sourcecode.c:96: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     669            mov     _ADC0CN1,#0x80
0059            670   ;        sourcecode.c:100: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     671            mov     _ADC0CF0,#0x20
005C            672   ;        sourcecode.c:104: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     673            mov     _ADC0CF1,#0x1E
005F            674   ;        sourcecode.c:113: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     675            mov     _ADC0CN0,#0x00
0062            676   ;        sourcecode.c:118: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     677            mov     _ADC0CF2,#0x3F
0065            678   ;        sourcecode.c:122: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     679            mov     _ADC0CN2,#0x00
0068            680   ;        sourcecode.c:124: ADEN=1; // Enable ADC
0068 D2EF       681            setb    _ADEN
006A 22         682            ret
006B            683   ;------------------------------------------------------------
006B            684   ;Allocation info for local variables in function 'Timer3us'
006B            685   ;------------------------------------------------------------
006B            686   ;us                        Allocated to registers r2 
006B            687   ;i                         Allocated to registers r3 
006B            688   ;------------------------------------------------------------
006B            689   ;        sourcecode.c:128: void Timer3us(unsigned char us)
006B            690   ;        -----------------------------------------
006B            691   ;         function Timer3us
006B            692   ;        -----------------------------------------
006B            693   _Timer3us:
006B AA82       694            mov     r2,dpl
006D            695   ;        sourcecode.c:133: CKCON0|=0b_0100_0000;
006D 438E40     696            orl     _CKCON0,#0x40
0070            697   ;        sourcecode.c:135: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     698            mov     _TMR3RL,#0xB8
0073 7593FF     699            mov     (_TMR3RL >> 8),#0xFF
0076            700   ;        sourcecode.c:136: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     701            mov     _TMR3,_TMR3RL
0079 859395     702            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            703   ;        sourcecode.c:138: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     704            mov     _TMR3CN0,#0x04
007F            705   ;        sourcecode.c:139: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       706            mov     r3,#0x00
0081            707   L004004?:
0081 C3         708            clr     c
0082 EB         709            mov     a,r3
0083 9A         710            subb    a,r2
0084 5000       711            jnc     L004007?
0086            712   ;        sourcecode.c:141: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            713   L004001?:
0086 E591       714            mov     a,_TMR3CN0
0088 30E7A0     715            jnb     acc.7,L004001?
008B            716   ;        sourcecode.c:142: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     717            anl     _TMR3CN0,#0x7F
008E            718   ;        sourcecode.c:139: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         719            inc     r3
008F 8000       720            sjmp    L004004?
0091            721   L004007?:
0091            722   ;        sourcecode.c:144: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     723            mov     _TMR3CN0,#0x00
0094 22         724            ret
0095            725   ;------------------------------------------------------------
0095            726   ;Allocation info for local variables in function 'waitms'
0095            727   ;------------------------------------------------------------
0095            728   ;ms                        Allocated to registers r2 r3 
0095            729   ;j                         Allocated to registers r2 r3 
0095            730   ;------------------------------------------------------------
0095            731   ;        sourcecode.c:147: void waitms (unsigned int ms)
0095            732   ;        -----------------------------------------
0095            733   ;         function waitms
0095            734   ;        -----------------------------------------
0095            735   _waitms:
0095 AA82       736            mov     r2,dpl
0097 AB83       737            mov     r3,dph
0099            738   ;        sourcecode.c:150: for(j=ms; j!=0; j--)
0099            739   L005001?:
0099 BA0060     740            cjne    r2,#0x00,L005010?
009C BB0060     741            cjne    r3,#0x00,L005010?
009F 22         742            ret
00A0            743   L005010?:
00A0            744   ;        sourcecode.c:152: Timer3us(249);
00A0 7582F9     745            mov     dpl,#0xF9
00A3 C002       746            push    ar2
00A5 C003       747            push    ar3
00A7 120000     748            lcall   _Timer3us
00AA            749   ;        sourcecode.c:153: Timer3us(249);
00AA 7582F9     750            mov     dpl,#0xF9
00AD 120000     751            lcall   _Timer3us
00B0            752   ;        sourcecode.c:154: Timer3us(249);
00B0 7582F9     753            mov     dpl,#0xF9
00B3 120000     754            lcall   _Timer3us
00B6            755   ;        sourcecode.c:155: Timer3us(250);
00B6 7582FA     756            mov     dpl,#0xFA
00B9 120000     757            lcall   _Timer3us
00BC D003       758            pop     ar3
00BE D002       759            pop     ar2
00C0            760   ;        sourcecode.c:150: for(j=ms; j!=0; j--)
00C0 1A         761            dec     r2
00C1 BAFFA0     762            cjne    r2,#0xff,L005011?
00C4 1B         763            dec     r3
00C5            764   L005011?:
00C5 8000       765            sjmp    L005001?
00C7            766   ;------------------------------------------------------------
00C7            767   ;Allocation info for local variables in function 'InitPinADC'
00C7            768   ;------------------------------------------------------------
00C7            769   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00C7            770   ;portno                    Allocated to registers r2 
00C7            771   ;mask                      Allocated to registers r3 
00C7            772   ;------------------------------------------------------------
00C7            773   ;        sourcecode.c:161: void InitPinADC (unsigned char portno, unsigned char pinno)
00C7            774   ;        -----------------------------------------
00C7            775   ;         function InitPinADC
00C7            776   ;        -----------------------------------------
00C7            777   _InitPinADC:
00C7 AA82       778            mov     r2,dpl
00C9            779   ;        sourcecode.c:165: mask=1<<pinno;
00C9 85C8F0     780            mov     b,_InitPinADC_PARM_2
00CC 05F0       781            inc     b
00CE 7401       782            mov     a,#0x01
00D0 8000       783            sjmp    L006013?
00D2            784   L006011?:
00D2 25E0       785            add     a,acc
00D4            786   L006013?:
00D4 D5F060     787            djnz    b,L006011?
00D7 FB         788            mov     r3,a
00D8            789   ;        sourcecode.c:167: SFRPAGE = 0x20;
00D8 75A720     790            mov     _SFRPAGE,#0x20
00DB            791   ;        sourcecode.c:168: switch (portno)
00DB BA00A0     792            cjne    r2,#0x00,L006014?
00DE 8000       793            sjmp    L006001?
00E0            794   L006014?:
00E0 BA0120     795            cjne    r2,#0x01,L006015?
00E3 8000       796            sjmp    L006002?
00E5            797   L006015?:
00E5            798   ;        sourcecode.c:170: case 0:
00E5 BA02A0     799            cjne    r2,#0x02,L006005?
00E8 8000       800            sjmp    L006003?
00EA            801   L006001?:
00EA            802   ;        sourcecode.c:171: P0MDIN &= (~mask); // Set pin as analog input
00EA EB         803            mov     a,r3
00EB F4         804            cpl     a
00EC FA         805            mov     r2,a
00ED 52F1       806            anl     _P0MDIN,a
00EF            807   ;        sourcecode.c:172: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00EF EB         808            mov     a,r3
00F0 42D4       809            orl     _P0SKIP,a
00F2            810   ;        sourcecode.c:173: break;
00F2            811   ;        sourcecode.c:174: case 1:
00F2 8000       812            sjmp    L006005?
00F4            813   L006002?:
00F4            814   ;        sourcecode.c:175: P1MDIN &= (~mask); // Set pin as analog input
00F4 EB         815            mov     a,r3
00F5 F4         816            cpl     a
00F6 FA         817            mov     r2,a
00F7 52F2       818            anl     _P1MDIN,a
00F9            819   ;        sourcecode.c:176: P1SKIP |= mask; // Skip Crossbar decoding for this pin
00F9 EB         820            mov     a,r3
00FA 42D5       821            orl     _P1SKIP,a
00FC            822   ;        sourcecode.c:177: break;
00FC            823   ;        sourcecode.c:178: case 2:
00FC 8000       824            sjmp    L006005?
00FE            825   L006003?:
00FE            826   ;        sourcecode.c:179: P2MDIN &= (~mask); // Set pin as analog input
00FE EB         827            mov     a,r3
00FF F4         828            cpl     a
0100 FA         829            mov     r2,a
0101 52F3       830            anl     _P2MDIN,a
0103            831   ;        sourcecode.c:180: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0103 EB         832            mov     a,r3
0104 42CC       833            orl     _P2SKIP,a
0106            834   ;        sourcecode.c:184: }
0106            835   L006005?:
0106            836   ;        sourcecode.c:185: SFRPAGE = 0x00;
0106 75A700     837            mov     _SFRPAGE,#0x00
0109 22         838            ret
010A            839   ;------------------------------------------------------------
010A            840   ;Allocation info for local variables in function 'ADC_at_Pin'
010A            841   ;------------------------------------------------------------
010A            842   ;pin                       Allocated to registers 
010A            843   ;------------------------------------------------------------
010A            844   ;        sourcecode.c:188: unsigned int ADC_at_Pin(unsigned char pin)
010A            845   ;        -----------------------------------------
010A            846   ;         function ADC_at_Pin
010A            847   ;        -----------------------------------------
010A            848   _ADC_at_Pin:
010A 8582BB     849            mov     _ADC0MX,dpl
010D            850   ;        sourcecode.c:191: ADINT = 0;
010D C2ED       851            clr     _ADINT
010F            852   ;        sourcecode.c:192: ADBUSY = 1;     // Convert voltage at the pin
010F D2EC       853            setb    _ADBUSY
0111            854   ;        sourcecode.c:193: while (!ADINT); // Wait for conversion to complete
0111            855   L007001?:
0111 30ED28     856            jnb     _ADINT,L007001?
0114            857   ;        sourcecode.c:194: return (ADC0);
0114 85BD82     858            mov     dpl,_ADC0
0117 85BE83     859            mov     dph,(_ADC0 >> 8)
011A 22         860            ret
011B            861   ;------------------------------------------------------------
011B            862   ;Allocation info for local variables in function 'Get_ADC'
011B            863   ;------------------------------------------------------------
011B            864   ;------------------------------------------------------------
011B            865   ;        sourcecode.c:197: unsigned int Get_ADC (void)
011B            866   ;        -----------------------------------------
011B            867   ;         function Get_ADC
011B            868   ;        -----------------------------------------
011B            869   _Get_ADC:
011B            870   ;        sourcecode.c:199: ADINT = 0;
011B C2ED       871            clr     _ADINT
011D            872   ;        sourcecode.c:200: ADBUSY = 1;
011D D2EC       873            setb    _ADBUSY
011F            874   ;        sourcecode.c:201: while (!ADINT); // Wait for conversion to complete
011F            875   L008001?:
011F 30ED68     876            jnb     _ADINT,L008001?
0122            877   ;        sourcecode.c:202: return (ADC0);
0122 85BD82     878            mov     dpl,_ADC0
0125 85BE83     879            mov     dph,(_ADC0 >> 8)
0128 22         880            ret
0129            881   ;------------------------------------------------------------
0129            882   ;Allocation info for local variables in function 'Volts_at_Pin'
0129            883   ;------------------------------------------------------------
0129            884   ;pin                       Allocated to registers r2 
0129            885   ;------------------------------------------------------------
0129            886   ;        sourcecode.c:205: float Volts_at_Pin(unsigned char pin)
0129            887   ;        -----------------------------------------
0129            888   ;         function Volts_at_Pin
0129            889   ;        -----------------------------------------
0129            890   _Volts_at_Pin:
0129            891   ;        sourcecode.c:207: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0129 120000     892            lcall   _ADC_at_Pin
012C 120000     893            lcall   ___uint2fs
012F AA82       894            mov     r2,dpl
0131 AB83       895            mov     r3,dph
0133 ACF0       896            mov     r4,b
0135 FD         897            mov     r5,a
0136 C002       898            push    ar2
0138 C003       899            push    ar3
013A C004       900            push    ar4
013C C005       901            push    ar5
013E 90923A     902            mov     dptr,#0x923A
0141 75F053     903            mov     b,#0x53
0144 7440       904            mov     a,#0x40
0146 120000     905            lcall   ___fsmul
0149 AA82       906            mov     r2,dpl
014B AB83       907            mov     r3,dph
014D ACF0       908            mov     r4,b
014F FD         909            mov     r5,a
0150 E581       910            mov     a,sp
0152 24FC       911            add     a,#0xfc
0154 F581       912            mov     sp,a
0156 E4         913            clr     a
0157 C0E0       914            push    acc
0159 74FC       915            mov     a,#0xFC
015B C0E0       916            push    acc
015D 747F       917            mov     a,#0x7F
015F C0E0       918            push    acc
0161 7446       919            mov     a,#0x46
0163 C0E0       920            push    acc
0165 8A82       921            mov     dpl,r2
0167 8B83       922            mov     dph,r3
0169 8CF0       923            mov     b,r4
016B ED         924            mov     a,r5
016C 120000     925            lcall   ___fsdiv
016F AA82       926            mov     r2,dpl
0171 AB83       927            mov     r3,dph
0173 ACF0       928            mov     r4,b
0175 FD         929            mov     r5,a
0176 E581       930            mov     a,sp
0178 24FC       931            add     a,#0xfc
017A F581       932            mov     sp,a
017C 8A82       933            mov     dpl,r2
017E 8B83       934            mov     dph,r3
0180 8CF0       935            mov     b,r4
0182 ED         936            mov     a,r5
0183 22         937            ret
0184            938   ;------------------------------------------------------------
0184            939   ;Allocation info for local variables in function 'TIMER0_Init'
0184            940   ;------------------------------------------------------------
0184            941   ;------------------------------------------------------------
0184            942   ;        sourcecode.c:210: void TIMER0_Init(void)
0184            943   ;        -----------------------------------------
0184            944   ;         function TIMER0_Init
0184            945   ;        -----------------------------------------
0184            946   _TIMER0_Init:
0184            947   ;        sourcecode.c:212: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0184 5389F0     948            anl     _TMOD,#0xF0
0187            949   ;        sourcecode.c:213: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0187 438901     950            orl     _TMOD,#0x01
018A            951   ;        sourcecode.c:214: TR0=0; // Stop Timer/Counter 0
018A C28C       952            clr     _TR0
018C 22         953            ret
018D            954   ;------------------------------------------------------------
018D            955   ;Allocation info for local variables in function 'main'
018D            956   ;------------------------------------------------------------
018D            957   ;period                    Allocated with name '_main_period_1_64'
018D            958   ;Phase_Shift               Allocated with name '_main_Phase_Shift_1_64'
018D            959   ;time_difference           Allocated with name '_main_time_difference_1_64'
018D            960   ;------------------------------------------------------------
018D            961   ;        sourcecode.c:223: void main (void)
018D            962   ;        -----------------------------------------
018D            963   ;         function main
018D            964   ;        -----------------------------------------
018D            965   _main:
018D            966   ;        sourcecode.c:229: TIMER0_Init();
018D 120000     967            lcall   _TIMER0_Init
0190            968   ;        sourcecode.c:231: waitms(500); // Give PuTTy a chance to start before sending
0190 9001F4     969            mov     dptr,#0x01F4
0193 120000     970            lcall   _waitms
0196            971   ;        sourcecode.c:232: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0196 74A8       972            mov     a,#__str_0
0198 C0E0       973            push    acc
019A 74D1       974            mov     a,#(__str_0 >> 8)
019C C0E0       975            push    acc
019E 7480       976            mov     a,#0x80
01A0 C0E0       977            push    acc
01A2 120000     978            lcall   _printf
01A5 1581       979            dec     sp
01A7 1581       980            dec     sp
01A9 1581       981            dec     sp
01AB            982   ;        sourcecode.c:237: __FILE__, __DATE__, __TIME__);
01AB            983   ;        sourcecode.c:236: "Compiled: %s, %s\n\n",
01AB 7428       984            mov     a,#__str_4
01AD C0E0       985            push    acc
01AF 74D2       986            mov     a,#(__str_4 >> 8)
01B1 C0E0       987            push    acc
01B3 7480       988            mov     a,#0x80
01B5 C0E0       989            push    acc
01B7 7468       990            mov     a,#__str_3
01B9 C0E0       991            push    acc
01BB 74D2       992            mov     a,#(__str_3 >> 8)
01BD C0E0       993            push    acc
01BF 7480       994            mov     a,#0x80
01C1 C0E0       995            push    acc
01C3 74A8       996            mov     a,#__str_2
01C5 C0E0       997            push    acc
01C7 74D2       998            mov     a,#(__str_2 >> 8)
01C9 C0E0       999            push    acc
01CB 7480      1000            mov     a,#0x80
01CD C0E0      1001            push    acc
01CF 74E8      1002            mov     a,#__str_1
01D1 C0E0      1003            push    acc
01D3 74D2      1004            mov     a,#(__str_1 >> 8)
01D5 C0E0      1005            push    acc
01D7 7480      1006            mov     a,#0x80
01D9 C0E0      1007            push    acc
01DB 120000    1008            lcall   _printf
01DE E581      1009            mov     a,sp
01E0 24F4      1010            add     a,#0xf4
01E2 F581      1011            mov     sp,a
01E4           1012   ;        sourcecode.c:239: InitPinADC(2, 1); // Configure P2.1 as analog input
01E4 75C801    1013            mov     _InitPinADC_PARM_2,#0x01
01E7 758202    1014            mov     dpl,#0x02
01EA 120000    1015            lcall   _InitPinADC
01ED           1016   ;        sourcecode.c:240: InitPinADC(2, 2); // Configure P2.2 as analog input
01ED 75C802    1017            mov     _InitPinADC_PARM_2,#0x02
01F0 758202    1018            mov     dpl,#0x02
01F3 120000    1019            lcall   _InitPinADC
01F6           1020   ;        sourcecode.c:242: InitADC();
01F6 120000    1021            lcall   _InitADC
01F9           1022   ;        sourcecode.c:247: while(1){
01F9           1023   L011002?:
01F9           1024   ;        sourcecode.c:248: printf("%lf\n", Volts_at_Pin(P2_1));
01F9 A2A1      1025            mov     c,_P2_1
01FB E4        1026            clr     a
01FC 33        1027            rlc     a
01FD F582      1028            mov     dpl,a
01FF 120000    1029            lcall   _Volts_at_Pin
0202 AA82      1030            mov     r2,dpl
0204 AB83      1031            mov     r3,dph
0206 ACF0      1032            mov     r4,b
0208 FD        1033            mov     r5,a
0209 C002      1034            push    ar2
020B C003      1035            push    ar3
020D C004      1036            push    ar4
020F C005      1037            push    ar5
0211 7468      1038            mov     a,#__str_5
0213 C0E0      1039            push    acc
0215 74D3      1040            mov     a,#(__str_5 >> 8)
0217 C0E0      1041            push    acc
0219 7480      1042            mov     a,#0x80
021B C0E0      1043            push    acc
021D 120000    1044            lcall   _printf
0220 E581      1045            mov     a,sp
0222 24F9      1046            add     a,#0xf9
0224 F581      1047            mov     sp,a
0226           1048   ;        sourcecode.c:307: printf ("Max Amp @p2.1=%7.5fV, Max Amp @p2.2=%7.5fV,\r", v1_max, v2_max); //print the two values for max amplitude
0226 8000      1049            sjmp    L011002?
0228           1050            rseg R_CSEG
0228           1051   
0000           1052            rseg R_XINIT
0000           1053   
0000           1054            rseg R_CONST
0000           1055   __str_0:
0000 1B        1056            db 0x1B
0001 5B324A    1057            db '[2J'
0004 00        1058            db 0x00
0005           1059   __str_1:
0005 41444320  1060            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1061            db 0x0A
0016 46696C65  1062            db 'File: %s'
     3A202573
001E 0A        1063            db 0x0A
001F 436F6D70  1064            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1065            db 0x0A
0030 0A        1066            db 0x0A
0031 00        1067            db 0x00
0032           1068   __str_2:
0032 736F7572  1069            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1070            db 0x00
003F           1071   __str_3:
003F 4D617220  1072            db 'Mar  6 2024'
     20362032
     303234
004A 00        1073            db 0x00
004B           1074   __str_4:
004B 30333A30  1075            db '03:03:15'
     333A3135
0053 00        1076            db 0x00
0054           1077   __str_5:
0054 256C66    1078            db '%lf'
0057 0A        1079            db 0x0A
0058 00        1080            db 0x00
0059           1081   __str_6:
0059 4D617820  1082            db 'Max Amp @p2.1=%7.5fV, Max Amp @p2.2=%7.5fV,'
     416D7020
     4070322E
     313D2537
     2E356656
     2C204D61
     7820416D
     70204070
     322E323D
     25372E35
     66562C
0084 0D        1083            db 0x0D
0085 00        1084            db 0x00
0086           1085   
0003           1086            CSEG
0003           1087   
0003           1088   end
