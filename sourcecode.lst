0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 05 21:34:28 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _Get_ADC
0000             32            public _ADC_at_Pin
0000             33            public _InitPinADC
0000             34            public _waitms
0000             35            public _Timer3us
0000             36            public _InitADC
0000             37            public __c51_external_startup
0000             38            public _v2
0000             39            public _v1
0000             40            public _v2_max
0000             41            public _v1_max
0000             42            public _v2_last
0000             43            public _v1_last
0000             44            public _Period
0000             45            public _F
0000             46            public _count
0000             47            public _overflow_count
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _overflow_count:
0000            497            ds 1
0001            498   _count:
0001            499            ds 2
0003            500   _F:
0003            501            ds 4
0007            502   _Period:
0007            503            ds 4
000B            504   _v1_last:
000B            505            ds 4
000F            506   _v2_last:
000F            507            ds 4
0013            508   _v1_max:
0013            509            ds 4
0017            510   _v2_max:
0017            511            ds 4
001B            512   _v1:
001B            513            ds 4
001F            514   _v2:
001F            515            ds 4
0023            516   _main_period_1_63:
0023            517            ds 4
0027            518   _main_sloc0_1_0:
0027            519            ds 4
002B            520   _main_sloc1_1_0:
002B            521            ds 2
002D            522   ;--------------------------------------------------------
002D            523   ; overlayable items in internal ram 
002D            524   ;--------------------------------------------------------
0000            525            rseg    R_OSEG
0000            526            rseg    R_OSEG
0000            527   _InitPinADC_PARM_2:
0000            528            ds 1
0001            529            rseg    R_OSEG
0001            530   ;--------------------------------------------------------
0001            531   ; indirectly addressable internal ram data
0001            532   ;--------------------------------------------------------
0000            533            rseg R_ISEG
0000            534   ;--------------------------------------------------------
0000            535   ; absolute internal ram data
0000            536   ;--------------------------------------------------------
0000            537            DSEG
0000            538   ;--------------------------------------------------------
0000            539   ; bit data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_BSEG
0000            542   ;--------------------------------------------------------
0000            543   ; paged external ram data
0000            544   ;--------------------------------------------------------
0000            545            rseg R_PSEG
0000            546   ;--------------------------------------------------------
0000            547   ; external ram data
0000            548   ;--------------------------------------------------------
0000            549            rseg R_XSEG
0000            550   ;--------------------------------------------------------
0000            551   ; absolute external ram data
0000            552   ;--------------------------------------------------------
0000            553            XSEG
0000            554   ;--------------------------------------------------------
0000            555   ; external initialized ram data
0000            556   ;--------------------------------------------------------
0000            557            rseg R_IXSEG
0000            558            rseg R_HOME
0000            559            rseg R_GSINIT
0000            560            rseg R_CSEG
0000            561   ;--------------------------------------------------------
0000            562   ; Reset entry point and interrupt vectors
0000            563   ;--------------------------------------------------------
0000            564            CSEG at 0x0000
0000 020000     565            ljmp    _crt0
0003            566   ;--------------------------------------------------------
0003            567   ; global & static initialisations
0003            568   ;--------------------------------------------------------
0000            569            rseg R_HOME
0000            570            rseg R_GSINIT
0000            571            rseg R_GSINIT
0000            572   ;--------------------------------------------------------
0000            573   ; data variables initialization
0000            574   ;--------------------------------------------------------
0000            575            rseg R_DINIT
0000            576   ;        sourcecode.c:14: unsigned int count = 0;
0000 E4         577            clr     a
0001 F558       578            mov     _count,a
0003 F559       579            mov     (_count + 1),a
0005            580   ;        sourcecode.c:18: float v1_last = 0; float v2_last = 0; float v1_max = 0; float v2_max = 0;
0005 759800     581            mov     _v1_last,#0x00
0008 759900     582            mov     (_v1_last + 1),#0x00
000B 759A00     583            mov     (_v1_last + 2),#0x00
000E 759B00     584            mov     (_v1_last + 3),#0x00
0011            585   ;        sourcecode.c:18: float v1 = 0; float v2 = 0;
0011 755800     586            mov     _v2_last,#0x00
0014 755900     587            mov     (_v2_last + 1),#0x00
0017 755A00     588            mov     (_v2_last + 2),#0x00
001A 755B00     589            mov     (_v2_last + 3),#0x00
001D            590   ;        sourcecode.c:18: float v1_last = 0; float v2_last = 0; float v1_max = 0; float v2_max = 0;
001D 751800     591            mov     _v1_max,#0x00
0020 751900     592            mov     (_v1_max + 1),#0x00
0023 751A00     593            mov     (_v1_max + 2),#0x00
0026 751B00     594            mov     (_v1_max + 3),#0x00
0029            595   ;        sourcecode.c:18: float v1 = 0; float v2 = 0;
0029 75D800     596            mov     _v2_max,#0x00
002C 75D900     597            mov     (_v2_max + 1),#0x00
002F 75DA00     598            mov     (_v2_max + 2),#0x00
0032 75DB00     599            mov     (_v2_max + 3),#0x00
0035            600   ;        sourcecode.c:19: 
0035 759800     601            mov     _v1,#0x00
0038 759900     602            mov     (_v1 + 1),#0x00
003B 759A00     603            mov     (_v1 + 2),#0x00
003E 759B00     604            mov     (_v1 + 3),#0x00
0041            605   ;        sourcecode.c:19: float v1 = 0; float v2 = 0;
0041 755800     606            mov     _v2,#0x00
0044 755900     607            mov     (_v2 + 1),#0x00
0047 755A00     608            mov     (_v2 + 2),#0x00
004A 755B00     609            mov     (_v2 + 3),#0x00
004D            610            ; The linker places a 'ret' at the end of segment R_DINIT.
004D            611   ;--------------------------------------------------------
004D            612   ; code
004D            613   ;--------------------------------------------------------
0000            614            rseg R_CSEG
0000            615   ;------------------------------------------------------------
0000            616   ;Allocation info for local variables in function '_c51_external_startup'
0000            617   ;------------------------------------------------------------
0000            618   ;------------------------------------------------------------
0000            619   ;        sourcecode.c:21: char _c51_external_startup (void)
0000            620   ;        -----------------------------------------
0000            621   ;         function _c51_external_startup
0000            622   ;        -----------------------------------------
0000            623   __c51_external_startup:
0000            624            using   0
0000            625   ;        sourcecode.c:24: SFRPAGE = 0x00;
0000 75A700     626            mov     _SFRPAGE,#0x00
0003            627   ;        sourcecode.c:25: WDTCN = 0xDE; //First key
0003 7597DE     628            mov     _WDTCN,#0xDE
0006            629   ;        sourcecode.c:26: WDTCN = 0xAD; //Second key
0006 7597AD     630            mov     _WDTCN,#0xAD
0009            631   ;        sourcecode.c:28: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     632            mov     _VDM0CN,#0x80
000C            633   ;        sourcecode.c:29: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     634            mov     _RSTSRC,#0x06
000F            635   ;        sourcecode.c:36: SFRPAGE = 0x10;
000F 75A710     636            mov     _SFRPAGE,#0x10
0012            637   ;        sourcecode.c:37: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     638            mov     _PFE0CN,#0x20
0015            639   ;        sourcecode.c:38: SFRPAGE = 0x00;
0015 75A700     640            mov     _SFRPAGE,#0x00
0018            641   ;        sourcecode.c:59: CLKSEL = 0x00;
0018 75A900     642            mov     _CLKSEL,#0x00
001B            643   ;        sourcecode.c:60: CLKSEL = 0x00;
001B 75A900     644            mov     _CLKSEL,#0x00
001E            645   ;        sourcecode.c:61: while ((CLKSEL & 0x80) == 0);
001E            646   L002001?:
001E E5A9       647            mov     a,_CLKSEL
0020 30E738     648            jnb     acc.7,L002001?
0023            649   ;        sourcecode.c:62: CLKSEL = 0x03;
0023 75A903     650            mov     _CLKSEL,#0x03
0026            651   ;        sourcecode.c:63: CLKSEL = 0x03;
0026 75A903     652            mov     _CLKSEL,#0x03
0029            653   ;        sourcecode.c:64: while ((CLKSEL & 0x80) == 0);
0029            654   L002004?:
0029 E5A9       655            mov     a,_CLKSEL
002B 30E7B8     656            jnb     acc.7,L002004?
002E            657   ;        sourcecode.c:69: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     658            orl     _P0MDOUT,#0x10
0031            659   ;        sourcecode.c:70: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     660            mov     _XBR0,#0x01
0034            661   ;        sourcecode.c:71: XBR1     = 0X00;
0034 75E200     662            mov     _XBR1,#0x00
0037            663   ;        sourcecode.c:72: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     664            mov     _XBR2,#0x40
003A            665   ;        sourcecode.c:78: SCON0 = 0x10;
003A 759810     666            mov     _SCON0,#0x10
003D            667   ;        sourcecode.c:79: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     668            mov     _TH1,#0xE6
0040            669   ;        sourcecode.c:80: TL1 = TH1;      // Init Timer1
0040 858D8B     670            mov     _TL1,_TH1
0043            671   ;        sourcecode.c:81: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     672            anl     _TMOD,#0x0F
0046            673   ;        sourcecode.c:82: TMOD |=  0x20;                       
0046 438920     674            orl     _TMOD,#0x20
0049            675   ;        sourcecode.c:83: TR1 = 1; // START Timer1
0049 D28E       676            setb    _TR1
004B            677   ;        sourcecode.c:84: TI = 1;  // Indicate TX0 ready
004B D299       678            setb    _TI
004D            679   ;        sourcecode.c:86: return 0;
004D 758200     680            mov     dpl,#0x00
0050 22         681            ret
0051            682   ;------------------------------------------------------------
0051            683   ;Allocation info for local variables in function 'InitADC'
0051            684   ;------------------------------------------------------------
0051            685   ;------------------------------------------------------------
0051            686   ;        sourcecode.c:89: void InitADC (void)
0051            687   ;        -----------------------------------------
0051            688   ;         function InitADC
0051            689   ;        -----------------------------------------
0051            690   _InitADC:
0051            691   ;        sourcecode.c:91: SFRPAGE = 0x00;
0051 75A700     692            mov     _SFRPAGE,#0x00
0054            693   ;        sourcecode.c:92: ADEN=0; // Disable ADC
0054 C2EF       694            clr     _ADEN
0056            695   ;        sourcecode.c:97: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     696            mov     _ADC0CN1,#0x80
0059            697   ;        sourcecode.c:101: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     698            mov     _ADC0CF0,#0x20
005C            699   ;        sourcecode.c:105: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     700            mov     _ADC0CF1,#0x1E
005F            701   ;        sourcecode.c:114: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     702            mov     _ADC0CN0,#0x00
0062            703   ;        sourcecode.c:119: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     704            mov     _ADC0CF2,#0x3F
0065            705   ;        sourcecode.c:123: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     706            mov     _ADC0CN2,#0x00
0068            707   ;        sourcecode.c:125: ADEN=1; // Enable ADC
0068 D2EF       708            setb    _ADEN
006A 22         709            ret
006B            710   ;------------------------------------------------------------
006B            711   ;Allocation info for local variables in function 'Timer3us'
006B            712   ;------------------------------------------------------------
006B            713   ;us                        Allocated to registers r2 
006B            714   ;i                         Allocated to registers r3 
006B            715   ;------------------------------------------------------------
006B            716   ;        sourcecode.c:129: void Timer3us(unsigned char us)
006B            717   ;        -----------------------------------------
006B            718   ;         function Timer3us
006B            719   ;        -----------------------------------------
006B            720   _Timer3us:
006B AA82       721            mov     r2,dpl
006D            722   ;        sourcecode.c:134: CKCON0|=0b_0100_0000;
006D 438E40     723            orl     _CKCON0,#0x40
0070            724   ;        sourcecode.c:136: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     725            mov     _TMR3RL,#0xB8
0073 7593FF     726            mov     (_TMR3RL >> 8),#0xFF
0076            727   ;        sourcecode.c:137: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     728            mov     _TMR3,_TMR3RL
0079 859395     729            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            730   ;        sourcecode.c:139: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     731            mov     _TMR3CN0,#0x04
007F            732   ;        sourcecode.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       733            mov     r3,#0x00
0081            734   L004004?:
0081 C3         735            clr     c
0082 EB         736            mov     a,r3
0083 9A         737            subb    a,r2
0084 5000       738            jnc     L004007?
0086            739   ;        sourcecode.c:142: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            740   L004001?:
0086 E591       741            mov     a,_TMR3CN0
0088 30E7B8     742            jnb     acc.7,L004001?
008B            743   ;        sourcecode.c:143: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     744            anl     _TMR3CN0,#0x7F
008E            745   ;        sourcecode.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         746            inc     r3
008F 8000       747            sjmp    L004004?
0091            748   L004007?:
0091            749   ;        sourcecode.c:145: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     750            mov     _TMR3CN0,#0x00
0094 22         751            ret
0095            752   ;------------------------------------------------------------
0095            753   ;Allocation info for local variables in function 'waitms'
0095            754   ;------------------------------------------------------------
0095            755   ;ms                        Allocated to registers r2 r3 
0095            756   ;j                         Allocated to registers r4 r5 
0095            757   ;k                         Allocated to registers r6 
0095            758   ;------------------------------------------------------------
0095            759   ;        sourcecode.c:148: void waitms (unsigned int ms)
0095            760   ;        -----------------------------------------
0095            761   ;         function waitms
0095            762   ;        -----------------------------------------
0095            763   _waitms:
0095 AA82       764            mov     r2,dpl
0097 AB83       765            mov     r3,dph
0099            766   ;        sourcecode.c:152: for(j=0; j<ms; j++)
0099 7C00       767            mov     r4,#0x00
009B 7D00       768            mov     r5,#0x00
009D            769   L005005?:
009D C3         770            clr     c
009E EC         771            mov     a,r4
009F 9A         772            subb    a,r2
00A0 ED         773            mov     a,r5
00A1 9B         774            subb    a,r3
00A2 5000       775            jnc     L005009?
00A4            776   ;        sourcecode.c:153: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       777            mov     r6,#0x00
00A6            778   L005001?:
00A6 BE04F8     779            cjne    r6,#0x04,L005018?
00A9            780   L005018?:
00A9 5000       781            jnc     L005007?
00AB 7582FA     782            mov     dpl,#0xFA
00AE C002       783            push    ar2
00B0 C003       784            push    ar3
00B2 C004       785            push    ar4
00B4 C005       786            push    ar5
00B6 C006       787            push    ar6
00B8 120000     788            lcall   _Timer3us
00BB D006       789            pop     ar6
00BD D005       790            pop     ar5
00BF D004       791            pop     ar4
00C1 D003       792            pop     ar3
00C3 D002       793            pop     ar2
00C5 0E         794            inc     r6
00C6 8000       795            sjmp    L005001?
00C8            796   L005007?:
00C8            797   ;        sourcecode.c:152: for(j=0; j<ms; j++)
00C8 0C         798            inc     r4
00C9 BC0038     799            cjne    r4,#0x00,L005005?
00CC 0D         800            inc     r5
00CD 8000       801            sjmp    L005005?
00CF            802   L005009?:
00CF 22         803            ret
00D0            804   ;------------------------------------------------------------
00D0            805   ;Allocation info for local variables in function 'InitPinADC'
00D0            806   ;------------------------------------------------------------
00D0            807   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            808   ;portno                    Allocated to registers r2 
00D0            809   ;mask                      Allocated to registers r3 
00D0            810   ;------------------------------------------------------------
00D0            811   ;        sourcecode.c:158: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            812   ;        -----------------------------------------
00D0            813   ;         function InitPinADC
00D0            814   ;        -----------------------------------------
00D0            815   _InitPinADC:
00D0 AA82       816            mov     r2,dpl
00D2            817   ;        sourcecode.c:162: mask=1<<pinno;
00D2 8588F0     818            mov     b,_InitPinADC_PARM_2
00D5 05F0       819            inc     b
00D7 7401       820            mov     a,#0x01
00D9 8000       821            sjmp    L006013?
00DB            822   L006011?:
00DB 25E0       823            add     a,acc
00DD            824   L006013?:
00DD D5F0F8     825            djnz    b,L006011?
00E0 FB         826            mov     r3,a
00E1            827   ;        sourcecode.c:164: SFRPAGE = 0x20;
00E1 75A720     828            mov     _SFRPAGE,#0x20
00E4            829   ;        sourcecode.c:165: switch (portno)
00E4 BA0038     830            cjne    r2,#0x00,L006014?
00E7 8000       831            sjmp    L006001?
00E9            832   L006014?:
00E9 BA01B8     833            cjne    r2,#0x01,L006015?
00EC 8000       834            sjmp    L006002?
00EE            835   L006015?:
00EE            836   ;        sourcecode.c:167: case 0:
00EE BA0238     837            cjne    r2,#0x02,L006005?
00F1 8000       838            sjmp    L006003?
00F3            839   L006001?:
00F3            840   ;        sourcecode.c:168: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         841            mov     a,r3
00F4 F4         842            cpl     a
00F5 FA         843            mov     r2,a
00F6 52F1       844            anl     _P0MDIN,a
00F8            845   ;        sourcecode.c:169: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         846            mov     a,r3
00F9 42D4       847            orl     _P0SKIP,a
00FB            848   ;        sourcecode.c:170: break;
00FB            849   ;        sourcecode.c:171: case 1:
00FB 8000       850            sjmp    L006005?
00FD            851   L006002?:
00FD            852   ;        sourcecode.c:172: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         853            mov     a,r3
00FE F4         854            cpl     a
00FF FA         855            mov     r2,a
0100 52F2       856            anl     _P1MDIN,a
0102            857   ;        sourcecode.c:173: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         858            mov     a,r3
0103 42D5       859            orl     _P1SKIP,a
0105            860   ;        sourcecode.c:174: break;
0105            861   ;        sourcecode.c:175: case 2:
0105 8000       862            sjmp    L006005?
0107            863   L006003?:
0107            864   ;        sourcecode.c:176: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         865            mov     a,r3
0108 F4         866            cpl     a
0109 FA         867            mov     r2,a
010A 52F3       868            anl     _P2MDIN,a
010C            869   ;        sourcecode.c:177: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         870            mov     a,r3
010D 42CC       871            orl     _P2SKIP,a
010F            872   ;        sourcecode.c:181: }
010F            873   L006005?:
010F            874   ;        sourcecode.c:182: SFRPAGE = 0x00;
010F 75A700     875            mov     _SFRPAGE,#0x00
0112 22         876            ret
0113            877   ;------------------------------------------------------------
0113            878   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            879   ;------------------------------------------------------------
0113            880   ;pin                       Allocated to registers 
0113            881   ;------------------------------------------------------------
0113            882   ;        sourcecode.c:185: unsigned int ADC_at_Pin(unsigned char pin)
0113            883   ;        -----------------------------------------
0113            884   ;         function ADC_at_Pin
0113            885   ;        -----------------------------------------
0113            886   _ADC_at_Pin:
0113 8582BB     887            mov     _ADC0MX,dpl
0116            888   ;        sourcecode.c:188: ADINT = 0;
0116 C2ED       889            clr     _ADINT
0118            890   ;        sourcecode.c:189: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       891            setb    _ADBUSY
011A            892   ;        sourcecode.c:190: while (!ADINT); // Wait for conversion to complete
011A            893   L007001?:
011A 30EDB8     894            jnb     _ADINT,L007001?
011D            895   ;        sourcecode.c:191: return (ADC0);
011D 85BD82     896            mov     dpl,_ADC0
0120 85BE83     897            mov     dph,(_ADC0 >> 8)
0123 22         898            ret
0124            899   ;------------------------------------------------------------
0124            900   ;Allocation info for local variables in function 'Get_ADC'
0124            901   ;------------------------------------------------------------
0124            902   ;------------------------------------------------------------
0124            903   ;        sourcecode.c:194: unsigned int Get_ADC (void)
0124            904   ;        -----------------------------------------
0124            905   ;         function Get_ADC
0124            906   ;        -----------------------------------------
0124            907   _Get_ADC:
0124            908   ;        sourcecode.c:196: ADINT = 0;
0124 C2ED       909            clr     _ADINT
0126            910   ;        sourcecode.c:197: ADBUSY = 1;
0126 D2EC       911            setb    _ADBUSY
0128            912   ;        sourcecode.c:198: while (!ADINT); // Wait for conversion to complete
0128            913   L008001?:
0128 30ED00     914            jnb     _ADINT,L008001?
012B            915   ;        sourcecode.c:199: return (ADC0);
012B 85BD82     916            mov     dpl,_ADC0
012E 85BE83     917            mov     dph,(_ADC0 >> 8)
0131 22         918            ret
0132            919   ;------------------------------------------------------------
0132            920   ;Allocation info for local variables in function 'Volts_at_Pin'
0132            921   ;------------------------------------------------------------
0132            922   ;pin                       Allocated to registers r2 
0132            923   ;------------------------------------------------------------
0132            924   ;        sourcecode.c:202: float Volts_at_Pin(unsigned char pin)
0132            925   ;        -----------------------------------------
0132            926   ;         function Volts_at_Pin
0132            927   ;        -----------------------------------------
0132            928   _Volts_at_Pin:
0132            929   ;        sourcecode.c:204: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0132 120000     930            lcall   _ADC_at_Pin
0135 120000     931            lcall   ___uint2fs
0138 AA82       932            mov     r2,dpl
013A AB83       933            mov     r3,dph
013C ACF0       934            mov     r4,b
013E FD         935            mov     r5,a
013F C002       936            push    ar2
0141 C003       937            push    ar3
0143 C004       938            push    ar4
0145 C005       939            push    ar5
0147 90923A     940            mov     dptr,#0x923A
014A 75F053     941            mov     b,#0x53
014D 7440       942            mov     a,#0x40
014F 120000     943            lcall   ___fsmul
0152 AA82       944            mov     r2,dpl
0154 AB83       945            mov     r3,dph
0156 ACF0       946            mov     r4,b
0158 FD         947            mov     r5,a
0159 E581       948            mov     a,sp
015B 24FC       949            add     a,#0xfc
015D F581       950            mov     sp,a
015F E4         951            clr     a
0160 C0E0       952            push    acc
0162 74FC       953            mov     a,#0xFC
0164 C0E0       954            push    acc
0166 747F       955            mov     a,#0x7F
0168 C0E0       956            push    acc
016A 7446       957            mov     a,#0x46
016C C0E0       958            push    acc
016E 8A82       959            mov     dpl,r2
0170 8B83       960            mov     dph,r3
0172 8CF0       961            mov     b,r4
0174 ED         962            mov     a,r5
0175 120000     963            lcall   ___fsdiv
0178 AA82       964            mov     r2,dpl
017A AB83       965            mov     r3,dph
017C ACF0       966            mov     r4,b
017E FD         967            mov     r5,a
017F E581       968            mov     a,sp
0181 24FC       969            add     a,#0xfc
0183 F581       970            mov     sp,a
0185 8A82       971            mov     dpl,r2
0187 8B83       972            mov     dph,r3
0189 8CF0       973            mov     b,r4
018B ED         974            mov     a,r5
018C 22         975            ret
018D            976   ;------------------------------------------------------------
018D            977   ;Allocation info for local variables in function 'TIMER0_Init'
018D            978   ;------------------------------------------------------------
018D            979   ;------------------------------------------------------------
018D            980   ;        sourcecode.c:207: void TIMER0_Init(void)
018D            981   ;        -----------------------------------------
018D            982   ;         function TIMER0_Init
018D            983   ;        -----------------------------------------
018D            984   _TIMER0_Init:
018D            985   ;        sourcecode.c:209: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
018D 5389F0     986            anl     _TMOD,#0xF0
0190            987   ;        sourcecode.c:210: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0190 438901     988            orl     _TMOD,#0x01
0193            989   ;        sourcecode.c:211: TR0=0; // Stop Timer/Counter 0
0193 C28C       990            clr     _TR0
0195 22         991            ret
0196            992   ;------------------------------------------------------------
0196            993   ;Allocation info for local variables in function 'main'
0196            994   ;------------------------------------------------------------
0196            995   ;period                    Allocated with name '_main_period_1_63'
0196            996   ;Phase_Shift               Allocated with name '_main_Phase_Shift_1_63'
0196            997   ;time_difference           Allocated with name '_main_time_difference_1_63'
0196            998   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0196            999   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0196           1000   ;------------------------------------------------------------
0196           1001   ;        sourcecode.c:220: void main (void)
0196           1002   ;        -----------------------------------------
0196           1003   ;         function main
0196           1004   ;        -----------------------------------------
0196           1005   _main:
0196           1006   ;        sourcecode.c:226: TIMER0_Init();
0196 120000    1007            lcall   _TIMER0_Init
0199           1008   ;        sourcecode.c:228: waitms(500); // Give PuTTy a chance to start before sending
0199 9001F4    1009            mov     dptr,#0x01F4
019C 120000    1010            lcall   _waitms
019F           1011   ;        sourcecode.c:229: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
019F 7440      1012            mov     a,#__str_0
01A1 C0E0      1013            push    acc
01A3 74C1      1014            mov     a,#(__str_0 >> 8)
01A5 C0E0      1015            push    acc
01A7 7480      1016            mov     a,#0x80
01A9 C0E0      1017            push    acc
01AB 120000    1018            lcall   _printf
01AE 1581      1019            dec     sp
01B0 1581      1020            dec     sp
01B2 1581      1021            dec     sp
01B4           1022   ;        sourcecode.c:234: __FILE__, __DATE__, __TIME__);
01B4           1023   ;        sourcecode.c:233: "Compiled: %s, %s\n\n",
01B4 74C0      1024            mov     a,#__str_4
01B6 C0E0      1025            push    acc
01B8 74C1      1026            mov     a,#(__str_4 >> 8)
01BA C0E0      1027            push    acc
01BC 7480      1028            mov     a,#0x80
01BE C0E0      1029            push    acc
01C0 7400      1030            mov     a,#__str_3
01C2 C0E0      1031            push    acc
01C4 74C2      1032            mov     a,#(__str_3 >> 8)
01C6 C0E0      1033            push    acc
01C8 7480      1034            mov     a,#0x80
01CA C0E0      1035            push    acc
01CC 7440      1036            mov     a,#__str_2
01CE C0E0      1037            push    acc
01D0 74C2      1038            mov     a,#(__str_2 >> 8)
01D2 C0E0      1039            push    acc
01D4 7480      1040            mov     a,#0x80
01D6 C0E0      1041            push    acc
01D8 7480      1042            mov     a,#__str_1
01DA C0E0      1043            push    acc
01DC 74C2      1044            mov     a,#(__str_1 >> 8)
01DE C0E0      1045            push    acc
01E0 7480      1046            mov     a,#0x80
01E2 C0E0      1047            push    acc
01E4 120000    1048            lcall   _printf
01E7 E581      1049            mov     a,sp
01E9 24F4      1050            add     a,#0xf4
01EB F581      1051            mov     sp,a
01ED           1052   ;        sourcecode.c:236: InitPinADC(2, 1); // Configure P2.1 as analog input
01ED 758801    1053            mov     _InitPinADC_PARM_2,#0x01
01F0 758202    1054            mov     dpl,#0x02
01F3 120000    1055            lcall   _InitPinADC
01F6           1056   ;        sourcecode.c:237: InitPinADC(2, 2); // Configure P2.2 as analog input
01F6 758802    1057            mov     _InitPinADC_PARM_2,#0x02
01F9 758202    1058            mov     dpl,#0x02
01FC 120000    1059            lcall   _InitPinADC
01FF           1060   ;        sourcecode.c:239: InitADC();
01FF 120000    1061            lcall   _InitADC
0202           1062   ;        sourcecode.c:241: while(1)
0202           1063   L011022?:
0202           1064   ;        sourcecode.c:276: TL0=0; 
0202 758A00    1065            mov     _TL0,#0x00
0205           1066   ;        sourcecode.c:277: TH0=0;
0205 758C00    1067            mov     _TH0,#0x00
0208           1068   ;        sourcecode.c:278: TF0=0;
0208 C28D      1069            clr     _TF0
020A           1070   ;        sourcecode.c:279: overflow_count=0;
020A 759800    1071            mov     _overflow_count,#0x00
020D           1072   ;        sourcecode.c:281: while(P0_6 !=0); // Wait for the signal to be zero
020D           1073   L011001?:
020D 208600    1074            jb      _P0_6,L011001?
0210           1075   ;        sourcecode.c:282: while(P0_6 !=1)
0210           1076   L011004?:
0210 208680    1077            jb      _P0_6,L011009?
0213           1078   ;        sourcecode.c:284: TR0=1; // Start the timer
0213 D28C      1079            setb    _TR0
0215           1080   ;        sourcecode.c:285: while(P0_6 !=0) // Wait for the signal to be zero
0215 8000      1081            sjmp    L011004?
0217           1082   L011009?:
0217 3086C0    1083            jnb     _P0_6,L011014?
021A           1084   ;        sourcecode.c:287: if(TF0==1) // Did the 16-bit timer overflow?
021A           1085   ;        sourcecode.c:289: TF0=0;
021A 108D00    1086            jbc     _TF0,L011041?
021D 8000      1087            sjmp    L011009?
021F           1088   L011041?:
021F           1089   ;        sourcecode.c:290: overflow_count++;
021F 0598      1090            inc     _overflow_count
0221           1091   ;        sourcecode.c:293: while(P0_6!=1) // Wait for the signal to be one
0221 8000      1092            sjmp    L011009?
0223           1093   L011014?:
0223 208640    1094            jb      _P0_6,L011016?
0226           1095   ;        sourcecode.c:295: if(TF0==1) // Did the 16-bit timer overflow?
0226           1096   ;        sourcecode.c:297: TF0=0;
0226 108D80    1097            jbc     _TF0,L011043?
0229 8000      1098            sjmp    L011014?
022B           1099   L011043?:
022B           1100   ;        sourcecode.c:298: overflow_count++;
022B 0598      1101            inc     _overflow_count
022D 8000      1102            sjmp    L011014?
022F           1103   L011016?:
022F           1104   ;        sourcecode.c:301: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
022F C28C      1105            clr     _TR0
0231           1106   ;        sourcecode.c:304: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0231 859882    1107            mov     dpl,_overflow_count
0234 120000    1108            lcall   ___uchar2fs
0237 AA82      1109            mov     r2,dpl
0239 AB83      1110            mov     r3,dph
023B ACF0      1111            mov     r4,b
023D FD        1112            mov     r5,a
023E C002      1113            push    ar2
0240 C003      1114            push    ar3
0242 C004      1115            push    ar4
0244 C005      1116            push    ar5
0246 900000    1117            mov     dptr,#0x0000
0249 75F080    1118            mov     b,#0x80
024C 7447      1119            mov     a,#0x47
024E 120000    1120            lcall   ___fsmul
0251 AA82      1121            mov     r2,dpl
0253 AB83      1122            mov     r3,dph
0255 ACF0      1123            mov     r4,b
0257 FD        1124            mov     r5,a
0258 E581      1125            mov     a,sp
025A 24FC      1126            add     a,#0xfc
025C F581      1127            mov     sp,a
025E 858C82    1128            mov     dpl,_TH0
0261 C002      1129            push    ar2
0263 C003      1130            push    ar3
0265 C004      1131            push    ar4
0267 C005      1132            push    ar5
0269 120000    1133            lcall   ___uchar2fs
026C AE82      1134            mov     r6,dpl
026E AF83      1135            mov     r7,dph
0270 A8F0      1136            mov     r0,b
0272 F9        1137            mov     r1,a
0273 C006      1138            push    ar6
0275 C007      1139            push    ar7
0277 C000      1140            push    ar0
0279 C001      1141            push    ar1
027B 900000    1142            mov     dptr,#0x0000
027E 75F080    1143            mov     b,#0x80
0281 7443      1144            mov     a,#0x43
0283 120000    1145            lcall   ___fsmul
0286 AE82      1146            mov     r6,dpl
0288 AF83      1147            mov     r7,dph
028A A8F0      1148            mov     r0,b
028C F9        1149            mov     r1,a
028D E581      1150            mov     a,sp
028F 24FC      1151            add     a,#0xfc
0291 F581      1152            mov     sp,a
0293 D005      1153            pop     ar5
0295 D004      1154            pop     ar4
0297 D003      1155            pop     ar3
0299 D002      1156            pop     ar2
029B C006      1157            push    ar6
029D C007      1158            push    ar7
029F C000      1159            push    ar0
02A1 C001      1160            push    ar1
02A3 8A82      1161            mov     dpl,r2
02A5 8B83      1162            mov     dph,r3
02A7 8CF0      1163            mov     b,r4
02A9 ED        1164            mov     a,r5
02AA 120000    1165            lcall   ___fsadd
02AD AA82      1166            mov     r2,dpl
02AF AB83      1167            mov     r3,dph
02B1 ACF0      1168            mov     r4,b
02B3 FD        1169            mov     r5,a
02B4 E581      1170            mov     a,sp
02B6 24FC      1171            add     a,#0xfc
02B8 F581      1172            mov     sp,a
02BA AE8A      1173            mov     r6,_TL0
02BC 7F00      1174            mov     r7,#0x00
02BE 8E82      1175            mov     dpl,r6
02C0 8F83      1176            mov     dph,r7
02C2 C002      1177            push    ar2
02C4 C003      1178            push    ar3
02C6 C004      1179            push    ar4
02C8 C005      1180            push    ar5
02CA 120000    1181            lcall   ___sint2fs
02CD AE82      1182            mov     r6,dpl
02CF AF83      1183            mov     r7,dph
02D1 A8F0      1184            mov     r0,b
02D3 F9        1185            mov     r1,a
02D4 D005      1186            pop     ar5
02D6 D004      1187            pop     ar4
02D8 D003      1188            pop     ar3
02DA D002      1189            pop     ar2
02DC C006      1190            push    ar6
02DE C007      1191            push    ar7
02E0 C000      1192            push    ar0
02E2 C001      1193            push    ar1
02E4 8A82      1194            mov     dpl,r2
02E6 8B83      1195            mov     dph,r3
02E8 8CF0      1196            mov     b,r4
02EA ED        1197            mov     a,r5
02EB 120000    1198            lcall   ___fsadd
02EE AA82      1199            mov     r2,dpl
02F0 AB83      1200            mov     r3,dph
02F2 ACF0      1201            mov     r4,b
02F4 FD        1202            mov     r5,a
02F5 E581      1203            mov     a,sp
02F7 24FC      1204            add     a,#0xfc
02F9 F581      1205            mov     sp,a
02FB C002      1206            push    ar2
02FD C003      1207            push    ar3
02FF C004      1208            push    ar4
0301 C005      1209            push    ar5
0303 90F4FC    1210            mov     dptr,#0xF4FC
0306 75F032    1211            mov     b,#0x32
0309 7434      1212            mov     a,#0x34
030B 120000    1213            lcall   ___fsmul
030E 858238    1214            mov     _main_period_1_63,dpl
0311 858339    1215            mov     (_main_period_1_63 + 1),dph
0314 85F03A    1216            mov     (_main_period_1_63 + 2),b
0317 F53B      1217            mov     (_main_period_1_63 + 3),a
0319 E581      1218            mov     a,sp
031B 24FC      1219            add     a,#0xfc
031D F581      1220            mov     sp,a
031F           1221   ;        sourcecode.c:306: printf( " T=%5.5fms,  logic P0_6:%d, V@P2_1:%3.3f, V@P2_2:%3.3f \r", period*1000.0, P0_6, Volts_at_Pin(QFP32_MUX_P2_1), Volts_at_Pin(QFP32_MUX_P2_2));
031F 75820F    1222            mov     dpl,#0x0F
0322 120000    1223            lcall   _Volts_at_Pin
0325 AE82      1224            mov     r6,dpl
0327 AF83      1225            mov     r7,dph
0329 A8F0      1226            mov     r0,b
032B F9        1227            mov     r1,a
032C 75820E    1228            mov     dpl,#0x0E
032F C006      1229            push    ar6
0331 C007      1230            push    ar7
0333 C000      1231            push    ar0
0335 C001      1232            push    ar1
0337 120000    1233            lcall   _Volts_at_Pin
033A 858278    1234            mov     _main_sloc0_1_0,dpl
033D 858379    1235            mov     (_main_sloc0_1_0 + 1),dph
0340 85F07A    1236            mov     (_main_sloc0_1_0 + 2),b
0343 F57B      1237            mov     (_main_sloc0_1_0 + 3),a
0345 A286      1238            mov     c,_P0_6
0347 E4        1239            clr     a
0348 33        1240            rlc     a
0349 F5B8      1241            mov     _main_sloc1_1_0,a
034B 75B900    1242            mov     (_main_sloc1_1_0 + 1),#0x00
034E C038      1243            push    _main_period_1_63
0350 C039      1244            push    (_main_period_1_63 + 1)
0352 C03A      1245            push    (_main_period_1_63 + 2)
0354 C03B      1246            push    (_main_period_1_63 + 3)
0356 900000    1247            mov     dptr,#0x0000
0359 75F07A    1248            mov     b,#0x7A
035C 7444      1249            mov     a,#0x44
035E 120000    1250            lcall   ___fsmul
0361 AC82      1251            mov     r4,dpl
0363 AD83      1252            mov     r5,dph
0365 AAF0      1253            mov     r2,b
0367 FB        1254            mov     r3,a
0368 E581      1255            mov     a,sp
036A 24FC      1256            add     a,#0xfc
036C F581      1257            mov     sp,a
036E C078      1258            push    _main_sloc0_1_0
0370 C079      1259            push    (_main_sloc0_1_0 + 1)
0372 C07A      1260            push    (_main_sloc0_1_0 + 2)
0374 C07B      1261            push    (_main_sloc0_1_0 + 3)
0376 C0B8      1262            push    _main_sloc1_1_0
0378 C0B9      1263            push    (_main_sloc1_1_0 + 1)
037A C004      1264            push    ar4
037C C005      1265            push    ar5
037E C002      1266            push    ar2
0380 C003      1267            push    ar3
0382 7480      1268            mov     a,#__str_5
0384 C0E0      1269            push    acc
0386 74C5      1270            mov     a,#(__str_5 >> 8)
0388 C0E0      1271            push    acc
038A 7480      1272            mov     a,#0x80
038C C0E0      1273            push    acc
038E 120000    1274            lcall   _printf
0391 E581      1275            mov     a,sp
0393 24EF      1276            add     a,#0xef
0395 F581      1277            mov     sp,a
0397           1278   ;        sourcecode.c:317: v1 = Volts_at_Pin(QFP32_MUX_P2_1);                            // gets the amplitude at pin 2.1
0397 75820E    1279            mov     dpl,#0x0E
039A 120000    1280            lcall   _Volts_at_Pin
039D 858298    1281            mov     _v1,dpl
03A0 858399    1282            mov     (_v1 + 1),dph
03A3 85F09A    1283            mov     (_v1 + 2),b
03A6 F59B      1284            mov     (_v1 + 3),a
03A8           1285   ;        sourcecode.c:318: if (v1 > v1_last){    // if the value higher that last time
03A8 C098      1286            push    _v1_last
03AA C099      1287            push    (_v1_last + 1)
03AC C09A      1288            push    (_v1_last + 2)
03AE C09B      1289            push    (_v1_last + 3)
03B0 859882    1290            mov     dpl,_v1
03B3 859983    1291            mov     dph,(_v1 + 1)
03B6 859AF0    1292            mov     b,(_v1 + 2)
03B9 E59B      1293            mov     a,(_v1 + 3)
03BB 120000    1294            lcall   ___fsgt
03BE AA82      1295            mov     r2,dpl
03C0 E581      1296            mov     a,sp
03C2 24FC      1297            add     a,#0xfc
03C4 F581      1298            mov     sp,a
03C6 EA        1299            mov     a,r2
03C7 6000      1300            jz      L011018?
03C9           1301   ;        sourcecode.c:319: v1_max = v1;
03C9 859818    1302            mov     _v1_max,_v1
03CC 859919    1303            mov     (_v1_max + 1),(_v1 + 1)
03CF 859A1A    1304            mov     (_v1_max + 2),(_v1 + 2)
03D2 859B1B    1305            mov     (_v1_max + 3),(_v1 + 3)
03D5           1306   L011018?:
03D5           1307   ;        sourcecode.c:321: v1_last = v1;
03D5 859898    1308            mov     _v1_last,_v1
03D8 859999    1309            mov     (_v1_last + 1),(_v1 + 1)
03DB 859A9A    1310            mov     (_v1_last + 2),(_v1 + 2)
03DE 859B9B    1311            mov     (_v1_last + 3),(_v1 + 3)
03E1           1312   ;        sourcecode.c:323: v2 = Volts_at_Pin(QFP32_MUX_P2_2);                            // gets the amplitude at pin 2.2
03E1 75820F    1313            mov     dpl,#0x0F
03E4 120000    1314            lcall   _Volts_at_Pin
03E7 858258    1315            mov     _v2,dpl
03EA 858359    1316            mov     (_v2 + 1),dph
03ED 85F05A    1317            mov     (_v2 + 2),b
03F0 F55B      1318            mov     (_v2 + 3),a
03F2           1319   ;        sourcecode.c:324: if (v2 > v2_last){
03F2 C058      1320            push    _v2_last
03F4 C059      1321            push    (_v2_last + 1)
03F6 C05A      1322            push    (_v2_last + 2)
03F8 C05B      1323            push    (_v2_last + 3)
03FA 855882    1324            mov     dpl,_v2
03FD 855983    1325            mov     dph,(_v2 + 1)
0400 855AF0    1326            mov     b,(_v2 + 2)
0403 E55B      1327            mov     a,(_v2 + 3)
0405 120000    1328            lcall   ___fsgt
0408 AA82      1329            mov     r2,dpl
040A E581      1330            mov     a,sp
040C 24FC      1331            add     a,#0xfc
040E F581      1332            mov     sp,a
0410 EA        1333            mov     a,r2
0411 6000      1334            jz      L011020?
0413           1335   ;        sourcecode.c:325: v2_max = v2;
0413 8558D8    1336            mov     _v2_max,_v2
0416 8559D9    1337            mov     (_v2_max + 1),(_v2 + 1)
0419 855ADA    1338            mov     (_v2_max + 2),(_v2 + 2)
041C 855BDB    1339            mov     (_v2_max + 3),(_v2 + 3)
041F           1340   L011020?:
041F           1341   ;        sourcecode.c:327: v2_last = v2;
041F 855858    1342            mov     _v2_last,_v2
0422 855959    1343            mov     (_v2_last + 1),(_v2 + 1)
0425 855A5A    1344            mov     (_v2_last + 2),(_v2 + 2)
0428 855B5B    1345            mov     (_v2_last + 3),(_v2 + 3)
042B           1346   ;        sourcecode.c:345: count += 1;
042B 0558      1347            inc     _count
042D E4        1348            clr     a
042E B55880    1349            cjne    a,_count,L011046?
0431 0559      1350            inc     (_count + 1)
0433           1351   L011046?:
0433 020000    1352            ljmp    L011022?
0436           1353            rseg R_CSEG
0436           1354   
0000           1355            rseg R_XINIT
0000           1356   
0000           1357            rseg R_CONST
0000           1358   __str_0:
0000 1B        1359            db 0x1B
0001 5B324A    1360            db '[2J'
0004 00        1361            db 0x00
0005           1362   __str_1:
0005 41444320  1363            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1364            db 0x0A
0016 46696C65  1365            db 'File: %s'
     3A202573
001E 0A        1366            db 0x0A
001F 436F6D70  1367            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1368            db 0x0A
0030 0A        1369            db 0x0A
0031 00        1370            db 0x00
0032           1371   __str_2:
0032 736F7572  1372            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1373            db 0x00
003F           1374   __str_3:
003F 4D617220  1375            db 'Mar  5 2024'
     20352032
     303234
004A 00        1376            db 0x00
004B           1377   __str_4:
004B 32313A33  1378            db '21:34:28'
     343A3238
0053 00        1379            db 0x00
0054           1380   __str_5:
0054 20543D25  1381            db ' T=%5.5fms,  logic P0_6:%d, V@P2_1:%3.3f, V@P2_2:%3.3f '
     352E3566
     6D732C20
     206C6F67
     69632050
     305F363A
     25642C20
     56405032
     5F313A25
     332E3366
     2C205640
     50325F32
     3A25332E
     336620
008B 0D        1382            db 0x0D
008C 00        1383            db 0x00
008D           1384   
0003           1385            CSEG
0003           1386   
0003           1387   end
