0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 03 21:12:48 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Volts_at_Pin
0000             30            public _ADC_at_Pin
0000             31            public _InitPinADC
0000             32            public _InitADC
0000             33            public _Get_ADC
0000             34            public _TIMER0_Init
0000             35            public _waitms
0000             36            public _Timer3us
0000             37            public __c51_external_startup
0000             38            public _overflow_count
0000             39   ;--------------------------------------------------------
0000             40   ; Special Function Registers
0000             41   ;--------------------------------------------------------
0000             42   _ACC            DATA 0xe0
0000             43   _ADC0ASAH       DATA 0xb6
0000             44   _ADC0ASAL       DATA 0xb5
0000             45   _ADC0ASCF       DATA 0xa1
0000             46   _ADC0ASCT       DATA 0xc7
0000             47   _ADC0CF0        DATA 0xbc
0000             48   _ADC0CF1        DATA 0xb9
0000             49   _ADC0CF2        DATA 0xdf
0000             50   _ADC0CN0        DATA 0xe8
0000             51   _ADC0CN1        DATA 0xb2
0000             52   _ADC0CN2        DATA 0xb3
0000             53   _ADC0GTH        DATA 0xc4
0000             54   _ADC0GTL        DATA 0xc3
0000             55   _ADC0H          DATA 0xbe
0000             56   _ADC0L          DATA 0xbd
0000             57   _ADC0LTH        DATA 0xc6
0000             58   _ADC0LTL        DATA 0xc5
0000             59   _ADC0MX         DATA 0xbb
0000             60   _B              DATA 0xf0
0000             61   _CKCON0         DATA 0x8e
0000             62   _CKCON1         DATA 0xa6
0000             63   _CLEN0          DATA 0xc6
0000             64   _CLIE0          DATA 0xc7
0000             65   _CLIF0          DATA 0xe8
0000             66   _CLKSEL         DATA 0xa9
0000             67   _CLOUT0         DATA 0xd1
0000             68   _CLU0CF         DATA 0xb1
0000             69   _CLU0FN         DATA 0xaf
0000             70   _CLU0MX         DATA 0x84
0000             71   _CLU1CF         DATA 0xb3
0000             72   _CLU1FN         DATA 0xb2
0000             73   _CLU1MX         DATA 0x85
0000             74   _CLU2CF         DATA 0xb6
0000             75   _CLU2FN         DATA 0xb5
0000             76   _CLU2MX         DATA 0x91
0000             77   _CLU3CF         DATA 0xbf
0000             78   _CLU3FN         DATA 0xbe
0000             79   _CLU3MX         DATA 0xae
0000             80   _CMP0CN0        DATA 0x9b
0000             81   _CMP0CN1        DATA 0x99
0000             82   _CMP0MD         DATA 0x9d
0000             83   _CMP0MX         DATA 0x9f
0000             84   _CMP1CN0        DATA 0xbf
0000             85   _CMP1CN1        DATA 0xac
0000             86   _CMP1MD         DATA 0xab
0000             87   _CMP1MX         DATA 0xaa
0000             88   _CRC0CN0        DATA 0xce
0000             89   _CRC0CN1        DATA 0x86
0000             90   _CRC0CNT        DATA 0xd3
0000             91   _CRC0DAT        DATA 0xcb
0000             92   _CRC0FLIP       DATA 0xcf
0000             93   _CRC0IN         DATA 0xca
0000             94   _CRC0ST         DATA 0xd2
0000             95   _DAC0CF0        DATA 0x91
0000             96   _DAC0CF1        DATA 0x92
0000             97   _DAC0H          DATA 0x85
0000             98   _DAC0L          DATA 0x84
0000             99   _DAC1CF0        DATA 0x93
0000            100   _DAC1CF1        DATA 0x94
0000            101   _DAC1H          DATA 0x8a
0000            102   _DAC1L          DATA 0x89
0000            103   _DAC2CF0        DATA 0x95
0000            104   _DAC2CF1        DATA 0x96
0000            105   _DAC2H          DATA 0x8c
0000            106   _DAC2L          DATA 0x8b
0000            107   _DAC3CF0        DATA 0x9a
0000            108   _DAC3CF1        DATA 0x9c
0000            109   _DAC3H          DATA 0x8e
0000            110   _DAC3L          DATA 0x8d
0000            111   _DACGCF0        DATA 0x88
0000            112   _DACGCF1        DATA 0x98
0000            113   _DACGCF2        DATA 0xa2
0000            114   _DERIVID        DATA 0xad
0000            115   _DEVICEID       DATA 0xb5
0000            116   _DPH            DATA 0x83
0000            117   _DPL            DATA 0x82
0000            118   _EIE1           DATA 0xe6
0000            119   _EIE2           DATA 0xf3
0000            120   _EIP1           DATA 0xbb
0000            121   _EIP1H          DATA 0xee
0000            122   _EIP2           DATA 0xed
0000            123   _EIP2H          DATA 0xf6
0000            124   _EMI0CN         DATA 0xe7
0000            125   _FLKEY          DATA 0xb7
0000            126   _HFO0CAL        DATA 0xc7
0000            127   _HFO1CAL        DATA 0xd6
0000            128   _HFOCN          DATA 0xef
0000            129   _I2C0ADM        DATA 0xff
0000            130   _I2C0CN0        DATA 0xba
0000            131   _I2C0DIN        DATA 0xbc
0000            132   _I2C0DOUT       DATA 0xbb
0000            133   _I2C0FCN0       DATA 0xad
0000            134   _I2C0FCN1       DATA 0xab
0000            135   _I2C0FCT        DATA 0xf5
0000            136   _I2C0SLAD       DATA 0xbd
0000            137   _I2C0STAT       DATA 0xb9
0000            138   _IE             DATA 0xa8
0000            139   _IP             DATA 0xb8
0000            140   _IPH            DATA 0xf2
0000            141   _IT01CF         DATA 0xe4
0000            142   _LFO0CN         DATA 0xb1
0000            143   _P0             DATA 0x80
0000            144   _P0MASK         DATA 0xfe
0000            145   _P0MAT          DATA 0xfd
0000            146   _P0MDIN         DATA 0xf1
0000            147   _P0MDOUT        DATA 0xa4
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1             DATA 0x90
0000            150   _P1MASK         DATA 0xee
0000            151   _P1MAT          DATA 0xed
0000            152   _P1MDIN         DATA 0xf2
0000            153   _P1MDOUT        DATA 0xa5
0000            154   _P1SKIP         DATA 0xd5
0000            155   _P2             DATA 0xa0
0000            156   _P2MASK         DATA 0xfc
0000            157   _P2MAT          DATA 0xfb
0000            158   _P2MDIN         DATA 0xf3
0000            159   _P2MDOUT        DATA 0xa6
0000            160   _P2SKIP         DATA 0xcc
0000            161   _P3             DATA 0xb0
0000            162   _P3MDIN         DATA 0xf4
0000            163   _P3MDOUT        DATA 0x9c
0000            164   _PCA0CENT       DATA 0x9e
0000            165   _PCA0CLR        DATA 0x9c
0000            166   _PCA0CN0        DATA 0xd8
0000            167   _PCA0CPH0       DATA 0xfc
0000            168   _PCA0CPH1       DATA 0xea
0000            169   _PCA0CPH2       DATA 0xec
0000            170   _PCA0CPH3       DATA 0xf5
0000            171   _PCA0CPH4       DATA 0x85
0000            172   _PCA0CPH5       DATA 0xde
0000            173   _PCA0CPL0       DATA 0xfb
0000            174   _PCA0CPL1       DATA 0xe9
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPL3       DATA 0xf4
0000            177   _PCA0CPL4       DATA 0x84
0000            178   _PCA0CPL5       DATA 0xdd
0000            179   _PCA0CPM0       DATA 0xda
0000            180   _PCA0CPM1       DATA 0xdb
0000            181   _PCA0CPM2       DATA 0xdc
0000            182   _PCA0CPM3       DATA 0xae
0000            183   _PCA0CPM4       DATA 0xaf
0000            184   _PCA0CPM5       DATA 0xcc
0000            185   _PCA0H          DATA 0xfa
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0MD         DATA 0xd9
0000            188   _PCA0POL        DATA 0x96
0000            189   _PCA0PWM        DATA 0xf7
0000            190   _PCON0          DATA 0x87
0000            191   _PCON1          DATA 0xcd
0000            192   _PFE0CN         DATA 0xc1
0000            193   _PRTDRV         DATA 0xf6
0000            194   _PSCTL          DATA 0x8f
0000            195   _PSTAT0         DATA 0xaa
0000            196   _PSW            DATA 0xd0
0000            197   _REF0CN         DATA 0xd1
0000            198   _REG0CN         DATA 0xc9
0000            199   _REVID          DATA 0xb6
0000            200   _RSTSRC         DATA 0xef
0000            201   _SBCON1         DATA 0x94
0000            202   _SBRLH1         DATA 0x96
0000            203   _SBRLL1         DATA 0x95
0000            204   _SBUF           DATA 0x99
0000            205   _SBUF0          DATA 0x99
0000            206   _SBUF1          DATA 0x92
0000            207   _SCON           DATA 0x98
0000            208   _SCON0          DATA 0x98
0000            209   _SCON1          DATA 0xc8
0000            210   _SFRPAGE        DATA 0xa7
0000            211   _SFRPGCN        DATA 0xbc
0000            212   _SFRSTACK       DATA 0xd7
0000            213   _SMB0ADM        DATA 0xd6
0000            214   _SMB0ADR        DATA 0xd7
0000            215   _SMB0CF         DATA 0xc1
0000            216   _SMB0CN0        DATA 0xc0
0000            217   _SMB0DAT        DATA 0xc2
0000            218   _SMB0FCN0       DATA 0xc3
0000            219   _SMB0FCN1       DATA 0xc4
0000            220   _SMB0FCT        DATA 0xef
0000            221   _SMB0RXLN       DATA 0xc5
0000            222   _SMB0TC         DATA 0xac
0000            223   _SMOD1          DATA 0x93
0000            224   _SP             DATA 0x81
0000            225   _SPI0CFG        DATA 0xa1
0000            226   _SPI0CKR        DATA 0xa2
0000            227   _SPI0CN0        DATA 0xf8
0000            228   _SPI0DAT        DATA 0xa3
0000            229   _SPI0FCN0       DATA 0x9a
0000            230   _SPI0FCN1       DATA 0x9b
0000            231   _SPI0FCT        DATA 0xf7
0000            232   _SPI0PCF        DATA 0xdf
0000            233   _TCON           DATA 0x88
0000            234   _TH0            DATA 0x8c
0000            235   _TH1            DATA 0x8d
0000            236   _TL0            DATA 0x8a
0000            237   _TL1            DATA 0x8b
0000            238   _TMOD           DATA 0x89
0000            239   _TMR2CN0        DATA 0xc8
0000            240   _TMR2CN1        DATA 0xfd
0000            241   _TMR2H          DATA 0xcf
0000            242   _TMR2L          DATA 0xce
0000            243   _TMR2RLH        DATA 0xcb
0000            244   _TMR2RLL        DATA 0xca
0000            245   _TMR3CN0        DATA 0x91
0000            246   _TMR3CN1        DATA 0xfe
0000            247   _TMR3H          DATA 0x95
0000            248   _TMR3L          DATA 0x94
0000            249   _TMR3RLH        DATA 0x93
0000            250   _TMR3RLL        DATA 0x92
0000            251   _TMR4CN0        DATA 0x98
0000            252   _TMR4CN1        DATA 0xff
0000            253   _TMR4H          DATA 0xa5
0000            254   _TMR4L          DATA 0xa4
0000            255   _TMR4RLH        DATA 0xa3
0000            256   _TMR4RLL        DATA 0xa2
0000            257   _TMR5CN0        DATA 0xc0
0000            258   _TMR5CN1        DATA 0xf1
0000            259   _TMR5H          DATA 0xd5
0000            260   _TMR5L          DATA 0xd4
0000            261   _TMR5RLH        DATA 0xd3
0000            262   _TMR5RLL        DATA 0xd2
0000            263   _UART0PCF       DATA 0xd9
0000            264   _UART1FCN0      DATA 0x9d
0000            265   _UART1FCN1      DATA 0xd8
0000            266   _UART1FCT       DATA 0xfa
0000            267   _UART1LIN       DATA 0x9e
0000            268   _UART1PCF       DATA 0xda
0000            269   _VDM0CN         DATA 0xff
0000            270   _WDTCN          DATA 0x97
0000            271   _XBR0           DATA 0xe1
0000            272   _XBR1           DATA 0xe2
0000            273   _XBR2           DATA 0xe3
0000            274   _XOSC0CN        DATA 0x86
0000            275   _DPTR           DATA 0x8382
0000            276   _TMR2RL         DATA 0xcbca
0000            277   _TMR3RL         DATA 0x9392
0000            278   _TMR4RL         DATA 0xa3a2
0000            279   _TMR5RL         DATA 0xd3d2
0000            280   _TMR0           DATA 0x8c8a
0000            281   _TMR1           DATA 0x8d8b
0000            282   _TMR2           DATA 0xcfce
0000            283   _TMR3           DATA 0x9594
0000            284   _TMR4           DATA 0xa5a4
0000            285   _TMR5           DATA 0xd5d4
0000            286   _SBRL1          DATA 0x9695
0000            287   _PCA0           DATA 0xfaf9
0000            288   _PCA0CP0        DATA 0xfcfb
0000            289   _PCA0CP1        DATA 0xeae9
0000            290   _PCA0CP2        DATA 0xeceb
0000            291   _PCA0CP3        DATA 0xf5f4
0000            292   _PCA0CP4        DATA 0x8584
0000            293   _PCA0CP5        DATA 0xdedd
0000            294   _ADC0ASA        DATA 0xb6b5
0000            295   _ADC0GT         DATA 0xc4c3
0000            296   _ADC0           DATA 0xbebd
0000            297   _ADC0LT         DATA 0xc6c5
0000            298   _DAC0           DATA 0x8584
0000            299   _DAC1           DATA 0x8a89
0000            300   _DAC2           DATA 0x8c8b
0000            301   _DAC3           DATA 0x8e8d
0000            302   ;--------------------------------------------------------
0000            303   ; special function bits
0000            304   ;--------------------------------------------------------
0000            305   _ACC_0          BIT 0xe0
0000            306   _ACC_1          BIT 0xe1
0000            307   _ACC_2          BIT 0xe2
0000            308   _ACC_3          BIT 0xe3
0000            309   _ACC_4          BIT 0xe4
0000            310   _ACC_5          BIT 0xe5
0000            311   _ACC_6          BIT 0xe6
0000            312   _ACC_7          BIT 0xe7
0000            313   _TEMPE          BIT 0xe8
0000            314   _ADGN0          BIT 0xe9
0000            315   _ADGN1          BIT 0xea
0000            316   _ADWINT         BIT 0xeb
0000            317   _ADBUSY         BIT 0xec
0000            318   _ADINT          BIT 0xed
0000            319   _IPOEN          BIT 0xee
0000            320   _ADEN           BIT 0xef
0000            321   _B_0            BIT 0xf0
0000            322   _B_1            BIT 0xf1
0000            323   _B_2            BIT 0xf2
0000            324   _B_3            BIT 0xf3
0000            325   _B_4            BIT 0xf4
0000            326   _B_5            BIT 0xf5
0000            327   _B_6            BIT 0xf6
0000            328   _B_7            BIT 0xf7
0000            329   _C0FIF          BIT 0xe8
0000            330   _C0RIF          BIT 0xe9
0000            331   _C1FIF          BIT 0xea
0000            332   _C1RIF          BIT 0xeb
0000            333   _C2FIF          BIT 0xec
0000            334   _C2RIF          BIT 0xed
0000            335   _C3FIF          BIT 0xee
0000            336   _C3RIF          BIT 0xef
0000            337   _D1SRC0         BIT 0x88
0000            338   _D1SRC1         BIT 0x89
0000            339   _D1AMEN         BIT 0x8a
0000            340   _D01REFSL       BIT 0x8b
0000            341   _D3SRC0         BIT 0x8c
0000            342   _D3SRC1         BIT 0x8d
0000            343   _D3AMEN         BIT 0x8e
0000            344   _D23REFSL       BIT 0x8f
0000            345   _D0UDIS         BIT 0x98
0000            346   _D1UDIS         BIT 0x99
0000            347   _D2UDIS         BIT 0x9a
0000            348   _D3UDIS         BIT 0x9b
0000            349   _EX0            BIT 0xa8
0000            350   _ET0            BIT 0xa9
0000            351   _EX1            BIT 0xaa
0000            352   _ET1            BIT 0xab
0000            353   _ES0            BIT 0xac
0000            354   _ET2            BIT 0xad
0000            355   _ESPI0          BIT 0xae
0000            356   _EA             BIT 0xaf
0000            357   _PX0            BIT 0xb8
0000            358   _PT0            BIT 0xb9
0000            359   _PX1            BIT 0xba
0000            360   _PT1            BIT 0xbb
0000            361   _PS0            BIT 0xbc
0000            362   _PT2            BIT 0xbd
0000            363   _PSPI0          BIT 0xbe
0000            364   _P0_0           BIT 0x80
0000            365   _P0_1           BIT 0x81
0000            366   _P0_2           BIT 0x82
0000            367   _P0_3           BIT 0x83
0000            368   _P0_4           BIT 0x84
0000            369   _P0_5           BIT 0x85
0000            370   _P0_6           BIT 0x86
0000            371   _P0_7           BIT 0x87
0000            372   _P1_0           BIT 0x90
0000            373   _P1_1           BIT 0x91
0000            374   _P1_2           BIT 0x92
0000            375   _P1_3           BIT 0x93
0000            376   _P1_4           BIT 0x94
0000            377   _P1_5           BIT 0x95
0000            378   _P1_6           BIT 0x96
0000            379   _P1_7           BIT 0x97
0000            380   _P2_0           BIT 0xa0
0000            381   _P2_1           BIT 0xa1
0000            382   _P2_2           BIT 0xa2
0000            383   _P2_3           BIT 0xa3
0000            384   _P2_4           BIT 0xa4
0000            385   _P2_5           BIT 0xa5
0000            386   _P2_6           BIT 0xa6
0000            387   _P3_0           BIT 0xb0
0000            388   _P3_1           BIT 0xb1
0000            389   _P3_2           BIT 0xb2
0000            390   _P3_3           BIT 0xb3
0000            391   _P3_4           BIT 0xb4
0000            392   _P3_7           BIT 0xb7
0000            393   _CCF0           BIT 0xd8
0000            394   _CCF1           BIT 0xd9
0000            395   _CCF2           BIT 0xda
0000            396   _CCF3           BIT 0xdb
0000            397   _CCF4           BIT 0xdc
0000            398   _CCF5           BIT 0xdd
0000            399   _CR             BIT 0xde
0000            400   _CF             BIT 0xdf
0000            401   _PARITY         BIT 0xd0
0000            402   _F1             BIT 0xd1
0000            403   _OV             BIT 0xd2
0000            404   _RS0            BIT 0xd3
0000            405   _RS1            BIT 0xd4
0000            406   _F0             BIT 0xd5
0000            407   _AC             BIT 0xd6
0000            408   _CY             BIT 0xd7
0000            409   _RI             BIT 0x98
0000            410   _TI             BIT 0x99
0000            411   _RB8            BIT 0x9a
0000            412   _TB8            BIT 0x9b
0000            413   _REN            BIT 0x9c
0000            414   _CE             BIT 0x9d
0000            415   _SMODE          BIT 0x9e
0000            416   _RI1            BIT 0xc8
0000            417   _TI1            BIT 0xc9
0000            418   _RBX1           BIT 0xca
0000            419   _TBX1           BIT 0xcb
0000            420   _REN1           BIT 0xcc
0000            421   _PERR1          BIT 0xcd
0000            422   _OVR1           BIT 0xce
0000            423   _SI             BIT 0xc0
0000            424   _ACK            BIT 0xc1
0000            425   _ARBLOST        BIT 0xc2
0000            426   _ACKRQ          BIT 0xc3
0000            427   _STO            BIT 0xc4
0000            428   _STA            BIT 0xc5
0000            429   _TXMODE         BIT 0xc6
0000            430   _MASTER         BIT 0xc7
0000            431   _SPIEN          BIT 0xf8
0000            432   _TXNF           BIT 0xf9
0000            433   _NSSMD0         BIT 0xfa
0000            434   _NSSMD1         BIT 0xfb
0000            435   _RXOVRN         BIT 0xfc
0000            436   _MODF           BIT 0xfd
0000            437   _WCOL           BIT 0xfe
0000            438   _SPIF           BIT 0xff
0000            439   _IT0            BIT 0x88
0000            440   _IE0            BIT 0x89
0000            441   _IT1            BIT 0x8a
0000            442   _IE1            BIT 0x8b
0000            443   _TR0            BIT 0x8c
0000            444   _TF0            BIT 0x8d
0000            445   _TR1            BIT 0x8e
0000            446   _TF1            BIT 0x8f
0000            447   _T2XCLK0        BIT 0xc8
0000            448   _T2XCLK1        BIT 0xc9
0000            449   _TR2            BIT 0xca
0000            450   _T2SPLIT        BIT 0xcb
0000            451   _TF2CEN         BIT 0xcc
0000            452   _TF2LEN         BIT 0xcd
0000            453   _TF2L           BIT 0xce
0000            454   _TF2H           BIT 0xcf
0000            455   _T4XCLK0        BIT 0x98
0000            456   _T4XCLK1        BIT 0x99
0000            457   _TR4            BIT 0x9a
0000            458   _T4SPLIT        BIT 0x9b
0000            459   _TF4CEN         BIT 0x9c
0000            460   _TF4LEN         BIT 0x9d
0000            461   _TF4L           BIT 0x9e
0000            462   _TF4H           BIT 0x9f
0000            463   _T5XCLK0        BIT 0xc0
0000            464   _T5XCLK1        BIT 0xc1
0000            465   _TR5            BIT 0xc2
0000            466   _T5SPLIT        BIT 0xc3
0000            467   _TF5CEN         BIT 0xc4
0000            468   _TF5LEN         BIT 0xc5
0000            469   _TF5L           BIT 0xc6
0000            470   _TF5H           BIT 0xc7
0000            471   _RIE            BIT 0xd8
0000            472   _RXTO0          BIT 0xd9
0000            473   _RXTO1          BIT 0xda
0000            474   _RFRQ           BIT 0xdb
0000            475   _TIE            BIT 0xdc
0000            476   _TXHOLD         BIT 0xdd
0000            477   _TXNF1          BIT 0xde
0000            478   _TFRQ           BIT 0xdf
0000            479   ;--------------------------------------------------------
0000            480   ; overlayable register banks
0000            481   ;--------------------------------------------------------
0000            482            rbank0 segment data overlay
0000            483   ;--------------------------------------------------------
0000            484   ; internal ram data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DSEG
0000            487   _overflow_count:
0000            488            ds 1
0001            489   _main_ADCvoltages_1_65:
0001            490            ds 8
0009            491   _main_sloc0_1_0:
0009            492            ds 4
000D            493   ;--------------------------------------------------------
000D            494   ; overlayable items in internal ram 
000D            495   ;--------------------------------------------------------
0000            496            rseg    R_OSEG
0000            497            rseg    R_OSEG
0000            498   _InitPinADC_PARM_2:
0000            499            ds 1
0001            500            rseg    R_OSEG
0001            501   ;--------------------------------------------------------
0001            502   ; indirectly addressable internal ram data
0001            503   ;--------------------------------------------------------
0000            504            rseg R_ISEG
0000            505   ;--------------------------------------------------------
0000            506   ; absolute internal ram data
0000            507   ;--------------------------------------------------------
0000            508            DSEG
0000            509   ;--------------------------------------------------------
0000            510   ; bit data
0000            511   ;--------------------------------------------------------
0000            512            rseg R_BSEG
0000            513   ;--------------------------------------------------------
0000            514   ; paged external ram data
0000            515   ;--------------------------------------------------------
0000            516            rseg R_PSEG
0000            517   ;--------------------------------------------------------
0000            518   ; external ram data
0000            519   ;--------------------------------------------------------
0000            520            rseg R_XSEG
0000            521   ;--------------------------------------------------------
0000            522   ; absolute external ram data
0000            523   ;--------------------------------------------------------
0000            524            XSEG
0000            525   ;--------------------------------------------------------
0000            526   ; external initialized ram data
0000            527   ;--------------------------------------------------------
0000            528            rseg R_IXSEG
0000            529            rseg R_HOME
0000            530            rseg R_GSINIT
0000            531            rseg R_CSEG
0000            532   ;--------------------------------------------------------
0000            533   ; Reset entry point and interrupt vectors
0000            534   ;--------------------------------------------------------
0000            535            CSEG at 0x0000
0000 020000     536            ljmp    _crt0
0003            537   ;--------------------------------------------------------
0003            538   ; global & static initialisations
0003            539   ;--------------------------------------------------------
0000            540            rseg R_HOME
0000            541            rseg R_GSINIT
0000            542            rseg R_GSINIT
0000            543   ;--------------------------------------------------------
0000            544   ; data variables initialization
0000            545   ;--------------------------------------------------------
0000            546            rseg R_DINIT
0000            547            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            548   ;--------------------------------------------------------
0000            549   ; code
0000            550   ;--------------------------------------------------------
0000            551            rseg R_CSEG
0000            552   ;------------------------------------------------------------
0000            553   ;Allocation info for local variables in function '_c51_external_startup'
0000            554   ;------------------------------------------------------------
0000            555   ;------------------------------------------------------------
0000            556   ;        sourcecode.c:19: char _c51_external_startup (void)
0000            557   ;        -----------------------------------------
0000            558   ;         function _c51_external_startup
0000            559   ;        -----------------------------------------
0000            560   __c51_external_startup:
0000            561            using   0
0000            562   ;        sourcecode.c:22: SFRPAGE = 0x00;
0000 75A700     563            mov     _SFRPAGE,#0x00
0003            564   ;        sourcecode.c:23: WDTCN = 0xDE; //First key
0003 7597DE     565            mov     _WDTCN,#0xDE
0006            566   ;        sourcecode.c:24: WDTCN = 0xAD; //Second key
0006 7597AD     567            mov     _WDTCN,#0xAD
0009            568   ;        sourcecode.c:26: VDM0CN |= 0x80;
0009 43FF80     569            orl     _VDM0CN,#0x80
000C            570   ;        sourcecode.c:27: RSTSRC = 0x02;
000C 75EF02     571            mov     _RSTSRC,#0x02
000F            572   ;        sourcecode.c:34: SFRPAGE = 0x10;
000F 75A710     573            mov     _SFRPAGE,#0x10
0012            574   ;        sourcecode.c:35: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     575            mov     _PFE0CN,#0x20
0015            576   ;        sourcecode.c:36: SFRPAGE = 0x00;
0015 75A700     577            mov     _SFRPAGE,#0x00
0018            578   ;        sourcecode.c:57: CLKSEL = 0x00;
0018 75A900     579            mov     _CLKSEL,#0x00
001B            580   ;        sourcecode.c:58: CLKSEL = 0x00;
001B 75A900     581            mov     _CLKSEL,#0x00
001E            582   ;        sourcecode.c:59: while ((CLKSEL & 0x80) == 0);
001E            583   L002001?:
001E E5A9       584            mov     a,_CLKSEL
0020 30E798     585            jnb     acc.7,L002001?
0023            586   ;        sourcecode.c:60: CLKSEL = 0x03;
0023 75A903     587            mov     _CLKSEL,#0x03
0026            588   ;        sourcecode.c:61: CLKSEL = 0x03;
0026 75A903     589            mov     _CLKSEL,#0x03
0029            590   ;        sourcecode.c:62: while ((CLKSEL & 0x80) == 0);
0029            591   L002004?:
0029 E5A9       592            mov     a,_CLKSEL
002B 30E718     593            jnb     acc.7,L002004?
002E            594   ;        sourcecode.c:67: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     595            orl     _P0MDOUT,#0x10
0031            596   ;        sourcecode.c:68: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     597            mov     _XBR0,#0x01
0034            598   ;        sourcecode.c:69: XBR1     = 0X10; // Enable T0 on P0.0
0034 75E210     599            mov     _XBR1,#0x10
0037            600   ;        sourcecode.c:70: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     601            mov     _XBR2,#0x40
003A            602   ;        sourcecode.c:76: SCON0 = 0x10;
003A 759810     603            mov     _SCON0,#0x10
003D            604   ;        sourcecode.c:77: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     605            mov     _CKCON0,_CKCON0
0040            606   ;        sourcecode.c:78: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     607            mov     _TH1,#0xE6
0043            608   ;        sourcecode.c:79: TL1 = TH1;      // Init Timer1
0043 858D8B     609            mov     _TL1,_TH1
0046            610   ;        sourcecode.c:80: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     611            anl     _TMOD,#0x0F
0049            612   ;        sourcecode.c:81: TMOD |=  0x20;                       
0049 438920     613            orl     _TMOD,#0x20
004C            614   ;        sourcecode.c:82: TR1 = 1; // START Timer1
004C D28E       615            setb    _TR1
004E            616   ;        sourcecode.c:83: TI = 1;  // Indicate TX0 ready
004E D299       617            setb    _TI
0050            618   ;        sourcecode.c:85: return 0;
0050 758200     619            mov     dpl,#0x00
0053 22         620            ret
0054            621   ;------------------------------------------------------------
0054            622   ;Allocation info for local variables in function 'Timer3us'
0054            623   ;------------------------------------------------------------
0054            624   ;us                        Allocated to registers r2 
0054            625   ;i                         Allocated to registers r3 
0054            626   ;------------------------------------------------------------
0054            627   ;        sourcecode.c:89: void Timer3us(unsigned char us)
0054            628   ;        -----------------------------------------
0054            629   ;         function Timer3us
0054            630   ;        -----------------------------------------
0054            631   _Timer3us:
0054 AA82       632            mov     r2,dpl
0056            633   ;        sourcecode.c:94: CKCON0|=0b_0100_0000;
0056 438E40     634            orl     _CKCON0,#0x40
0059            635   ;        sourcecode.c:96: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     636            mov     _TMR3RL,#0xB8
005C 7593FF     637            mov     (_TMR3RL >> 8),#0xFF
005F            638   ;        sourcecode.c:97: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     639            mov     _TMR3,_TMR3RL
0062 859395     640            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            641   ;        sourcecode.c:99: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     642            mov     _TMR3CN0,#0x04
0068            643   ;        sourcecode.c:100: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       644            mov     r3,#0x00
006A            645   L003006?:
006A C3         646            clr     c
006B EB         647            mov     a,r3
006C 9A         648            subb    a,r2
006D 5000       649            jnc     L003009?
006F            650   ;        sourcecode.c:102: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            651   L003001?:
006F E591       652            mov     a,_TMR3CN0
0071 30E718     653            jnb     acc.7,L003001?
0074            654   ;        sourcecode.c:103: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     655            anl     _TMR3CN0,#0x7F
0077            656   ;        sourcecode.c:104: if (TF0)
0077            657   ;        sourcecode.c:106: TF0=0;
0077 108D58     658            jbc     _TF0,L003019?
007A 8000       659            sjmp    L003008?
007C            660   L003019?:
007C            661   ;        sourcecode.c:107: overflow_count++;
007C 0558       662            inc     _overflow_count
007E            663   L003008?:
007E            664   ;        sourcecode.c:100: for (i = 0; i < us; i++)       // Count <us> overflows
007E 0B         665            inc     r3
007F 8000       666            sjmp    L003006?
0081            667   L003009?:
0081            668   ;        sourcecode.c:110: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0081 759100     669            mov     _TMR3CN0,#0x00
0084 22         670            ret
0085            671   ;------------------------------------------------------------
0085            672   ;Allocation info for local variables in function 'waitms'
0085            673   ;------------------------------------------------------------
0085            674   ;ms                        Allocated to registers r2 r3 
0085            675   ;j                         Allocated to registers r2 r3 
0085            676   ;------------------------------------------------------------
0085            677   ;        sourcecode.c:113: void waitms (unsigned int ms)
0085            678   ;        -----------------------------------------
0085            679   ;         function waitms
0085            680   ;        -----------------------------------------
0085            681   _waitms:
0085 AA82       682            mov     r2,dpl
0087 AB83       683            mov     r3,dph
0089            684   ;        sourcecode.c:116: for(j=ms; j!=0; j--)
0089            685   L004001?:
0089 BA0058     686            cjne    r2,#0x00,L004010?
008C BB0058     687            cjne    r3,#0x00,L004010?
008F 22         688            ret
0090            689   L004010?:
0090            690   ;        sourcecode.c:118: Timer3us(249);
0090 7582F9     691            mov     dpl,#0xF9
0093 C002       692            push    ar2
0095 C003       693            push    ar3
0097 120000     694            lcall   _Timer3us
009A            695   ;        sourcecode.c:119: Timer3us(249);
009A 7582F9     696            mov     dpl,#0xF9
009D 120000     697            lcall   _Timer3us
00A0            698   ;        sourcecode.c:120: Timer3us(249);
00A0 7582F9     699            mov     dpl,#0xF9
00A3 120000     700            lcall   _Timer3us
00A6            701   ;        sourcecode.c:121: Timer3us(250);
00A6 7582FA     702            mov     dpl,#0xFA
00A9 120000     703            lcall   _Timer3us
00AC D003       704            pop     ar3
00AE D002       705            pop     ar2
00B0            706   ;        sourcecode.c:116: for(j=ms; j!=0; j--)
00B0 1A         707            dec     r2
00B1 BAFF98     708            cjne    r2,#0xff,L004011?
00B4 1B         709            dec     r3
00B5            710   L004011?:
00B5 8000       711            sjmp    L004001?
00B7            712   ;------------------------------------------------------------
00B7            713   ;Allocation info for local variables in function 'TIMER0_Init'
00B7            714   ;------------------------------------------------------------
00B7            715   ;------------------------------------------------------------
00B7            716   ;        sourcecode.c:125: void TIMER0_Init(void)
00B7            717   ;        -----------------------------------------
00B7            718   ;         function TIMER0_Init
00B7            719   ;        -----------------------------------------
00B7            720   _TIMER0_Init:
00B7            721   ;        sourcecode.c:127: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
00B7 5389F0     722            anl     _TMOD,#0xF0
00BA            723   ;        sourcecode.c:128: TMOD|=0b_0000_0101; // Timer/Counter 0 used as a 16-bit counter
00BA 438905     724            orl     _TMOD,#0x05
00BD            725   ;        sourcecode.c:129: TR0=0; // Stop Timer/Counter 0
00BD C28C       726            clr     _TR0
00BF 22         727            ret
00C0            728   ;------------------------------------------------------------
00C0            729   ;Allocation info for local variables in function 'Get_ADC'
00C0            730   ;------------------------------------------------------------
00C0            731   ;------------------------------------------------------------
00C0            732   ;        sourcecode.c:132: unsigned int Get_ADC (void)
00C0            733   ;        -----------------------------------------
00C0            734   ;         function Get_ADC
00C0            735   ;        -----------------------------------------
00C0            736   _Get_ADC:
00C0            737   ;        sourcecode.c:134: ADINT = 0;
00C0 C2ED       738            clr     _ADINT
00C2            739   ;        sourcecode.c:135: ADBUSY = 1;
00C2 D2EC       740            setb    _ADBUSY
00C4            741   ;        sourcecode.c:136: while (!ADINT); // Wait for conversion to complete
00C4            742   L006001?:
00C4 30EDD8     743            jnb     _ADINT,L006001?
00C7            744   ;        sourcecode.c:137: return (ADC0);
00C7 85BD82     745            mov     dpl,_ADC0
00CA 85BE83     746            mov     dph,(_ADC0 >> 8)
00CD 22         747            ret
00CE            748   ;------------------------------------------------------------
00CE            749   ;Allocation info for local variables in function 'InitADC'
00CE            750   ;------------------------------------------------------------
00CE            751   ;------------------------------------------------------------
00CE            752   ;        sourcecode.c:140: void InitADC (void)
00CE            753   ;        -----------------------------------------
00CE            754   ;         function InitADC
00CE            755   ;        -----------------------------------------
00CE            756   _InitADC:
00CE            757   ;        sourcecode.c:142: SFRPAGE = 0x00;
00CE 75A700     758            mov     _SFRPAGE,#0x00
00D1            759   ;        sourcecode.c:143: ADEN=0; // Disable ADC
00D1 C2EF       760            clr     _ADEN
00D3            761   ;        sourcecode.c:148: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
00D3 75B280     762            mov     _ADC0CN1,#0x80
00D6            763   ;        sourcecode.c:152: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
00D6 75BC20     764            mov     _ADC0CF0,#0x20
00D9            765   ;        sourcecode.c:156: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
00D9 75B91E     766            mov     _ADC0CF1,#0x1E
00DC            767   ;        sourcecode.c:165: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
00DC 75E800     768            mov     _ADC0CN0,#0x00
00DF            769   ;        sourcecode.c:170: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
00DF 75DF3F     770            mov     _ADC0CF2,#0x3F
00E2            771   ;        sourcecode.c:174: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
00E2 75B300     772            mov     _ADC0CN2,#0x00
00E5            773   ;        sourcecode.c:176: ADEN=1; // Enable ADC
00E5 D2EF       774            setb    _ADEN
00E7 22         775            ret
00E8            776   ;------------------------------------------------------------
00E8            777   ;Allocation info for local variables in function 'InitPinADC'
00E8            778   ;------------------------------------------------------------
00E8            779   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
00E8            780   ;portno                    Allocated to registers r2 
00E8            781   ;mask                      Allocated to registers r3 
00E8            782   ;------------------------------------------------------------
00E8            783   ;        sourcecode.c:179: void InitPinADC (unsigned char portno, unsigned char pin_num)
00E8            784   ;        -----------------------------------------
00E8            785   ;         function InitPinADC
00E8            786   ;        -----------------------------------------
00E8            787   _InitPinADC:
00E8 AA82       788            mov     r2,dpl
00EA            789   ;        sourcecode.c:183: mask=1<<pin_num;
00EA 8588F0     790            mov     b,_InitPinADC_PARM_2
00ED 05F0       791            inc     b
00EF 7401       792            mov     a,#0x01
00F1 8000       793            sjmp    L008013?
00F3            794   L008011?:
00F3 25E0       795            add     a,acc
00F5            796   L008013?:
00F5 D5F098     797            djnz    b,L008011?
00F8 FB         798            mov     r3,a
00F9            799   ;        sourcecode.c:185: SFRPAGE = 0x20;
00F9 75A720     800            mov     _SFRPAGE,#0x20
00FC            801   ;        sourcecode.c:186: switch (portno)
00FC BA00D8     802            cjne    r2,#0x00,L008014?
00FF 8000       803            sjmp    L008001?
0101            804   L008014?:
0101 BA0158     805            cjne    r2,#0x01,L008015?
0104 8000       806            sjmp    L008002?
0106            807   L008015?:
0106            808   ;        sourcecode.c:188: case 0:
0106 BA02D8     809            cjne    r2,#0x02,L008005?
0109 8000       810            sjmp    L008003?
010B            811   L008001?:
010B            812   ;        sourcecode.c:189: P0MDIN &= (~mask); // Set pin as analog input
010B EB         813            mov     a,r3
010C F4         814            cpl     a
010D FA         815            mov     r2,a
010E 52F1       816            anl     _P0MDIN,a
0110            817   ;        sourcecode.c:190: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0110 EB         818            mov     a,r3
0111 42D4       819            orl     _P0SKIP,a
0113            820   ;        sourcecode.c:191: break;
0113            821   ;        sourcecode.c:192: case 1:
0113 8000       822            sjmp    L008005?
0115            823   L008002?:
0115            824   ;        sourcecode.c:193: P1MDIN &= (~mask); // Set pin as analog input
0115 EB         825            mov     a,r3
0116 F4         826            cpl     a
0117 FA         827            mov     r2,a
0118 52F2       828            anl     _P1MDIN,a
011A            829   ;        sourcecode.c:194: P1SKIP |= mask; // Skip Crossbar decoding for this pin
011A EB         830            mov     a,r3
011B 42D5       831            orl     _P1SKIP,a
011D            832   ;        sourcecode.c:195: break;
011D            833   ;        sourcecode.c:196: case 2:
011D 8000       834            sjmp    L008005?
011F            835   L008003?:
011F            836   ;        sourcecode.c:197: P2MDIN &= (~mask); // Set pin as analog input
011F EB         837            mov     a,r3
0120 F4         838            cpl     a
0121 FA         839            mov     r2,a
0122 52F3       840            anl     _P2MDIN,a
0124            841   ;        sourcecode.c:198: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0124 EB         842            mov     a,r3
0125 42CC       843            orl     _P2SKIP,a
0127            844   ;        sourcecode.c:202: }
0127            845   L008005?:
0127            846   ;        sourcecode.c:203: SFRPAGE = 0x00;
0127 75A700     847            mov     _SFRPAGE,#0x00
012A 22         848            ret
012B            849   ;------------------------------------------------------------
012B            850   ;Allocation info for local variables in function 'ADC_at_Pin'
012B            851   ;------------------------------------------------------------
012B            852   ;pin                       Allocated to registers 
012B            853   ;------------------------------------------------------------
012B            854   ;        sourcecode.c:206: unsigned int ADC_at_Pin(unsigned char pin)
012B            855   ;        -----------------------------------------
012B            856   ;         function ADC_at_Pin
012B            857   ;        -----------------------------------------
012B            858   _ADC_at_Pin:
012B 8582BB     859            mov     _ADC0MX,dpl
012E            860   ;        sourcecode.c:209: ADINT = 0;
012E C2ED       861            clr     _ADINT
0130            862   ;        sourcecode.c:210: ADBUSY = 1;     // Convert voltage at the pin
0130 D2EC       863            setb    _ADBUSY
0132            864   ;        sourcecode.c:212: return (ADC0);
0132 85BD82     865            mov     dpl,_ADC0
0135 85BE83     866            mov     dph,(_ADC0 >> 8)
0138 22         867            ret
0139            868   ;------------------------------------------------------------
0139            869   ;Allocation info for local variables in function 'Volts_at_Pin'
0139            870   ;------------------------------------------------------------
0139            871   ;pin                       Allocated to registers r2 
0139            872   ;------------------------------------------------------------
0139            873   ;        sourcecode.c:215: float Volts_at_Pin(unsigned char pin)
0139            874   ;        -----------------------------------------
0139            875   ;         function Volts_at_Pin
0139            876   ;        -----------------------------------------
0139            877   _Volts_at_Pin:
0139            878   ;        sourcecode.c:217: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0139 120000     879            lcall   _ADC_at_Pin
013C 120000     880            lcall   ___uint2fs
013F AA82       881            mov     r2,dpl
0141 AB83       882            mov     r3,dph
0143 ACF0       883            mov     r4,b
0145 FD         884            mov     r5,a
0146 C002       885            push    ar2
0148 C003       886            push    ar3
014A C004       887            push    ar4
014C C005       888            push    ar5
014E 903333     889            mov     dptr,#0x3333
0151 75F053     890            mov     b,#0x53
0154 7440       891            mov     a,#0x40
0156 120000     892            lcall   ___fsmul
0159 AA82       893            mov     r2,dpl
015B AB83       894            mov     r3,dph
015D ACF0       895            mov     r4,b
015F FD         896            mov     r5,a
0160 E581       897            mov     a,sp
0162 24FC       898            add     a,#0xfc
0164 F581       899            mov     sp,a
0166 E4         900            clr     a
0167 C0E0       901            push    acc
0169 74FC       902            mov     a,#0xFC
016B C0E0       903            push    acc
016D 747F       904            mov     a,#0x7F
016F C0E0       905            push    acc
0171 7446       906            mov     a,#0x46
0173 C0E0       907            push    acc
0175 8A82       908            mov     dpl,r2
0177 8B83       909            mov     dph,r3
0179 8CF0       910            mov     b,r4
017B ED         911            mov     a,r5
017C 120000     912            lcall   ___fsdiv
017F AA82       913            mov     r2,dpl
0181 AB83       914            mov     r3,dph
0183 ACF0       915            mov     r4,b
0185 FD         916            mov     r5,a
0186 E581       917            mov     a,sp
0188 24FC       918            add     a,#0xfc
018A F581       919            mov     sp,a
018C 8A82       920            mov     dpl,r2
018E 8B83       921            mov     dph,r3
0190 8CF0       922            mov     b,r4
0192 ED         923            mov     a,r5
0193 22         924            ret
0194            925   ;------------------------------------------------------------
0194            926   ;Allocation info for local variables in function 'main'
0194            927   ;------------------------------------------------------------
0194            928   ;F                         Allocated to registers r4 r5 r2 r3 
0194            929   ;ADCvoltages               Allocated with name '_main_ADCvoltages_1_65'
0194            930   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0194            931   ;------------------------------------------------------------
0194            932   ;        sourcecode.c:225: void main (void) 
0194            933   ;        -----------------------------------------
0194            934   ;         function main
0194            935   ;        -----------------------------------------
0194            936   _main:
0194            937   ;        sourcecode.c:230: TIMER0_Init();
0194 120000     938            lcall   _TIMER0_Init
0197            939   ;        sourcecode.c:232: waitms(500); // Give PuTTY a chance to start.
0197 9001F4     940            mov     dptr,#0x01F4
019A 120000     941            lcall   _waitms
019D            942   ;        sourcecode.c:233: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
019D 7458       943            mov     a,#__str_0
019F C0E0       944            push    acc
01A1 74BD       945            mov     a,#(__str_0 >> 8)
01A3 C0E0       946            push    acc
01A5 7480       947            mov     a,#0x80
01A7 C0E0       948            push    acc
01A9 120000     949            lcall   _printf
01AC 1581       950            dec     sp
01AE 1581       951            dec     sp
01B0 1581       952            dec     sp
01B2            953   ;        sourcecode.c:238: __FILE__, __DATE__, __TIME__);
01B2            954   ;        sourcecode.c:237: "Compiled: %s, %s\n\n",
01B2 74D8       955            mov     a,#__str_4
01B4 C0E0       956            push    acc
01B6 74BD       957            mov     a,#(__str_4 >> 8)
01B8 C0E0       958            push    acc
01BA 7480       959            mov     a,#0x80
01BC C0E0       960            push    acc
01BE 7418       961            mov     a,#__str_3
01C0 C0E0       962            push    acc
01C2 74BE       963            mov     a,#(__str_3 >> 8)
01C4 C0E0       964            push    acc
01C6 7480       965            mov     a,#0x80
01C8 C0E0       966            push    acc
01CA 7458       967            mov     a,#__str_2
01CC C0E0       968            push    acc
01CE 74BE       969            mov     a,#(__str_2 >> 8)
01D0 C0E0       970            push    acc
01D2 7480       971            mov     a,#0x80
01D4 C0E0       972            push    acc
01D6 7498       973            mov     a,#__str_1
01D8 C0E0       974            push    acc
01DA 74BE       975            mov     a,#(__str_1 >> 8)
01DC C0E0       976            push    acc
01DE 7480       977            mov     a,#0x80
01E0 C0E0       978            push    acc
01E2 120000     979            lcall   _printf
01E5 E581       980            mov     a,sp
01E7 24F4       981            add     a,#0xf4
01E9 F581       982            mov     sp,a
01EB            983   ;        sourcecode.c:240: while(1)
01EB            984   L011002?:
01EB            985   ;        sourcecode.c:244: ADCvoltages[0] = Volts_at_Pin(QFP32_MUX_P2_1);
01EB 75820E     986            mov     dpl,#0x0E
01EE 120000     987            lcall   _Volts_at_Pin
01F1 AA82       988            mov     r2,dpl
01F3 AB83       989            mov     r3,dph
01F5 ACF0       990            mov     r4,b
01F7 FD         991            mov     r5,a
01F8 8AD8       992            mov     _main_ADCvoltages_1_65,r2
01FA 8BD9       993            mov     (_main_ADCvoltages_1_65 + 1),r3
01FC 8CDA       994            mov     (_main_ADCvoltages_1_65 + 2),r4
01FE 8DDB       995            mov     (_main_ADCvoltages_1_65 + 3),r5
0200            996   ;        sourcecode.c:245: ADCvoltages[1] = Volts_at_Pin(QFP32_MUX_P2_2);
0200 75820F     997            mov     dpl,#0x0F
0203 120000     998            lcall   _Volts_at_Pin
0206 AA82       999            mov     r2,dpl
0208 AB83      1000            mov     r3,dph
020A ACF0      1001            mov     r4,b
020C FD        1002            mov     r5,a
020D 8ADC      1003            mov     (_main_ADCvoltages_1_65 + 0x0004),r2
020F 8BDD      1004            mov     ((_main_ADCvoltages_1_65 + 0x0004) + 1),r3
0211 8CDE      1005            mov     ((_main_ADCvoltages_1_65 + 0x0004) + 2),r4
0213 8DDF      1006            mov     ((_main_ADCvoltages_1_65 + 0x0004) + 3),r5
0215           1007   ;        sourcecode.c:247: printf ("V@P2.1=%7.5fV, V@P2.2=%7.5fV\r", ADCvoltages[0], ADCvoltages[1]);
0215 C002      1008            push    ar2
0217 C003      1009            push    ar3
0219 C004      1010            push    ar4
021B C005      1011            push    ar5
021D C0D8      1012            push    _main_ADCvoltages_1_65
021F C0D9      1013            push    (_main_ADCvoltages_1_65 + 1)
0221 C0DA      1014            push    (_main_ADCvoltages_1_65 + 2)
0223 C0DB      1015            push    (_main_ADCvoltages_1_65 + 3)
0225 7418      1016            mov     a,#__str_5
0227 C0E0      1017            push    acc
0229 74BF      1018            mov     a,#(__str_5 >> 8)
022B C0E0      1019            push    acc
022D 7480      1020            mov     a,#0x80
022F C0E0      1021            push    acc
0231 120000    1022            lcall   _printf
0234 E581      1023            mov     a,sp
0236 24F5      1024            add     a,#0xf5
0238 F581      1025            mov     sp,a
023A           1026   ;        sourcecode.c:250: TL0=0;
023A 758A00    1027            mov     _TL0,#0x00
023D           1028   ;        sourcecode.c:251: TH0=0;
023D 758C00    1029            mov     _TH0,#0x00
0240           1030   ;        sourcecode.c:252: overflow_count=0;
0240 755800    1031            mov     _overflow_count,#0x00
0243           1032   ;        sourcecode.c:253: TF0=0;
0243 C28D      1033            clr     _TF0
0245           1034   ;        sourcecode.c:254: TR0=1; // Start Timer/Counter 0
0245 D28C      1035            setb    _TR0
0247           1036   ;        sourcecode.c:255: waitms(1000);
0247 9003E8    1037            mov     dptr,#0x03E8
024A 120000    1038            lcall   _waitms
024D           1039   ;        sourcecode.c:256: TR0=0; // Stop Timer/Counter 0
024D C28C      1040            clr     _TR0
024F           1041   ;        sourcecode.c:257: F=overflow_count*0x10000L+TH0*0x100L+TL0;
024F AA58      1042            mov     r2,_overflow_count
0251 7B00      1043            mov     r3,#0x00
0253 8B1B      1044            mov     (_main_sloc0_1_0 + 3),r3
0255 8A1A      1045            mov     (_main_sloc0_1_0 + 2),r2
0257 751900    1046            mov     (_main_sloc0_1_0 + 1),#0x00
025A 751800    1047            mov     _main_sloc0_1_0,#0x00
025D AE8C      1048            mov     r6,_TH0
025F 7F00      1049            mov     r7,#0x00
0261 7A00      1050            mov     r2,#0x00
0263 8A03      1051            mov     ar3,r2
0265 8F02      1052            mov     ar2,r7
0267 8E07      1053            mov     ar7,r6
0269 7E00      1054            mov     r6,#0x00
026B EE        1055            mov     a,r6
026C 2518      1056            add     a,_main_sloc0_1_0
026E F518      1057            mov     _main_sloc0_1_0,a
0270 EF        1058            mov     a,r7
0271 3519      1059            addc    a,(_main_sloc0_1_0 + 1)
0273 F519      1060            mov     (_main_sloc0_1_0 + 1),a
0275 EA        1061            mov     a,r2
0276 351A      1062            addc    a,(_main_sloc0_1_0 + 2)
0278 F51A      1063            mov     (_main_sloc0_1_0 + 2),a
027A EB        1064            mov     a,r3
027B 351B      1065            addc    a,(_main_sloc0_1_0 + 3)
027D F51B      1066            mov     (_main_sloc0_1_0 + 3),a
027F AC8A      1067            mov     r4,_TL0
0281 E4        1068            clr     a
0282 FD        1069            mov     r5,a
0283 33        1070            rlc     a
0284 95E0      1071            subb    a,acc
0286 FA        1072            mov     r2,a
0287 FB        1073            mov     r3,a
0288 EC        1074            mov     a,r4
0289 2518      1075            add     a,_main_sloc0_1_0
028B FC        1076            mov     r4,a
028C ED        1077            mov     a,r5
028D 3519      1078            addc    a,(_main_sloc0_1_0 + 1)
028F FD        1079            mov     r5,a
0290 EA        1080            mov     a,r2
0291 351A      1081            addc    a,(_main_sloc0_1_0 + 2)
0293 FA        1082            mov     r2,a
0294 EB        1083            mov     a,r3
0295 351B      1084            addc    a,(_main_sloc0_1_0 + 3)
0297 FB        1085            mov     r3,a
0298           1086   ;        sourcecode.c:259: printf("\rf=%luHz", F);
0298 C004      1087            push    ar4
029A C005      1088            push    ar5
029C C002      1089            push    ar2
029E C003      1090            push    ar3
02A0 7458      1091            mov     a,#__str_6
02A2 C0E0      1092            push    acc
02A4 74BF      1093            mov     a,#(__str_6 >> 8)
02A6 C0E0      1094            push    acc
02A8 7480      1095            mov     a,#0x80
02AA C0E0      1096            push    acc
02AC 120000    1097            lcall   _printf
02AF E581      1098            mov     a,sp
02B1 24F9      1099            add     a,#0xf9
02B3 F581      1100            mov     sp,a
02B5           1101   ;        sourcecode.c:260: printf("\x1b[0K"); // ANSI: Clear from cursor to end of line.
02B5 7498      1102            mov     a,#__str_7
02B7 C0E0      1103            push    acc
02B9 74BF      1104            mov     a,#(__str_7 >> 8)
02BB C0E0      1105            push    acc
02BD 7480      1106            mov     a,#0x80
02BF C0E0      1107            push    acc
02C1 120000    1108            lcall   _printf
02C4 1581      1109            dec     sp
02C6 1581      1110            dec     sp
02C8 1581      1111            dec     sp
02CA 020000    1112            ljmp    L011002?
02CD           1113            rseg R_CSEG
02CD           1114   
0000           1115            rseg R_XINIT
0000           1116   
0000           1117            rseg R_CONST
0000           1118   __str_0:
0000 1B        1119            db 0x1B
0001 5B324A    1120            db '[2J'
0004 00        1121            db 0x00
0005           1122   __str_1:
0005 45464D38  1123            db 'EFM8 Frequency measurement using Timer/Counter 0.'
     20467265
     7175656E
     6379206D
     65617375
     72656D65
     6E742075
     73696E67
     2054696D
     65722F43
     6F756E74
     65722030
     2E
0036 0A        1124            db 0x0A
0037 46696C65  1125            db 'File: %s'
     3A202573
003F 0A        1126            db 0x0A
0040 43        1127            db 'C'
0041 6F6D7069  1128            db 'ompiled: %s, %s'
     6C65643A
     2025732C
     202573
0050 0A        1129            db 0x0A
0051 0A        1130            db 0x0A
0052 00        1131            db 0x00
0053           1132   __str_2:
0053 736F7572  1133            db 'sourcecode.c'
     6365636F
     64652E63
005F 00        1134            db 0x00
0060           1135   __str_3:
0060 4D617220  1136            db 'Mar  3 2024'
     20332032
     303234
006B 00        1137            db 0x00
006C           1138   __str_4:
006C 32313A31  1139            db '21:12:48'
     323A3438
0074 00        1140            db 0x00
0075           1141   __str_5:
0075 56405032  1142            db 'V@P2.1=%7.5fV, V@P2.2=%7.5fV'
     2E313D25
     372E3566
     562C2056
     4050322E
     323D2537
     2E356656
0091 0D        1143            db 0x0D
0092 00        1144            db 0x00
0093           1145   __str_6:
0093 0D        1146            db 0x0D
0094 663D256C  1147            db 'f=%luHz'
     75487A
009B 00        1148            db 0x00
009C           1149   __str_7:
009C 1B        1150            db 0x1B
009D 5B304B    1151            db '[0K'
00A0 00        1152            db 0x00
00A1           1153   
0003           1154            CSEG
0003           1155   
0003           1156   end
