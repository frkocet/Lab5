0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Mar 04 19:48:45 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _ADC_at_Pin
0000             32            public _InitPinADC
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public _InitADC
0000             36            public __c51_external_startup
0000             37            public _overflow_count
0000             38   ;--------------------------------------------------------
0000             39   ; Special Function Registers
0000             40   ;--------------------------------------------------------
0000             41   _ACC            DATA 0xe0
0000             42   _ADC0ASAH       DATA 0xb6
0000             43   _ADC0ASAL       DATA 0xb5
0000             44   _ADC0ASCF       DATA 0xa1
0000             45   _ADC0ASCT       DATA 0xc7
0000             46   _ADC0CF0        DATA 0xbc
0000             47   _ADC0CF1        DATA 0xb9
0000             48   _ADC0CF2        DATA 0xdf
0000             49   _ADC0CN0        DATA 0xe8
0000             50   _ADC0CN1        DATA 0xb2
0000             51   _ADC0CN2        DATA 0xb3
0000             52   _ADC0GTH        DATA 0xc4
0000             53   _ADC0GTL        DATA 0xc3
0000             54   _ADC0H          DATA 0xbe
0000             55   _ADC0L          DATA 0xbd
0000             56   _ADC0LTH        DATA 0xc6
0000             57   _ADC0LTL        DATA 0xc5
0000             58   _ADC0MX         DATA 0xbb
0000             59   _B              DATA 0xf0
0000             60   _CKCON0         DATA 0x8e
0000             61   _CKCON1         DATA 0xa6
0000             62   _CLEN0          DATA 0xc6
0000             63   _CLIE0          DATA 0xc7
0000             64   _CLIF0          DATA 0xe8
0000             65   _CLKSEL         DATA 0xa9
0000             66   _CLOUT0         DATA 0xd1
0000             67   _CLU0CF         DATA 0xb1
0000             68   _CLU0FN         DATA 0xaf
0000             69   _CLU0MX         DATA 0x84
0000             70   _CLU1CF         DATA 0xb3
0000             71   _CLU1FN         DATA 0xb2
0000             72   _CLU1MX         DATA 0x85
0000             73   _CLU2CF         DATA 0xb6
0000             74   _CLU2FN         DATA 0xb5
0000             75   _CLU2MX         DATA 0x91
0000             76   _CLU3CF         DATA 0xbf
0000             77   _CLU3FN         DATA 0xbe
0000             78   _CLU3MX         DATA 0xae
0000             79   _CMP0CN0        DATA 0x9b
0000             80   _CMP0CN1        DATA 0x99
0000             81   _CMP0MD         DATA 0x9d
0000             82   _CMP0MX         DATA 0x9f
0000             83   _CMP1CN0        DATA 0xbf
0000             84   _CMP1CN1        DATA 0xac
0000             85   _CMP1MD         DATA 0xab
0000             86   _CMP1MX         DATA 0xaa
0000             87   _CRC0CN0        DATA 0xce
0000             88   _CRC0CN1        DATA 0x86
0000             89   _CRC0CNT        DATA 0xd3
0000             90   _CRC0DAT        DATA 0xcb
0000             91   _CRC0FLIP       DATA 0xcf
0000             92   _CRC0IN         DATA 0xca
0000             93   _CRC0ST         DATA 0xd2
0000             94   _DAC0CF0        DATA 0x91
0000             95   _DAC0CF1        DATA 0x92
0000             96   _DAC0H          DATA 0x85
0000             97   _DAC0L          DATA 0x84
0000             98   _DAC1CF0        DATA 0x93
0000             99   _DAC1CF1        DATA 0x94
0000            100   _DAC1H          DATA 0x8a
0000            101   _DAC1L          DATA 0x89
0000            102   _DAC2CF0        DATA 0x95
0000            103   _DAC2CF1        DATA 0x96
0000            104   _DAC2H          DATA 0x8c
0000            105   _DAC2L          DATA 0x8b
0000            106   _DAC3CF0        DATA 0x9a
0000            107   _DAC3CF1        DATA 0x9c
0000            108   _DAC3H          DATA 0x8e
0000            109   _DAC3L          DATA 0x8d
0000            110   _DACGCF0        DATA 0x88
0000            111   _DACGCF1        DATA 0x98
0000            112   _DACGCF2        DATA 0xa2
0000            113   _DERIVID        DATA 0xad
0000            114   _DEVICEID       DATA 0xb5
0000            115   _DPH            DATA 0x83
0000            116   _DPL            DATA 0x82
0000            117   _EIE1           DATA 0xe6
0000            118   _EIE2           DATA 0xf3
0000            119   _EIP1           DATA 0xbb
0000            120   _EIP1H          DATA 0xee
0000            121   _EIP2           DATA 0xed
0000            122   _EIP2H          DATA 0xf6
0000            123   _EMI0CN         DATA 0xe7
0000            124   _FLKEY          DATA 0xb7
0000            125   _HFO0CAL        DATA 0xc7
0000            126   _HFO1CAL        DATA 0xd6
0000            127   _HFOCN          DATA 0xef
0000            128   _I2C0ADM        DATA 0xff
0000            129   _I2C0CN0        DATA 0xba
0000            130   _I2C0DIN        DATA 0xbc
0000            131   _I2C0DOUT       DATA 0xbb
0000            132   _I2C0FCN0       DATA 0xad
0000            133   _I2C0FCN1       DATA 0xab
0000            134   _I2C0FCT        DATA 0xf5
0000            135   _I2C0SLAD       DATA 0xbd
0000            136   _I2C0STAT       DATA 0xb9
0000            137   _IE             DATA 0xa8
0000            138   _IP             DATA 0xb8
0000            139   _IPH            DATA 0xf2
0000            140   _IT01CF         DATA 0xe4
0000            141   _LFO0CN         DATA 0xb1
0000            142   _P0             DATA 0x80
0000            143   _P0MASK         DATA 0xfe
0000            144   _P0MAT          DATA 0xfd
0000            145   _P0MDIN         DATA 0xf1
0000            146   _P0MDOUT        DATA 0xa4
0000            147   _P0SKIP         DATA 0xd4
0000            148   _P1             DATA 0x90
0000            149   _P1MASK         DATA 0xee
0000            150   _P1MAT          DATA 0xed
0000            151   _P1MDIN         DATA 0xf2
0000            152   _P1MDOUT        DATA 0xa5
0000            153   _P1SKIP         DATA 0xd5
0000            154   _P2             DATA 0xa0
0000            155   _P2MASK         DATA 0xfc
0000            156   _P2MAT          DATA 0xfb
0000            157   _P2MDIN         DATA 0xf3
0000            158   _P2MDOUT        DATA 0xa6
0000            159   _P2SKIP         DATA 0xcc
0000            160   _P3             DATA 0xb0
0000            161   _P3MDIN         DATA 0xf4
0000            162   _P3MDOUT        DATA 0x9c
0000            163   _PCA0CENT       DATA 0x9e
0000            164   _PCA0CLR        DATA 0x9c
0000            165   _PCA0CN0        DATA 0xd8
0000            166   _PCA0CPH0       DATA 0xfc
0000            167   _PCA0CPH1       DATA 0xea
0000            168   _PCA0CPH2       DATA 0xec
0000            169   _PCA0CPH3       DATA 0xf5
0000            170   _PCA0CPH4       DATA 0x85
0000            171   _PCA0CPH5       DATA 0xde
0000            172   _PCA0CPL0       DATA 0xfb
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPL2       DATA 0xeb
0000            175   _PCA0CPL3       DATA 0xf4
0000            176   _PCA0CPL4       DATA 0x84
0000            177   _PCA0CPL5       DATA 0xdd
0000            178   _PCA0CPM0       DATA 0xda
0000            179   _PCA0CPM1       DATA 0xdb
0000            180   _PCA0CPM2       DATA 0xdc
0000            181   _PCA0CPM3       DATA 0xae
0000            182   _PCA0CPM4       DATA 0xaf
0000            183   _PCA0CPM5       DATA 0xcc
0000            184   _PCA0H          DATA 0xfa
0000            185   _PCA0L          DATA 0xf9
0000            186   _PCA0MD         DATA 0xd9
0000            187   _PCA0POL        DATA 0x96
0000            188   _PCA0PWM        DATA 0xf7
0000            189   _PCON0          DATA 0x87
0000            190   _PCON1          DATA 0xcd
0000            191   _PFE0CN         DATA 0xc1
0000            192   _PRTDRV         DATA 0xf6
0000            193   _PSCTL          DATA 0x8f
0000            194   _PSTAT0         DATA 0xaa
0000            195   _PSW            DATA 0xd0
0000            196   _REF0CN         DATA 0xd1
0000            197   _REG0CN         DATA 0xc9
0000            198   _REVID          DATA 0xb6
0000            199   _RSTSRC         DATA 0xef
0000            200   _SBCON1         DATA 0x94
0000            201   _SBRLH1         DATA 0x96
0000            202   _SBRLL1         DATA 0x95
0000            203   _SBUF           DATA 0x99
0000            204   _SBUF0          DATA 0x99
0000            205   _SBUF1          DATA 0x92
0000            206   _SCON           DATA 0x98
0000            207   _SCON0          DATA 0x98
0000            208   _SCON1          DATA 0xc8
0000            209   _SFRPAGE        DATA 0xa7
0000            210   _SFRPGCN        DATA 0xbc
0000            211   _SFRSTACK       DATA 0xd7
0000            212   _SMB0ADM        DATA 0xd6
0000            213   _SMB0ADR        DATA 0xd7
0000            214   _SMB0CF         DATA 0xc1
0000            215   _SMB0CN0        DATA 0xc0
0000            216   _SMB0DAT        DATA 0xc2
0000            217   _SMB0FCN0       DATA 0xc3
0000            218   _SMB0FCN1       DATA 0xc4
0000            219   _SMB0FCT        DATA 0xef
0000            220   _SMB0RXLN       DATA 0xc5
0000            221   _SMB0TC         DATA 0xac
0000            222   _SMOD1          DATA 0x93
0000            223   _SP             DATA 0x81
0000            224   _SPI0CFG        DATA 0xa1
0000            225   _SPI0CKR        DATA 0xa2
0000            226   _SPI0CN0        DATA 0xf8
0000            227   _SPI0DAT        DATA 0xa3
0000            228   _SPI0FCN0       DATA 0x9a
0000            229   _SPI0FCN1       DATA 0x9b
0000            230   _SPI0FCT        DATA 0xf7
0000            231   _SPI0PCF        DATA 0xdf
0000            232   _TCON           DATA 0x88
0000            233   _TH0            DATA 0x8c
0000            234   _TH1            DATA 0x8d
0000            235   _TL0            DATA 0x8a
0000            236   _TL1            DATA 0x8b
0000            237   _TMOD           DATA 0x89
0000            238   _TMR2CN0        DATA 0xc8
0000            239   _TMR2CN1        DATA 0xfd
0000            240   _TMR2H          DATA 0xcf
0000            241   _TMR2L          DATA 0xce
0000            242   _TMR2RLH        DATA 0xcb
0000            243   _TMR2RLL        DATA 0xca
0000            244   _TMR3CN0        DATA 0x91
0000            245   _TMR3CN1        DATA 0xfe
0000            246   _TMR3H          DATA 0x95
0000            247   _TMR3L          DATA 0x94
0000            248   _TMR3RLH        DATA 0x93
0000            249   _TMR3RLL        DATA 0x92
0000            250   _TMR4CN0        DATA 0x98
0000            251   _TMR4CN1        DATA 0xff
0000            252   _TMR4H          DATA 0xa5
0000            253   _TMR4L          DATA 0xa4
0000            254   _TMR4RLH        DATA 0xa3
0000            255   _TMR4RLL        DATA 0xa2
0000            256   _TMR5CN0        DATA 0xc0
0000            257   _TMR5CN1        DATA 0xf1
0000            258   _TMR5H          DATA 0xd5
0000            259   _TMR5L          DATA 0xd4
0000            260   _TMR5RLH        DATA 0xd3
0000            261   _TMR5RLL        DATA 0xd2
0000            262   _UART0PCF       DATA 0xd9
0000            263   _UART1FCN0      DATA 0x9d
0000            264   _UART1FCN1      DATA 0xd8
0000            265   _UART1FCT       DATA 0xfa
0000            266   _UART1LIN       DATA 0x9e
0000            267   _UART1PCF       DATA 0xda
0000            268   _VDM0CN         DATA 0xff
0000            269   _WDTCN          DATA 0x97
0000            270   _XBR0           DATA 0xe1
0000            271   _XBR1           DATA 0xe2
0000            272   _XBR2           DATA 0xe3
0000            273   _XOSC0CN        DATA 0x86
0000            274   _DPTR           DATA 0x8382
0000            275   _TMR2RL         DATA 0xcbca
0000            276   _TMR3RL         DATA 0x9392
0000            277   _TMR4RL         DATA 0xa3a2
0000            278   _TMR5RL         DATA 0xd3d2
0000            279   _TMR0           DATA 0x8c8a
0000            280   _TMR1           DATA 0x8d8b
0000            281   _TMR2           DATA 0xcfce
0000            282   _TMR3           DATA 0x9594
0000            283   _TMR4           DATA 0xa5a4
0000            284   _TMR5           DATA 0xd5d4
0000            285   _SBRL1          DATA 0x9695
0000            286   _PCA0           DATA 0xfaf9
0000            287   _PCA0CP0        DATA 0xfcfb
0000            288   _PCA0CP1        DATA 0xeae9
0000            289   _PCA0CP2        DATA 0xeceb
0000            290   _PCA0CP3        DATA 0xf5f4
0000            291   _PCA0CP4        DATA 0x8584
0000            292   _PCA0CP5        DATA 0xdedd
0000            293   _ADC0ASA        DATA 0xb6b5
0000            294   _ADC0GT         DATA 0xc4c3
0000            295   _ADC0           DATA 0xbebd
0000            296   _ADC0LT         DATA 0xc6c5
0000            297   _DAC0           DATA 0x8584
0000            298   _DAC1           DATA 0x8a89
0000            299   _DAC2           DATA 0x8c8b
0000            300   _DAC3           DATA 0x8e8d
0000            301   ;--------------------------------------------------------
0000            302   ; special function bits
0000            303   ;--------------------------------------------------------
0000            304   _ACC_0          BIT 0xe0
0000            305   _ACC_1          BIT 0xe1
0000            306   _ACC_2          BIT 0xe2
0000            307   _ACC_3          BIT 0xe3
0000            308   _ACC_4          BIT 0xe4
0000            309   _ACC_5          BIT 0xe5
0000            310   _ACC_6          BIT 0xe6
0000            311   _ACC_7          BIT 0xe7
0000            312   _TEMPE          BIT 0xe8
0000            313   _ADGN0          BIT 0xe9
0000            314   _ADGN1          BIT 0xea
0000            315   _ADWINT         BIT 0xeb
0000            316   _ADBUSY         BIT 0xec
0000            317   _ADINT          BIT 0xed
0000            318   _IPOEN          BIT 0xee
0000            319   _ADEN           BIT 0xef
0000            320   _B_0            BIT 0xf0
0000            321   _B_1            BIT 0xf1
0000            322   _B_2            BIT 0xf2
0000            323   _B_3            BIT 0xf3
0000            324   _B_4            BIT 0xf4
0000            325   _B_5            BIT 0xf5
0000            326   _B_6            BIT 0xf6
0000            327   _B_7            BIT 0xf7
0000            328   _C0FIF          BIT 0xe8
0000            329   _C0RIF          BIT 0xe9
0000            330   _C1FIF          BIT 0xea
0000            331   _C1RIF          BIT 0xeb
0000            332   _C2FIF          BIT 0xec
0000            333   _C2RIF          BIT 0xed
0000            334   _C3FIF          BIT 0xee
0000            335   _C3RIF          BIT 0xef
0000            336   _D1SRC0         BIT 0x88
0000            337   _D1SRC1         BIT 0x89
0000            338   _D1AMEN         BIT 0x8a
0000            339   _D01REFSL       BIT 0x8b
0000            340   _D3SRC0         BIT 0x8c
0000            341   _D3SRC1         BIT 0x8d
0000            342   _D3AMEN         BIT 0x8e
0000            343   _D23REFSL       BIT 0x8f
0000            344   _D0UDIS         BIT 0x98
0000            345   _D1UDIS         BIT 0x99
0000            346   _D2UDIS         BIT 0x9a
0000            347   _D3UDIS         BIT 0x9b
0000            348   _EX0            BIT 0xa8
0000            349   _ET0            BIT 0xa9
0000            350   _EX1            BIT 0xaa
0000            351   _ET1            BIT 0xab
0000            352   _ES0            BIT 0xac
0000            353   _ET2            BIT 0xad
0000            354   _ESPI0          BIT 0xae
0000            355   _EA             BIT 0xaf
0000            356   _PX0            BIT 0xb8
0000            357   _PT0            BIT 0xb9
0000            358   _PX1            BIT 0xba
0000            359   _PT1            BIT 0xbb
0000            360   _PS0            BIT 0xbc
0000            361   _PT2            BIT 0xbd
0000            362   _PSPI0          BIT 0xbe
0000            363   _P0_0           BIT 0x80
0000            364   _P0_1           BIT 0x81
0000            365   _P0_2           BIT 0x82
0000            366   _P0_3           BIT 0x83
0000            367   _P0_4           BIT 0x84
0000            368   _P0_5           BIT 0x85
0000            369   _P0_6           BIT 0x86
0000            370   _P0_7           BIT 0x87
0000            371   _P1_0           BIT 0x90
0000            372   _P1_1           BIT 0x91
0000            373   _P1_2           BIT 0x92
0000            374   _P1_3           BIT 0x93
0000            375   _P1_4           BIT 0x94
0000            376   _P1_5           BIT 0x95
0000            377   _P1_6           BIT 0x96
0000            378   _P1_7           BIT 0x97
0000            379   _P2_0           BIT 0xa0
0000            380   _P2_1           BIT 0xa1
0000            381   _P2_2           BIT 0xa2
0000            382   _P2_3           BIT 0xa3
0000            383   _P2_4           BIT 0xa4
0000            384   _P2_5           BIT 0xa5
0000            385   _P2_6           BIT 0xa6
0000            386   _P3_0           BIT 0xb0
0000            387   _P3_1           BIT 0xb1
0000            388   _P3_2           BIT 0xb2
0000            389   _P3_3           BIT 0xb3
0000            390   _P3_4           BIT 0xb4
0000            391   _P3_7           BIT 0xb7
0000            392   _CCF0           BIT 0xd8
0000            393   _CCF1           BIT 0xd9
0000            394   _CCF2           BIT 0xda
0000            395   _CCF3           BIT 0xdb
0000            396   _CCF4           BIT 0xdc
0000            397   _CCF5           BIT 0xdd
0000            398   _CR             BIT 0xde
0000            399   _CF             BIT 0xdf
0000            400   _PARITY         BIT 0xd0
0000            401   _F1             BIT 0xd1
0000            402   _OV             BIT 0xd2
0000            403   _RS0            BIT 0xd3
0000            404   _RS1            BIT 0xd4
0000            405   _F0             BIT 0xd5
0000            406   _AC             BIT 0xd6
0000            407   _CY             BIT 0xd7
0000            408   _RI             BIT 0x98
0000            409   _TI             BIT 0x99
0000            410   _RB8            BIT 0x9a
0000            411   _TB8            BIT 0x9b
0000            412   _REN            BIT 0x9c
0000            413   _CE             BIT 0x9d
0000            414   _SMODE          BIT 0x9e
0000            415   _RI1            BIT 0xc8
0000            416   _TI1            BIT 0xc9
0000            417   _RBX1           BIT 0xca
0000            418   _TBX1           BIT 0xcb
0000            419   _REN1           BIT 0xcc
0000            420   _PERR1          BIT 0xcd
0000            421   _OVR1           BIT 0xce
0000            422   _SI             BIT 0xc0
0000            423   _ACK            BIT 0xc1
0000            424   _ARBLOST        BIT 0xc2
0000            425   _ACKRQ          BIT 0xc3
0000            426   _STO            BIT 0xc4
0000            427   _STA            BIT 0xc5
0000            428   _TXMODE         BIT 0xc6
0000            429   _MASTER         BIT 0xc7
0000            430   _SPIEN          BIT 0xf8
0000            431   _TXNF           BIT 0xf9
0000            432   _NSSMD0         BIT 0xfa
0000            433   _NSSMD1         BIT 0xfb
0000            434   _RXOVRN         BIT 0xfc
0000            435   _MODF           BIT 0xfd
0000            436   _WCOL           BIT 0xfe
0000            437   _SPIF           BIT 0xff
0000            438   _IT0            BIT 0x88
0000            439   _IE0            BIT 0x89
0000            440   _IT1            BIT 0x8a
0000            441   _IE1            BIT 0x8b
0000            442   _TR0            BIT 0x8c
0000            443   _TF0            BIT 0x8d
0000            444   _TR1            BIT 0x8e
0000            445   _TF1            BIT 0x8f
0000            446   _T2XCLK0        BIT 0xc8
0000            447   _T2XCLK1        BIT 0xc9
0000            448   _TR2            BIT 0xca
0000            449   _T2SPLIT        BIT 0xcb
0000            450   _TF2CEN         BIT 0xcc
0000            451   _TF2LEN         BIT 0xcd
0000            452   _TF2L           BIT 0xce
0000            453   _TF2H           BIT 0xcf
0000            454   _T4XCLK0        BIT 0x98
0000            455   _T4XCLK1        BIT 0x99
0000            456   _TR4            BIT 0x9a
0000            457   _T4SPLIT        BIT 0x9b
0000            458   _TF4CEN         BIT 0x9c
0000            459   _TF4LEN         BIT 0x9d
0000            460   _TF4L           BIT 0x9e
0000            461   _TF4H           BIT 0x9f
0000            462   _T5XCLK0        BIT 0xc0
0000            463   _T5XCLK1        BIT 0xc1
0000            464   _TR5            BIT 0xc2
0000            465   _T5SPLIT        BIT 0xc3
0000            466   _TF5CEN         BIT 0xc4
0000            467   _TF5LEN         BIT 0xc5
0000            468   _TF5L           BIT 0xc6
0000            469   _TF5H           BIT 0xc7
0000            470   _RIE            BIT 0xd8
0000            471   _RXTO0          BIT 0xd9
0000            472   _RXTO1          BIT 0xda
0000            473   _RFRQ           BIT 0xdb
0000            474   _TIE            BIT 0xdc
0000            475   _TXHOLD         BIT 0xdd
0000            476   _TXNF1          BIT 0xde
0000            477   _TFRQ           BIT 0xdf
0000            478   ;--------------------------------------------------------
0000            479   ; overlayable register banks
0000            480   ;--------------------------------------------------------
0000            481            rbank0 segment data overlay
0000            482   ;--------------------------------------------------------
0000            483   ; internal ram data
0000            484   ;--------------------------------------------------------
0000            485            rseg R_DSEG
0000            486   _overflow_count:
0000            487            ds 1
0001            488   _main_v_1_61:
0001            489            ds 16
0011            490   _main_sloc0_1_0:
0011            491            ds 4
0015            492   ;--------------------------------------------------------
0015            493   ; overlayable items in internal ram 
0015            494   ;--------------------------------------------------------
0000            495            rseg    R_OSEG
0000            496            rseg    R_OSEG
0000            497   _InitPinADC_PARM_2:
0000            498            ds 1
0001            499            rseg    R_OSEG
0001            500   ;--------------------------------------------------------
0001            501   ; indirectly addressable internal ram data
0001            502   ;--------------------------------------------------------
0000            503            rseg R_ISEG
0000            504   ;--------------------------------------------------------
0000            505   ; absolute internal ram data
0000            506   ;--------------------------------------------------------
0000            507            DSEG
0000            508   ;--------------------------------------------------------
0000            509   ; bit data
0000            510   ;--------------------------------------------------------
0000            511            rseg R_BSEG
0000            512   ;--------------------------------------------------------
0000            513   ; paged external ram data
0000            514   ;--------------------------------------------------------
0000            515            rseg R_PSEG
0000            516   ;--------------------------------------------------------
0000            517   ; external ram data
0000            518   ;--------------------------------------------------------
0000            519            rseg R_XSEG
0000            520   ;--------------------------------------------------------
0000            521   ; absolute external ram data
0000            522   ;--------------------------------------------------------
0000            523            XSEG
0000            524   ;--------------------------------------------------------
0000            525   ; external initialized ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_IXSEG
0000            528            rseg R_HOME
0000            529            rseg R_GSINIT
0000            530            rseg R_CSEG
0000            531   ;--------------------------------------------------------
0000            532   ; Reset entry point and interrupt vectors
0000            533   ;--------------------------------------------------------
0000            534            CSEG at 0x0000
0000 020000     535            ljmp    _crt0
0003            536   ;--------------------------------------------------------
0003            537   ; global & static initialisations
0003            538   ;--------------------------------------------------------
0000            539            rseg R_HOME
0000            540            rseg R_GSINIT
0000            541            rseg R_GSINIT
0000            542   ;--------------------------------------------------------
0000            543   ; data variables initialization
0000            544   ;--------------------------------------------------------
0000            545            rseg R_DINIT
0000            546            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            547   ;--------------------------------------------------------
0000            548   ; code
0000            549   ;--------------------------------------------------------
0000            550            rseg R_CSEG
0000            551   ;------------------------------------------------------------
0000            552   ;Allocation info for local variables in function '_c51_external_startup'
0000            553   ;------------------------------------------------------------
0000            554   ;------------------------------------------------------------
0000            555   ;        sourcecode.c:15: char _c51_external_startup (void)
0000            556   ;        -----------------------------------------
0000            557   ;         function _c51_external_startup
0000            558   ;        -----------------------------------------
0000            559   __c51_external_startup:
0000            560            using   0
0000            561   ;        sourcecode.c:18: SFRPAGE = 0x00;
0000 75A700     562            mov     _SFRPAGE,#0x00
0003            563   ;        sourcecode.c:19: WDTCN = 0xDE; //First key
0003 7597DE     564            mov     _WDTCN,#0xDE
0006            565   ;        sourcecode.c:20: WDTCN = 0xAD; //Second key
0006 7597AD     566            mov     _WDTCN,#0xAD
0009            567   ;        sourcecode.c:22: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     568            mov     _VDM0CN,#0x80
000C            569   ;        sourcecode.c:23: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     570            mov     _RSTSRC,#0x06
000F            571   ;        sourcecode.c:30: SFRPAGE = 0x10;
000F 75A710     572            mov     _SFRPAGE,#0x10
0012            573   ;        sourcecode.c:31: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     574            mov     _PFE0CN,#0x20
0015            575   ;        sourcecode.c:32: SFRPAGE = 0x00;
0015 75A700     576            mov     _SFRPAGE,#0x00
0018            577   ;        sourcecode.c:53: CLKSEL = 0x00;
0018 75A900     578            mov     _CLKSEL,#0x00
001B            579   ;        sourcecode.c:54: CLKSEL = 0x00;
001B 75A900     580            mov     _CLKSEL,#0x00
001E            581   ;        sourcecode.c:55: while ((CLKSEL & 0x80) == 0);
001E            582   L002001?:
001E E5A9       583            mov     a,_CLKSEL
0020 30E748     584            jnb     acc.7,L002001?
0023            585   ;        sourcecode.c:56: CLKSEL = 0x03;
0023 75A903     586            mov     _CLKSEL,#0x03
0026            587   ;        sourcecode.c:57: CLKSEL = 0x03;
0026 75A903     588            mov     _CLKSEL,#0x03
0029            589   ;        sourcecode.c:58: while ((CLKSEL & 0x80) == 0);
0029            590   L002004?:
0029 E5A9       591            mov     a,_CLKSEL
002B 30E7C8     592            jnb     acc.7,L002004?
002E            593   ;        sourcecode.c:63: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     594            orl     _P0MDOUT,#0x10
0031            595   ;        sourcecode.c:64: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     596            mov     _XBR0,#0x01
0034            597   ;        sourcecode.c:65: XBR1     = 0X00;
0034 75E200     598            mov     _XBR1,#0x00
0037            599   ;        sourcecode.c:66: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     600            mov     _XBR2,#0x40
003A            601   ;        sourcecode.c:72: SCON0 = 0x10;
003A 759810     602            mov     _SCON0,#0x10
003D            603   ;        sourcecode.c:73: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     604            mov     _TH1,#0xE6
0040            605   ;        sourcecode.c:74: TL1 = TH1;      // Init Timer1
0040 858D8B     606            mov     _TL1,_TH1
0043            607   ;        sourcecode.c:75: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     608            anl     _TMOD,#0x0F
0046            609   ;        sourcecode.c:76: TMOD |=  0x20;                       
0046 438920     610            orl     _TMOD,#0x20
0049            611   ;        sourcecode.c:77: TR1 = 1; // START Timer1
0049 D28E       612            setb    _TR1
004B            613   ;        sourcecode.c:78: TI = 1;  // Indicate TX0 ready
004B D299       614            setb    _TI
004D            615   ;        sourcecode.c:80: return 0;
004D 758200     616            mov     dpl,#0x00
0050 22         617            ret
0051            618   ;------------------------------------------------------------
0051            619   ;Allocation info for local variables in function 'InitADC'
0051            620   ;------------------------------------------------------------
0051            621   ;------------------------------------------------------------
0051            622   ;        sourcecode.c:83: void InitADC (void)
0051            623   ;        -----------------------------------------
0051            624   ;         function InitADC
0051            625   ;        -----------------------------------------
0051            626   _InitADC:
0051            627   ;        sourcecode.c:85: SFRPAGE = 0x00;
0051 75A700     628            mov     _SFRPAGE,#0x00
0054            629   ;        sourcecode.c:86: ADEN=0; // Disable ADC
0054 C2EF       630            clr     _ADEN
0056            631   ;        sourcecode.c:91: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     632            mov     _ADC0CN1,#0x80
0059            633   ;        sourcecode.c:95: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     634            mov     _ADC0CF0,#0x20
005C            635   ;        sourcecode.c:99: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     636            mov     _ADC0CF1,#0x1E
005F            637   ;        sourcecode.c:108: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     638            mov     _ADC0CN0,#0x00
0062            639   ;        sourcecode.c:113: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     640            mov     _ADC0CF2,#0x3F
0065            641   ;        sourcecode.c:117: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     642            mov     _ADC0CN2,#0x00
0068            643   ;        sourcecode.c:119: ADEN=1; // Enable ADC
0068 D2EF       644            setb    _ADEN
006A 22         645            ret
006B            646   ;------------------------------------------------------------
006B            647   ;Allocation info for local variables in function 'Timer3us'
006B            648   ;------------------------------------------------------------
006B            649   ;us                        Allocated to registers r2 
006B            650   ;i                         Allocated to registers r3 
006B            651   ;------------------------------------------------------------
006B            652   ;        sourcecode.c:123: void Timer3us(unsigned char us)
006B            653   ;        -----------------------------------------
006B            654   ;         function Timer3us
006B            655   ;        -----------------------------------------
006B            656   _Timer3us:
006B AA82       657            mov     r2,dpl
006D            658   ;        sourcecode.c:128: CKCON0|=0b_0100_0000;
006D 438E40     659            orl     _CKCON0,#0x40
0070            660   ;        sourcecode.c:130: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     661            mov     _TMR3RL,#0xB8
0073 7593FF     662            mov     (_TMR3RL >> 8),#0xFF
0076            663   ;        sourcecode.c:131: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     664            mov     _TMR3,_TMR3RL
0079 859395     665            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            666   ;        sourcecode.c:133: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     667            mov     _TMR3CN0,#0x04
007F            668   ;        sourcecode.c:134: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       669            mov     r3,#0x00
0081            670   L004004?:
0081 C3         671            clr     c
0082 EB         672            mov     a,r3
0083 9A         673            subb    a,r2
0084 5000       674            jnc     L004007?
0086            675   ;        sourcecode.c:136: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            676   L004001?:
0086 E591       677            mov     a,_TMR3CN0
0088 30E7C8     678            jnb     acc.7,L004001?
008B            679   ;        sourcecode.c:137: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     680            anl     _TMR3CN0,#0x7F
008E            681   ;        sourcecode.c:134: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         682            inc     r3
008F 8000       683            sjmp    L004004?
0091            684   L004007?:
0091            685   ;        sourcecode.c:139: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     686            mov     _TMR3CN0,#0x00
0094 22         687            ret
0095            688   ;------------------------------------------------------------
0095            689   ;Allocation info for local variables in function 'waitms'
0095            690   ;------------------------------------------------------------
0095            691   ;ms                        Allocated to registers r2 r3 
0095            692   ;j                         Allocated to registers r4 r5 
0095            693   ;k                         Allocated to registers r6 
0095            694   ;------------------------------------------------------------
0095            695   ;        sourcecode.c:142: void waitms (unsigned int ms)
0095            696   ;        -----------------------------------------
0095            697   ;         function waitms
0095            698   ;        -----------------------------------------
0095            699   _waitms:
0095 AA82       700            mov     r2,dpl
0097 AB83       701            mov     r3,dph
0099            702   ;        sourcecode.c:146: for(j=0; j<ms; j++)
0099 7C00       703            mov     r4,#0x00
009B 7D00       704            mov     r5,#0x00
009D            705   L005005?:
009D C3         706            clr     c
009E EC         707            mov     a,r4
009F 9A         708            subb    a,r2
00A0 ED         709            mov     a,r5
00A1 9B         710            subb    a,r3
00A2 5000       711            jnc     L005009?
00A4            712   ;        sourcecode.c:147: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       713            mov     r6,#0x00
00A6            714   L005001?:
00A6 BE0408     715            cjne    r6,#0x04,L005018?
00A9            716   L005018?:
00A9 5000       717            jnc     L005007?
00AB 7582FA     718            mov     dpl,#0xFA
00AE C002       719            push    ar2
00B0 C003       720            push    ar3
00B2 C004       721            push    ar4
00B4 C005       722            push    ar5
00B6 C006       723            push    ar6
00B8 120000     724            lcall   _Timer3us
00BB D006       725            pop     ar6
00BD D005       726            pop     ar5
00BF D004       727            pop     ar4
00C1 D003       728            pop     ar3
00C3 D002       729            pop     ar2
00C5 0E         730            inc     r6
00C6 8000       731            sjmp    L005001?
00C8            732   L005007?:
00C8            733   ;        sourcecode.c:146: for(j=0; j<ms; j++)
00C8 0C         734            inc     r4
00C9 BC0048     735            cjne    r4,#0x00,L005005?
00CC 0D         736            inc     r5
00CD 8000       737            sjmp    L005005?
00CF            738   L005009?:
00CF 22         739            ret
00D0            740   ;------------------------------------------------------------
00D0            741   ;Allocation info for local variables in function 'InitPinADC'
00D0            742   ;------------------------------------------------------------
00D0            743   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            744   ;portno                    Allocated to registers r2 
00D0            745   ;mask                      Allocated to registers r3 
00D0            746   ;------------------------------------------------------------
00D0            747   ;        sourcecode.c:152: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            748   ;        -----------------------------------------
00D0            749   ;         function InitPinADC
00D0            750   ;        -----------------------------------------
00D0            751   _InitPinADC:
00D0 AA82       752            mov     r2,dpl
00D2            753   ;        sourcecode.c:156: mask=1<<pinno;
00D2 8588F0     754            mov     b,_InitPinADC_PARM_2
00D5 05F0       755            inc     b
00D7 7401       756            mov     a,#0x01
00D9 8000       757            sjmp    L006013?
00DB            758   L006011?:
00DB 25E0       759            add     a,acc
00DD            760   L006013?:
00DD D5F008     761            djnz    b,L006011?
00E0 FB         762            mov     r3,a
00E1            763   ;        sourcecode.c:158: SFRPAGE = 0x20;
00E1 75A720     764            mov     _SFRPAGE,#0x20
00E4            765   ;        sourcecode.c:159: switch (portno)
00E4 BA0048     766            cjne    r2,#0x00,L006014?
00E7 8000       767            sjmp    L006001?
00E9            768   L006014?:
00E9 BA01C8     769            cjne    r2,#0x01,L006015?
00EC 8000       770            sjmp    L006002?
00EE            771   L006015?:
00EE            772   ;        sourcecode.c:161: case 0:
00EE BA0248     773            cjne    r2,#0x02,L006005?
00F1 8000       774            sjmp    L006003?
00F3            775   L006001?:
00F3            776   ;        sourcecode.c:162: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         777            mov     a,r3
00F4 F4         778            cpl     a
00F5 FA         779            mov     r2,a
00F6 52F1       780            anl     _P0MDIN,a
00F8            781   ;        sourcecode.c:163: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         782            mov     a,r3
00F9 42D4       783            orl     _P0SKIP,a
00FB            784   ;        sourcecode.c:164: break;
00FB            785   ;        sourcecode.c:165: case 1:
00FB 8000       786            sjmp    L006005?
00FD            787   L006002?:
00FD            788   ;        sourcecode.c:166: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         789            mov     a,r3
00FE F4         790            cpl     a
00FF FA         791            mov     r2,a
0100 52F2       792            anl     _P1MDIN,a
0102            793   ;        sourcecode.c:167: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         794            mov     a,r3
0103 42D5       795            orl     _P1SKIP,a
0105            796   ;        sourcecode.c:168: break;
0105            797   ;        sourcecode.c:169: case 2:
0105 8000       798            sjmp    L006005?
0107            799   L006003?:
0107            800   ;        sourcecode.c:170: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         801            mov     a,r3
0108 F4         802            cpl     a
0109 FA         803            mov     r2,a
010A 52F3       804            anl     _P2MDIN,a
010C            805   ;        sourcecode.c:171: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         806            mov     a,r3
010D 42CC       807            orl     _P2SKIP,a
010F            808   ;        sourcecode.c:175: }
010F            809   L006005?:
010F            810   ;        sourcecode.c:176: SFRPAGE = 0x00;
010F 75A700     811            mov     _SFRPAGE,#0x00
0112 22         812            ret
0113            813   ;------------------------------------------------------------
0113            814   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            815   ;------------------------------------------------------------
0113            816   ;pin                       Allocated to registers 
0113            817   ;------------------------------------------------------------
0113            818   ;        sourcecode.c:179: unsigned int ADC_at_Pin(unsigned char pin)
0113            819   ;        -----------------------------------------
0113            820   ;         function ADC_at_Pin
0113            821   ;        -----------------------------------------
0113            822   _ADC_at_Pin:
0113 8582BB     823            mov     _ADC0MX,dpl
0116            824   ;        sourcecode.c:182: ADINT = 0;
0116 C2ED       825            clr     _ADINT
0118            826   ;        sourcecode.c:183: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       827            setb    _ADBUSY
011A            828   ;        sourcecode.c:184: while (!ADINT); // Wait for conversion to complete
011A            829   L007001?:
011A 30EDC8     830            jnb     _ADINT,L007001?
011D            831   ;        sourcecode.c:185: return (ADC0);
011D 85BD82     832            mov     dpl,_ADC0
0120 85BE83     833            mov     dph,(_ADC0 >> 8)
0123 22         834            ret
0124            835   ;------------------------------------------------------------
0124            836   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            837   ;------------------------------------------------------------
0124            838   ;pin                       Allocated to registers r2 
0124            839   ;------------------------------------------------------------
0124            840   ;        sourcecode.c:188: float Volts_at_Pin(unsigned char pin)
0124            841   ;        -----------------------------------------
0124            842   ;         function Volts_at_Pin
0124            843   ;        -----------------------------------------
0124            844   _Volts_at_Pin:
0124            845   ;        sourcecode.c:190: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     846            lcall   _ADC_at_Pin
0127 120000     847            lcall   ___uint2fs
012A AA82       848            mov     r2,dpl
012C AB83       849            mov     r3,dph
012E ACF0       850            mov     r4,b
0130 FD         851            mov     r5,a
0131 C002       852            push    ar2
0133 C003       853            push    ar3
0135 C004       854            push    ar4
0137 C005       855            push    ar5
0139 903333     856            mov     dptr,#0x3333
013C 75F053     857            mov     b,#0x53
013F 7440       858            mov     a,#0x40
0141 120000     859            lcall   ___fsmul
0144 AA82       860            mov     r2,dpl
0146 AB83       861            mov     r3,dph
0148 ACF0       862            mov     r4,b
014A FD         863            mov     r5,a
014B E581       864            mov     a,sp
014D 24FC       865            add     a,#0xfc
014F F581       866            mov     sp,a
0151 E4         867            clr     a
0152 C0E0       868            push    acc
0154 74FC       869            mov     a,#0xFC
0156 C0E0       870            push    acc
0158 747F       871            mov     a,#0x7F
015A C0E0       872            push    acc
015C 7446       873            mov     a,#0x46
015E C0E0       874            push    acc
0160 8A82       875            mov     dpl,r2
0162 8B83       876            mov     dph,r3
0164 8CF0       877            mov     b,r4
0166 ED         878            mov     a,r5
0167 120000     879            lcall   ___fsdiv
016A AA82       880            mov     r2,dpl
016C AB83       881            mov     r3,dph
016E ACF0       882            mov     r4,b
0170 FD         883            mov     r5,a
0171 E581       884            mov     a,sp
0173 24FC       885            add     a,#0xfc
0175 F581       886            mov     sp,a
0177 8A82       887            mov     dpl,r2
0179 8B83       888            mov     dph,r3
017B 8CF0       889            mov     b,r4
017D ED         890            mov     a,r5
017E 22         891            ret
017F            892   ;------------------------------------------------------------
017F            893   ;Allocation info for local variables in function 'TIMER0_Init'
017F            894   ;------------------------------------------------------------
017F            895   ;------------------------------------------------------------
017F            896   ;        sourcecode.c:193: void TIMER0_Init(void)
017F            897   ;        -----------------------------------------
017F            898   ;         function TIMER0_Init
017F            899   ;        -----------------------------------------
017F            900   _TIMER0_Init:
017F            901   ;        sourcecode.c:195: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
017F 5389F0     902            anl     _TMOD,#0xF0
0182            903   ;        sourcecode.c:196: TMOD|=0b_0000_0101; // Timer/Counter 0 used as a 16-bit counter
0182 438905     904            orl     _TMOD,#0x05
0185            905   ;        sourcecode.c:197: TR0=0; // Stop Timer/Counter 0
0185 C28C       906            clr     _TR0
0187 22         907            ret
0188            908   ;------------------------------------------------------------
0188            909   ;Allocation info for local variables in function 'main'
0188            910   ;------------------------------------------------------------
0188            911   ;F                         Allocated to registers r6 r7 r2 r3 
0188            912   ;Period                    Allocated to registers 
0188            913   ;v                         Allocated with name '_main_v_1_61'
0188            914   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0188            915   ;------------------------------------------------------------
0188            916   ;        sourcecode.c:200: void main (void)
0188            917   ;        -----------------------------------------
0188            918   ;         function main
0188            919   ;        -----------------------------------------
0188            920   _main:
0188            921   ;        sourcecode.c:206: TIMER0_Init();
0188 120000     922            lcall   _TIMER0_Init
018B            923   ;        sourcecode.c:208: waitms(500); // Give PuTTy a chance to start before sending
018B 9001F4     924            mov     dptr,#0x01F4
018E 120000     925            lcall   _waitms
0191            926   ;        sourcecode.c:209: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 7408       927            mov     a,#__str_0
0193 C0E0       928            push    acc
0195 74BD       929            mov     a,#(__str_0 >> 8)
0197 C0E0       930            push    acc
0199 7480       931            mov     a,#0x80
019B C0E0       932            push    acc
019D 120000     933            lcall   _printf
01A0 1581       934            dec     sp
01A2 1581       935            dec     sp
01A4 1581       936            dec     sp
01A6            937   ;        sourcecode.c:214: __FILE__, __DATE__, __TIME__);
01A6            938   ;        sourcecode.c:213: "Compiled: %s, %s\n\n",
01A6 7488       939            mov     a,#__str_4
01A8 C0E0       940            push    acc
01AA 74BD       941            mov     a,#(__str_4 >> 8)
01AC C0E0       942            push    acc
01AE 7480       943            mov     a,#0x80
01B0 C0E0       944            push    acc
01B2 74C8       945            mov     a,#__str_3
01B4 C0E0       946            push    acc
01B6 74BD       947            mov     a,#(__str_3 >> 8)
01B8 C0E0       948            push    acc
01BA 7480       949            mov     a,#0x80
01BC C0E0       950            push    acc
01BE 7408       951            mov     a,#__str_2
01C0 C0E0       952            push    acc
01C2 74BE       953            mov     a,#(__str_2 >> 8)
01C4 C0E0       954            push    acc
01C6 7480       955            mov     a,#0x80
01C8 C0E0       956            push    acc
01CA 7448       957            mov     a,#__str_1
01CC C0E0       958            push    acc
01CE 74BE       959            mov     a,#(__str_1 >> 8)
01D0 C0E0       960            push    acc
01D2 7480       961            mov     a,#0x80
01D4 C0E0       962            push    acc
01D6 120000     963            lcall   _printf
01D9 E581       964            mov     a,sp
01DB 24F4       965            add     a,#0xf4
01DD F581       966            mov     sp,a
01DF            967   ;        sourcecode.c:216: InitPinADC(2, 1); // Configure P2.1 as analog input
01DF 758801     968            mov     _InitPinADC_PARM_2,#0x01
01E2 758202     969            mov     dpl,#0x02
01E5 120000     970            lcall   _InitPinADC
01E8            971   ;        sourcecode.c:217: InitPinADC(2, 2); // Configure P2.2 as analog input
01E8 758802     972            mov     _InitPinADC_PARM_2,#0x02
01EB 758202     973            mov     dpl,#0x02
01EE 120000     974            lcall   _InitPinADC
01F1            975   ;        sourcecode.c:219: InitADC();
01F1 120000     976            lcall   _InitADC
01F4            977   ;        sourcecode.c:221: while(1)
01F4            978   L010002?:
01F4            979   ;        sourcecode.c:223: TL0=0;
01F4 758A00     980            mov     _TL0,#0x00
01F7            981   ;        sourcecode.c:224: TH0=0;
01F7 758C00     982            mov     _TH0,#0x00
01FA            983   ;        sourcecode.c:225: overflow_count=0;
01FA 751800     984            mov     _overflow_count,#0x00
01FD            985   ;        sourcecode.c:226: TF0=0;
01FD C28D       986            clr     _TF0
01FF            987   ;        sourcecode.c:227: TR0=1; // Start Timer/Counter 0
01FF D28C       988            setb    _TR0
0201            989   ;        sourcecode.c:229: TR0=0; // Stop Timer/Counter 0
0201 C28C       990            clr     _TR0
0203            991   ;        sourcecode.c:230: F=overflow_count*0x10000L+TH0*0x100L+TL0;
0203 AA8C       992            mov     r2,_TH0
0205 7B00       993            mov     r3,#0x00
0207 7C00       994            mov     r4,#0x00
0209 8CCB       995            mov     (_main_sloc0_1_0 + 3),r4
020B 8BCA       996            mov     (_main_sloc0_1_0 + 2),r3
020D 8AC9       997            mov     (_main_sloc0_1_0 + 1),r2
020F 75C800     998            mov     _main_sloc0_1_0,#0x00
0212 AE8A       999            mov     r6,_TL0
0214 E4        1000            clr     a
0215 FF        1001            mov     r7,a
0216 33        1002            rlc     a
0217 95E0      1003            subb    a,acc
0219 FA        1004            mov     r2,a
021A FB        1005            mov     r3,a
021B EE        1006            mov     a,r6
021C 25C8      1007            add     a,_main_sloc0_1_0
021E FE        1008            mov     r6,a
021F EF        1009            mov     a,r7
0220 35C9      1010            addc    a,(_main_sloc0_1_0 + 1)
0222 FF        1011            mov     r7,a
0223 EA        1012            mov     a,r2
0224 35CA      1013            addc    a,(_main_sloc0_1_0 + 2)
0226 FA        1014            mov     r2,a
0227 EB        1015            mov     a,r3
0228 35CB      1016            addc    a,(_main_sloc0_1_0 + 3)
022A FB        1017            mov     r3,a
022B           1018   ;        sourcecode.c:231: printf("\rf=%luHz ", F); // print frequency
022B C006      1019            push    ar6
022D C007      1020            push    ar7
022F C002      1021            push    ar2
0231 C003      1022            push    ar3
0233 74C8      1023            mov     a,#__str_5
0235 C0E0      1024            push    acc
0237 74BE      1025            mov     a,#(__str_5 >> 8)
0239 C0E0      1026            push    acc
023B 7480      1027            mov     a,#0x80
023D C0E0      1028            push    acc
023F 120000    1029            lcall   _printf
0242 E581      1030            mov     a,sp
0244 24F9      1031            add     a,#0xf9
0246 F581      1032            mov     sp,a
0248           1033   ;        sourcecode.c:238: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0248 75820E    1034            mov     dpl,#0x0E
024B 120000    1035            lcall   _Volts_at_Pin
024E AA82      1036            mov     r2,dpl
0250 AB83      1037            mov     r3,dph
0252 ACF0      1038            mov     r4,b
0254 FD        1039            mov     r5,a
0255 8A88      1040            mov     _main_v_1_61,r2
0257 8B89      1041            mov     (_main_v_1_61 + 1),r3
0259 8C8A      1042            mov     (_main_v_1_61 + 2),r4
025B 8D8B      1043            mov     (_main_v_1_61 + 3),r5
025D           1044   ;        sourcecode.c:239: v[1] = Volts_at_Pin(QFP32_MUX_P2_2);
025D 75820F    1045            mov     dpl,#0x0F
0260 120000    1046            lcall   _Volts_at_Pin
0263 AA82      1047            mov     r2,dpl
0265 AB83      1048            mov     r3,dph
0267 ACF0      1049            mov     r4,b
0269 FD        1050            mov     r5,a
026A 8A8C      1051            mov     (_main_v_1_61 + 0x0004),r2
026C 8B8D      1052            mov     ((_main_v_1_61 + 0x0004) + 1),r3
026E 8C8E      1053            mov     ((_main_v_1_61 + 0x0004) + 2),r4
0270 8D8F      1054            mov     ((_main_v_1_61 + 0x0004) + 3),r5
0272           1055   ;        sourcecode.c:240: printf ("V@P2.1=%7.5fV, V@P2.2=%7.5fV", v[0], v[1]); // print voltages
0272 C002      1056            push    ar2
0274 C003      1057            push    ar3
0276 C004      1058            push    ar4
0278 C005      1059            push    ar5
027A C088      1060            push    _main_v_1_61
027C C089      1061            push    (_main_v_1_61 + 1)
027E C08A      1062            push    (_main_v_1_61 + 2)
0280 C08B      1063            push    (_main_v_1_61 + 3)
0282 7408      1064            mov     a,#__str_6
0284 C0E0      1065            push    acc
0286 74BF      1066            mov     a,#(__str_6 >> 8)
0288 C0E0      1067            push    acc
028A 7480      1068            mov     a,#0x80
028C C0E0      1069            push    acc
028E 120000    1070            lcall   _printf
0291 E581      1071            mov     a,sp
0293 24F5      1072            add     a,#0xf5
0295 F581      1073            mov     sp,a
0297           1074   ;        sourcecode.c:242: printf("\x1b[0K"); // ANSI: Clear from cursor to end of line.
0297 7448      1075            mov     a,#__str_7
0299 C0E0      1076            push    acc
029B 74BF      1077            mov     a,#(__str_7 >> 8)
029D C0E0      1078            push    acc
029F 7480      1079            mov     a,#0x80
02A1 C0E0      1080            push    acc
02A3 120000    1081            lcall   _printf
02A6 1581      1082            dec     sp
02A8 1581      1083            dec     sp
02AA 1581      1084            dec     sp
02AC           1085   ;        sourcecode.c:243: waitms(1);
02AC 900001    1086            mov     dptr,#0x0001
02AF 120000    1087            lcall   _waitms
02B2 020000    1088            ljmp    L010002?
02B5           1089            rseg R_CSEG
02B5           1090   
0000           1091            rseg R_XINIT
0000           1092   
0000           1093            rseg R_CONST
0000           1094   __str_0:
0000 1B        1095            db 0x1B
0001 5B324A    1096            db '[2J'
0004 00        1097            db 0x00
0005           1098   __str_1:
0005 41444320  1099            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1100            db 0x0A
0016 46696C65  1101            db 'File: %s'
     3A202573
001E 0A        1102            db 0x0A
001F 436F6D70  1103            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1104            db 0x0A
0030 0A        1105            db 0x0A
0031 00        1106            db 0x00
0032           1107   __str_2:
0032 736F7572  1108            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1109            db 0x00
003F           1110   __str_3:
003F 4D617220  1111            db 'Mar  4 2024'
     20342032
     303234
004A 00        1112            db 0x00
004B           1113   __str_4:
004B 31393A34  1114            db '19:48:45'
     383A3435
0053 00        1115            db 0x00
0054           1116   __str_5:
0054 0D        1117            db 0x0D
0055 663D256C  1118            db 'f=%luHz '
     75487A20
005D 00        1119            db 0x00
005E           1120   __str_6:
005E 56405032  1121            db 'V@P2.1=%7.5fV, V@P2.2=%7.5fV'
     2E313D25
     372E3566
     562C2056
     4050322E
     323D2537
     2E356656
007A 00        1122            db 0x00
007B           1123   __str_7:
007B 1B        1124            db 0x1B
007C 5B304B    1125            db '[0K'
007F 00        1126            db 0x00
0080           1127   
0003           1128            CSEG
0003           1129   
0003           1130   end
