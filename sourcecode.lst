0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Mar 04 20:14:46 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _ADC_at_Pin
0000             32            public _InitPinADC
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public _InitADC
0000             36            public __c51_external_startup
0000             37            public _v2
0000             38            public _v1
0000             39            public _v2_max
0000             40            public _v1_max
0000             41            public _v2_last
0000             42            public _v1_last
0000             43            public _v
0000             44            public _Period
0000             45            public _F
0000             46            public _count
0000             47            public _overflow_count
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _overflow_count:
0000            497            ds 1
0001            498   _count:
0001            499            ds 2
0003            500   _F:
0003            501            ds 4
0007            502   _Period:
0007            503            ds 4
000B            504   _v:
000B            505            ds 16
001B            506   _v1_last:
001B            507            ds 4
001F            508   _v2_last:
001F            509            ds 4
0023            510   _v1_max:
0023            511            ds 4
0027            512   _v2_max:
0027            513            ds 4
002B            514   _v1:
002B            515            ds 4
002F            516   _v2:
002F            517            ds 4
0033            518   ;--------------------------------------------------------
0033            519   ; overlayable items in internal ram 
0033            520   ;--------------------------------------------------------
0000            521            rseg    R_OSEG
0000            522            rseg    R_OSEG
0000            523   _InitPinADC_PARM_2:
0000            524            ds 1
0001            525            rseg    R_OSEG
0001            526   ;--------------------------------------------------------
0001            527   ; indirectly addressable internal ram data
0001            528   ;--------------------------------------------------------
0000            529            rseg R_ISEG
0000            530   ;--------------------------------------------------------
0000            531   ; absolute internal ram data
0000            532   ;--------------------------------------------------------
0000            533            DSEG
0000            534   ;--------------------------------------------------------
0000            535   ; bit data
0000            536   ;--------------------------------------------------------
0000            537            rseg R_BSEG
0000            538   ;--------------------------------------------------------
0000            539   ; paged external ram data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_PSEG
0000            542   ;--------------------------------------------------------
0000            543   ; external ram data
0000            544   ;--------------------------------------------------------
0000            545            rseg R_XSEG
0000            546   ;--------------------------------------------------------
0000            547   ; absolute external ram data
0000            548   ;--------------------------------------------------------
0000            549            XSEG
0000            550   ;--------------------------------------------------------
0000            551   ; external initialized ram data
0000            552   ;--------------------------------------------------------
0000            553            rseg R_IXSEG
0000            554            rseg R_HOME
0000            555            rseg R_GSINIT
0000            556            rseg R_CSEG
0000            557   ;--------------------------------------------------------
0000            558   ; Reset entry point and interrupt vectors
0000            559   ;--------------------------------------------------------
0000            560            CSEG at 0x0000
0000 020000     561            ljmp    _crt0
0003            562   ;--------------------------------------------------------
0003            563   ; global & static initialisations
0003            564   ;--------------------------------------------------------
0000            565            rseg R_HOME
0000            566            rseg R_GSINIT
0000            567            rseg R_GSINIT
0000            568   ;--------------------------------------------------------
0000            569   ; data variables initialization
0000            570   ;--------------------------------------------------------
0000            571            rseg R_DINIT
0000            572   ;        sourcecode.c:18: float v1_last = 0; float v2_last = 0; float v1_max = 0; float v2_max = 0;
0000 755800     573            mov     _v1_last,#0x00
0003 755900     574            mov     (_v1_last + 1),#0x00
0006 755A00     575            mov     (_v1_last + 2),#0x00
0009 755B00     576            mov     (_v1_last + 3),#0x00
000C            577   ;        sourcecode.c:18: float v1 = 0; float v2 = 0;
000C 751800     578            mov     _v2_last,#0x00
000F 751900     579            mov     (_v2_last + 1),#0x00
0012 751A00     580            mov     (_v2_last + 2),#0x00
0015 751B00     581            mov     (_v2_last + 3),#0x00
0018            582   ;        sourcecode.c:18: float v1_last = 0; float v2_last = 0; float v1_max = 0; float v2_max = 0;
0018 75D800     583            mov     _v1_max,#0x00
001B 75D900     584            mov     (_v1_max + 1),#0x00
001E 75DA00     585            mov     (_v1_max + 2),#0x00
0021 75DB00     586            mov     (_v1_max + 3),#0x00
0024            587   ;        sourcecode.c:18: float v1 = 0; float v2 = 0;
0024 759800     588            mov     _v2_max,#0x00
0027 759900     589            mov     (_v2_max + 1),#0x00
002A 759A00     590            mov     (_v2_max + 2),#0x00
002D 759B00     591            mov     (_v2_max + 3),#0x00
0030            592   ;        sourcecode.c:19: 
0030 755800     593            mov     _v1,#0x00
0033 755900     594            mov     (_v1 + 1),#0x00
0036 755A00     595            mov     (_v1 + 2),#0x00
0039 755B00     596            mov     (_v1 + 3),#0x00
003C            597   ;        sourcecode.c:19: float v1 = 0; float v2 = 0;
003C 751800     598            mov     _v2,#0x00
003F 751900     599            mov     (_v2 + 1),#0x00
0042 751A00     600            mov     (_v2 + 2),#0x00
0045 751B00     601            mov     (_v2 + 3),#0x00
0048            602            ; The linker places a 'ret' at the end of segment R_DINIT.
0048            603   ;--------------------------------------------------------
0048            604   ; code
0048            605   ;--------------------------------------------------------
0000            606            rseg R_CSEG
0000            607   ;------------------------------------------------------------
0000            608   ;Allocation info for local variables in function '_c51_external_startup'
0000            609   ;------------------------------------------------------------
0000            610   ;------------------------------------------------------------
0000            611   ;        sourcecode.c:21: char _c51_external_startup (void)
0000            612   ;        -----------------------------------------
0000            613   ;         function _c51_external_startup
0000            614   ;        -----------------------------------------
0000            615   __c51_external_startup:
0000            616            using   0
0000            617   ;        sourcecode.c:24: SFRPAGE = 0x00;
0000 75A700     618            mov     _SFRPAGE,#0x00
0003            619   ;        sourcecode.c:25: WDTCN = 0xDE; //First key
0003 7597DE     620            mov     _WDTCN,#0xDE
0006            621   ;        sourcecode.c:26: WDTCN = 0xAD; //Second key
0006 7597AD     622            mov     _WDTCN,#0xAD
0009            623   ;        sourcecode.c:28: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     624            mov     _VDM0CN,#0x80
000C            625   ;        sourcecode.c:29: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     626            mov     _RSTSRC,#0x06
000F            627   ;        sourcecode.c:36: SFRPAGE = 0x10;
000F 75A710     628            mov     _SFRPAGE,#0x10
0012            629   ;        sourcecode.c:37: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     630            mov     _PFE0CN,#0x20
0015            631   ;        sourcecode.c:38: SFRPAGE = 0x00;
0015 75A700     632            mov     _SFRPAGE,#0x00
0018            633   ;        sourcecode.c:59: CLKSEL = 0x00;
0018 75A900     634            mov     _CLKSEL,#0x00
001B            635   ;        sourcecode.c:60: CLKSEL = 0x00;
001B 75A900     636            mov     _CLKSEL,#0x00
001E            637   ;        sourcecode.c:61: while ((CLKSEL & 0x80) == 0);
001E            638   L002001?:
001E E5A9       639            mov     a,_CLKSEL
0020 30E748     640            jnb     acc.7,L002001?
0023            641   ;        sourcecode.c:62: CLKSEL = 0x03;
0023 75A903     642            mov     _CLKSEL,#0x03
0026            643   ;        sourcecode.c:63: CLKSEL = 0x03;
0026 75A903     644            mov     _CLKSEL,#0x03
0029            645   ;        sourcecode.c:64: while ((CLKSEL & 0x80) == 0);
0029            646   L002004?:
0029 E5A9       647            mov     a,_CLKSEL
002B 30E7C8     648            jnb     acc.7,L002004?
002E            649   ;        sourcecode.c:69: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     650            orl     _P0MDOUT,#0x10
0031            651   ;        sourcecode.c:70: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     652            mov     _XBR0,#0x01
0034            653   ;        sourcecode.c:71: XBR1     = 0X00;
0034 75E200     654            mov     _XBR1,#0x00
0037            655   ;        sourcecode.c:72: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     656            mov     _XBR2,#0x40
003A            657   ;        sourcecode.c:78: SCON0 = 0x10;
003A 759810     658            mov     _SCON0,#0x10
003D            659   ;        sourcecode.c:79: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     660            mov     _TH1,#0xE6
0040            661   ;        sourcecode.c:80: TL1 = TH1;      // Init Timer1
0040 858D8B     662            mov     _TL1,_TH1
0043            663   ;        sourcecode.c:81: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     664            anl     _TMOD,#0x0F
0046            665   ;        sourcecode.c:82: TMOD |=  0x20;                       
0046 438920     666            orl     _TMOD,#0x20
0049            667   ;        sourcecode.c:83: TR1 = 1; // START Timer1
0049 D28E       668            setb    _TR1
004B            669   ;        sourcecode.c:84: TI = 1;  // Indicate TX0 ready
004B D299       670            setb    _TI
004D            671   ;        sourcecode.c:86: return 0;
004D 758200     672            mov     dpl,#0x00
0050 22         673            ret
0051            674   ;------------------------------------------------------------
0051            675   ;Allocation info for local variables in function 'InitADC'
0051            676   ;------------------------------------------------------------
0051            677   ;------------------------------------------------------------
0051            678   ;        sourcecode.c:89: void InitADC (void)
0051            679   ;        -----------------------------------------
0051            680   ;         function InitADC
0051            681   ;        -----------------------------------------
0051            682   _InitADC:
0051            683   ;        sourcecode.c:91: SFRPAGE = 0x00;
0051 75A700     684            mov     _SFRPAGE,#0x00
0054            685   ;        sourcecode.c:92: ADEN=0; // Disable ADC
0054 C2EF       686            clr     _ADEN
0056            687   ;        sourcecode.c:97: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     688            mov     _ADC0CN1,#0x80
0059            689   ;        sourcecode.c:101: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     690            mov     _ADC0CF0,#0x20
005C            691   ;        sourcecode.c:105: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     692            mov     _ADC0CF1,#0x1E
005F            693   ;        sourcecode.c:114: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     694            mov     _ADC0CN0,#0x00
0062            695   ;        sourcecode.c:119: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     696            mov     _ADC0CF2,#0x3F
0065            697   ;        sourcecode.c:123: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     698            mov     _ADC0CN2,#0x00
0068            699   ;        sourcecode.c:125: ADEN=1; // Enable ADC
0068 D2EF       700            setb    _ADEN
006A 22         701            ret
006B            702   ;------------------------------------------------------------
006B            703   ;Allocation info for local variables in function 'Timer3us'
006B            704   ;------------------------------------------------------------
006B            705   ;us                        Allocated to registers r2 
006B            706   ;i                         Allocated to registers r3 
006B            707   ;------------------------------------------------------------
006B            708   ;        sourcecode.c:129: void Timer3us(unsigned char us)
006B            709   ;        -----------------------------------------
006B            710   ;         function Timer3us
006B            711   ;        -----------------------------------------
006B            712   _Timer3us:
006B AA82       713            mov     r2,dpl
006D            714   ;        sourcecode.c:134: CKCON0|=0b_0100_0000;
006D 438E40     715            orl     _CKCON0,#0x40
0070            716   ;        sourcecode.c:136: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     717            mov     _TMR3RL,#0xB8
0073 7593FF     718            mov     (_TMR3RL >> 8),#0xFF
0076            719   ;        sourcecode.c:137: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     720            mov     _TMR3,_TMR3RL
0079 859395     721            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            722   ;        sourcecode.c:139: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     723            mov     _TMR3CN0,#0x04
007F            724   ;        sourcecode.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       725            mov     r3,#0x00
0081            726   L004004?:
0081 C3         727            clr     c
0082 EB         728            mov     a,r3
0083 9A         729            subb    a,r2
0084 5000       730            jnc     L004007?
0086            731   ;        sourcecode.c:142: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            732   L004001?:
0086 E591       733            mov     a,_TMR3CN0
0088 30E7C8     734            jnb     acc.7,L004001?
008B            735   ;        sourcecode.c:143: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     736            anl     _TMR3CN0,#0x7F
008E            737   ;        sourcecode.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         738            inc     r3
008F 8000       739            sjmp    L004004?
0091            740   L004007?:
0091            741   ;        sourcecode.c:145: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     742            mov     _TMR3CN0,#0x00
0094 22         743            ret
0095            744   ;------------------------------------------------------------
0095            745   ;Allocation info for local variables in function 'waitms'
0095            746   ;------------------------------------------------------------
0095            747   ;ms                        Allocated to registers r2 r3 
0095            748   ;j                         Allocated to registers r4 r5 
0095            749   ;k                         Allocated to registers r6 
0095            750   ;------------------------------------------------------------
0095            751   ;        sourcecode.c:148: void waitms (unsigned int ms)
0095            752   ;        -----------------------------------------
0095            753   ;         function waitms
0095            754   ;        -----------------------------------------
0095            755   _waitms:
0095 AA82       756            mov     r2,dpl
0097 AB83       757            mov     r3,dph
0099            758   ;        sourcecode.c:152: for(j=0; j<ms; j++)
0099 7C00       759            mov     r4,#0x00
009B 7D00       760            mov     r5,#0x00
009D            761   L005005?:
009D C3         762            clr     c
009E EC         763            mov     a,r4
009F 9A         764            subb    a,r2
00A0 ED         765            mov     a,r5
00A1 9B         766            subb    a,r3
00A2 5000       767            jnc     L005009?
00A4            768   ;        sourcecode.c:153: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       769            mov     r6,#0x00
00A6            770   L005001?:
00A6 BE0408     771            cjne    r6,#0x04,L005018?
00A9            772   L005018?:
00A9 5000       773            jnc     L005007?
00AB 7582FA     774            mov     dpl,#0xFA
00AE C002       775            push    ar2
00B0 C003       776            push    ar3
00B2 C004       777            push    ar4
00B4 C005       778            push    ar5
00B6 C006       779            push    ar6
00B8 120000     780            lcall   _Timer3us
00BB D006       781            pop     ar6
00BD D005       782            pop     ar5
00BF D004       783            pop     ar4
00C1 D003       784            pop     ar3
00C3 D002       785            pop     ar2
00C5 0E         786            inc     r6
00C6 8000       787            sjmp    L005001?
00C8            788   L005007?:
00C8            789   ;        sourcecode.c:152: for(j=0; j<ms; j++)
00C8 0C         790            inc     r4
00C9 BC0048     791            cjne    r4,#0x00,L005005?
00CC 0D         792            inc     r5
00CD 8000       793            sjmp    L005005?
00CF            794   L005009?:
00CF 22         795            ret
00D0            796   ;------------------------------------------------------------
00D0            797   ;Allocation info for local variables in function 'InitPinADC'
00D0            798   ;------------------------------------------------------------
00D0            799   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            800   ;portno                    Allocated to registers r2 
00D0            801   ;mask                      Allocated to registers r3 
00D0            802   ;------------------------------------------------------------
00D0            803   ;        sourcecode.c:158: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            804   ;        -----------------------------------------
00D0            805   ;         function InitPinADC
00D0            806   ;        -----------------------------------------
00D0            807   _InitPinADC:
00D0 AA82       808            mov     r2,dpl
00D2            809   ;        sourcecode.c:162: mask=1<<pinno;
00D2 8588F0     810            mov     b,_InitPinADC_PARM_2
00D5 05F0       811            inc     b
00D7 7401       812            mov     a,#0x01
00D9 8000       813            sjmp    L006013?
00DB            814   L006011?:
00DB 25E0       815            add     a,acc
00DD            816   L006013?:
00DD D5F008     817            djnz    b,L006011?
00E0 FB         818            mov     r3,a
00E1            819   ;        sourcecode.c:164: SFRPAGE = 0x20;
00E1 75A720     820            mov     _SFRPAGE,#0x20
00E4            821   ;        sourcecode.c:165: switch (portno)
00E4 BA0048     822            cjne    r2,#0x00,L006014?
00E7 8000       823            sjmp    L006001?
00E9            824   L006014?:
00E9 BA01C8     825            cjne    r2,#0x01,L006015?
00EC 8000       826            sjmp    L006002?
00EE            827   L006015?:
00EE            828   ;        sourcecode.c:167: case 0:
00EE BA0248     829            cjne    r2,#0x02,L006005?
00F1 8000       830            sjmp    L006003?
00F3            831   L006001?:
00F3            832   ;        sourcecode.c:168: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         833            mov     a,r3
00F4 F4         834            cpl     a
00F5 FA         835            mov     r2,a
00F6 52F1       836            anl     _P0MDIN,a
00F8            837   ;        sourcecode.c:169: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         838            mov     a,r3
00F9 42D4       839            orl     _P0SKIP,a
00FB            840   ;        sourcecode.c:170: break;
00FB            841   ;        sourcecode.c:171: case 1:
00FB 8000       842            sjmp    L006005?
00FD            843   L006002?:
00FD            844   ;        sourcecode.c:172: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         845            mov     a,r3
00FE F4         846            cpl     a
00FF FA         847            mov     r2,a
0100 52F2       848            anl     _P1MDIN,a
0102            849   ;        sourcecode.c:173: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         850            mov     a,r3
0103 42D5       851            orl     _P1SKIP,a
0105            852   ;        sourcecode.c:174: break;
0105            853   ;        sourcecode.c:175: case 2:
0105 8000       854            sjmp    L006005?
0107            855   L006003?:
0107            856   ;        sourcecode.c:176: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         857            mov     a,r3
0108 F4         858            cpl     a
0109 FA         859            mov     r2,a
010A 52F3       860            anl     _P2MDIN,a
010C            861   ;        sourcecode.c:177: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         862            mov     a,r3
010D 42CC       863            orl     _P2SKIP,a
010F            864   ;        sourcecode.c:181: }
010F            865   L006005?:
010F            866   ;        sourcecode.c:182: SFRPAGE = 0x00;
010F 75A700     867            mov     _SFRPAGE,#0x00
0112 22         868            ret
0113            869   ;------------------------------------------------------------
0113            870   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            871   ;------------------------------------------------------------
0113            872   ;pin                       Allocated to registers 
0113            873   ;------------------------------------------------------------
0113            874   ;        sourcecode.c:185: unsigned int ADC_at_Pin(unsigned char pin)
0113            875   ;        -----------------------------------------
0113            876   ;         function ADC_at_Pin
0113            877   ;        -----------------------------------------
0113            878   _ADC_at_Pin:
0113 8582BB     879            mov     _ADC0MX,dpl
0116            880   ;        sourcecode.c:188: ADINT = 0;
0116 C2ED       881            clr     _ADINT
0118            882   ;        sourcecode.c:189: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       883            setb    _ADBUSY
011A            884   ;        sourcecode.c:190: while (!ADINT); // Wait for conversion to complete
011A            885   L007001?:
011A 30EDC8     886            jnb     _ADINT,L007001?
011D            887   ;        sourcecode.c:191: return (ADC0);
011D 85BD82     888            mov     dpl,_ADC0
0120 85BE83     889            mov     dph,(_ADC0 >> 8)
0123 22         890            ret
0124            891   ;------------------------------------------------------------
0124            892   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            893   ;------------------------------------------------------------
0124            894   ;pin                       Allocated to registers r2 
0124            895   ;------------------------------------------------------------
0124            896   ;        sourcecode.c:194: float Volts_at_Pin(unsigned char pin)
0124            897   ;        -----------------------------------------
0124            898   ;         function Volts_at_Pin
0124            899   ;        -----------------------------------------
0124            900   _Volts_at_Pin:
0124            901   ;        sourcecode.c:196: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     902            lcall   _ADC_at_Pin
0127 120000     903            lcall   ___uint2fs
012A AA82       904            mov     r2,dpl
012C AB83       905            mov     r3,dph
012E ACF0       906            mov     r4,b
0130 FD         907            mov     r5,a
0131 C002       908            push    ar2
0133 C003       909            push    ar3
0135 C004       910            push    ar4
0137 C005       911            push    ar5
0139 903333     912            mov     dptr,#0x3333
013C 75F053     913            mov     b,#0x53
013F 7440       914            mov     a,#0x40
0141 120000     915            lcall   ___fsmul
0144 AA82       916            mov     r2,dpl
0146 AB83       917            mov     r3,dph
0148 ACF0       918            mov     r4,b
014A FD         919            mov     r5,a
014B E581       920            mov     a,sp
014D 24FC       921            add     a,#0xfc
014F F581       922            mov     sp,a
0151 E4         923            clr     a
0152 C0E0       924            push    acc
0154 74FC       925            mov     a,#0xFC
0156 C0E0       926            push    acc
0158 747F       927            mov     a,#0x7F
015A C0E0       928            push    acc
015C 7446       929            mov     a,#0x46
015E C0E0       930            push    acc
0160 8A82       931            mov     dpl,r2
0162 8B83       932            mov     dph,r3
0164 8CF0       933            mov     b,r4
0166 ED         934            mov     a,r5
0167 120000     935            lcall   ___fsdiv
016A AA82       936            mov     r2,dpl
016C AB83       937            mov     r3,dph
016E ACF0       938            mov     r4,b
0170 FD         939            mov     r5,a
0171 E581       940            mov     a,sp
0173 24FC       941            add     a,#0xfc
0175 F581       942            mov     sp,a
0177 8A82       943            mov     dpl,r2
0179 8B83       944            mov     dph,r3
017B 8CF0       945            mov     b,r4
017D ED         946            mov     a,r5
017E 22         947            ret
017F            948   ;------------------------------------------------------------
017F            949   ;Allocation info for local variables in function 'TIMER0_Init'
017F            950   ;------------------------------------------------------------
017F            951   ;------------------------------------------------------------
017F            952   ;        sourcecode.c:199: void TIMER0_Init(void)
017F            953   ;        -----------------------------------------
017F            954   ;         function TIMER0_Init
017F            955   ;        -----------------------------------------
017F            956   _TIMER0_Init:
017F            957   ;        sourcecode.c:201: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
017F 5389F0     958            anl     _TMOD,#0xF0
0182            959   ;        sourcecode.c:202: TMOD|=0b_0000_0101; // Timer/Counter 0 used as a 16-bit counter
0182 438905     960            orl     _TMOD,#0x05
0185            961   ;        sourcecode.c:203: TR0=0; // Stop Timer/Counter 0
0185 C28C       962            clr     _TR0
0187 22         963            ret
0188            964   ;------------------------------------------------------------
0188            965   ;Allocation info for local variables in function 'main'
0188            966   ;------------------------------------------------------------
0188            967   ;------------------------------------------------------------
0188            968   ;        sourcecode.c:206: void main (void)
0188            969   ;        -----------------------------------------
0188            970   ;         function main
0188            971   ;        -----------------------------------------
0188            972   _main:
0188            973   ;        sourcecode.c:210: TIMER0_Init();
0188 120000     974            lcall   _TIMER0_Init
018B            975   ;        sourcecode.c:212: waitms(500); // Give PuTTy a chance to start before sending
018B 9001F4     976            mov     dptr,#0x01F4
018E 120000     977            lcall   _waitms
0191            978   ;        sourcecode.c:213: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 7408       979            mov     a,#__str_0
0193 C0E0       980            push    acc
0195 74BF       981            mov     a,#(__str_0 >> 8)
0197 C0E0       982            push    acc
0199 7480       983            mov     a,#0x80
019B C0E0       984            push    acc
019D 120000     985            lcall   _printf
01A0 1581       986            dec     sp
01A2 1581       987            dec     sp
01A4 1581       988            dec     sp
01A6            989   ;        sourcecode.c:218: __FILE__, __DATE__, __TIME__);
01A6            990   ;        sourcecode.c:217: "Compiled: %s, %s\n\n",
01A6 7488       991            mov     a,#__str_4
01A8 C0E0       992            push    acc
01AA 74BF       993            mov     a,#(__str_4 >> 8)
01AC C0E0       994            push    acc
01AE 7480       995            mov     a,#0x80
01B0 C0E0       996            push    acc
01B2 74C8       997            mov     a,#__str_3
01B4 C0E0       998            push    acc
01B6 74BF       999            mov     a,#(__str_3 >> 8)
01B8 C0E0      1000            push    acc
01BA 7480      1001            mov     a,#0x80
01BC C0E0      1002            push    acc
01BE 7408      1003            mov     a,#__str_2
01C0 C0E0      1004            push    acc
01C2 74C0      1005            mov     a,#(__str_2 >> 8)
01C4 C0E0      1006            push    acc
01C6 7480      1007            mov     a,#0x80
01C8 C0E0      1008            push    acc
01CA 7448      1009            mov     a,#__str_1
01CC C0E0      1010            push    acc
01CE 74C0      1011            mov     a,#(__str_1 >> 8)
01D0 C0E0      1012            push    acc
01D2 7480      1013            mov     a,#0x80
01D4 C0E0      1014            push    acc
01D6 120000    1015            lcall   _printf
01D9 E581      1016            mov     a,sp
01DB 24F4      1017            add     a,#0xf4
01DD F581      1018            mov     sp,a
01DF           1019   ;        sourcecode.c:220: InitPinADC(2, 1); // Configure P2.1 as analog input
01DF 758801    1020            mov     _InitPinADC_PARM_2,#0x01
01E2 758202    1021            mov     dpl,#0x02
01E5 120000    1022            lcall   _InitPinADC
01E8           1023   ;        sourcecode.c:221: InitPinADC(2, 2); // Configure P2.2 as analog input
01E8 758802    1024            mov     _InitPinADC_PARM_2,#0x02
01EB 758202    1025            mov     dpl,#0x02
01EE 120000    1026            lcall   _InitPinADC
01F1           1027   ;        sourcecode.c:223: InitADC();
01F1 120000    1028            lcall   _InitADC
01F4           1029   ;        sourcecode.c:225: while(1)
01F4           1030   L010017?:
01F4           1031   ;        sourcecode.c:228: TR0=0;                                                // Stop timer 0
01F4 C28C      1032            clr     _TR0
01F6           1033   ;        sourcecode.c:229: TMOD=0B_0000_0001;                    // Set timer 0 as 16-bit timer
01F6 758901    1034            mov     _TMOD,#0x01
01F9           1035   ;        sourcecode.c:230: TH0=0; TL0=0;                                 // Reset the timer
01F9 758C00    1036            mov     _TH0,#0x00
01FC 758A00    1037            mov     _TL0,#0x00
01FF           1038   ;        sourcecode.c:231: while (P1_0==1);                      // Wait for the signal to be zero
01FF           1039   L010001?:
01FF 2090C8    1040            jb      _P1_0,L010001?
0202           1041   ;        sourcecode.c:232: while (P1_0==0);                      // Wait for the signal to be one
0202           1042   L010004?:
0202 309008    1043            jnb     _P1_0,L010004?
0205           1044   ;        sourcecode.c:233: TR0=1;                                                // Start timing
0205 D28C      1045            setb    _TR0
0207           1046   ;        sourcecode.c:234: while (P1_0==1);                      // Wait for the signal to be zero
0207           1047   L010007?:
0207 209048    1048            jb      _P1_0,L010007?
020A           1049   ;        sourcecode.c:235: TR0=0;                                                // Stop timer 0
020A C28C      1050            clr     _TR0
020C           1051   ;        sourcecode.c:237: Period=(TH0*0x100+TL0)*4;     // Assume Period is unsigned int
020C AB8C      1052            mov     r3,_TH0
020E 7A00      1053            mov     r2,#0x00
0210 AC8A      1054            mov     r4,_TL0
0212 7D00      1055            mov     r5,#0x00
0214 EC        1056            mov     a,r4
0215 2A        1057            add     a,r2
0216 FA        1058            mov     r2,a
0217 ED        1059            mov     a,r5
0218 3B        1060            addc    a,r3
0219 CA        1061            xch     a,r2
021A 25E0      1062            add     a,acc
021C CA        1063            xch     a,r2
021D 33        1064            rlc     a
021E CA        1065            xch     a,r2
021F 25E0      1066            add     a,acc
0221 CA        1067            xch     a,r2
0222 33        1068            rlc     a
0223 FB        1069            mov     r3,a
0224 8AD8      1070            mov     _Period,r2
0226 EB        1071            mov     a,r3
0227 F5D9      1072            mov     (_Period + 1),a
0229 33        1073            rlc     a
022A 95E0      1074            subb    a,acc
022C F5DA      1075            mov     (_Period + 2),a
022E F5DB      1076            mov     (_Period + 3),a
0230           1077   ;        sourcecode.c:239: if (count >= 10){
0230 C3        1078            clr     c
0231 E558      1079            mov     a,_count
0233 940A      1080            subb    a,#0x0A
0235 E559      1081            mov     a,(_count + 1)
0237 9400      1082            subb    a,#0x00
0239 4000      1083            jc      L010011?
023B           1084   ;        sourcecode.c:240: v1_max = 0;
023B 75D800    1085            mov     _v1_max,#0x00
023E 75D900    1086            mov     (_v1_max + 1),#0x00
0241 75DA00    1087            mov     (_v1_max + 2),#0x00
0244 75DB00    1088            mov     (_v1_max + 3),#0x00
0247           1089   ;        sourcecode.c:241: v2_max = 0;
0247 759800    1090            mov     _v2_max,#0x00
024A 759900    1091            mov     (_v2_max + 1),#0x00
024D 759A00    1092            mov     (_v2_max + 2),#0x00
0250 759B00    1093            mov     (_v2_max + 3),#0x00
0253           1094   L010011?:
0253           1095   ;        sourcecode.c:244: v1 = Volts_at_Pin(QFP32_MUX_P2_1);            // gets the amplitude at pin 2.1
0253 75820E    1096            mov     dpl,#0x0E
0256 120000    1097            lcall   _Volts_at_Pin
0259 858258    1098            mov     _v1,dpl
025C 858359    1099            mov     (_v1 + 1),dph
025F 85F05A    1100            mov     (_v1 + 2),b
0262 F55B      1101            mov     (_v1 + 3),a
0264           1102   ;        sourcecode.c:245: if (Volts_at_Pin(QFP32_MUX_P2_1) < v1_last){  // if the value higher that last time
0264 75820E    1103            mov     dpl,#0x0E
0267 120000    1104            lcall   _Volts_at_Pin
026A AA82      1105            mov     r2,dpl
026C AB83      1106            mov     r3,dph
026E ACF0      1107            mov     r4,b
0270 FD        1108            mov     r5,a
0271 C058      1109            push    _v1_last
0273 C059      1110            push    (_v1_last + 1)
0275 C05A      1111            push    (_v1_last + 2)
0277 C05B      1112            push    (_v1_last + 3)
0279 8A82      1113            mov     dpl,r2
027B 8B83      1114            mov     dph,r3
027D 8CF0      1115            mov     b,r4
027F ED        1116            mov     a,r5
0280 120000    1117            lcall   ___fslt
0283 AA82      1118            mov     r2,dpl
0285 E581      1119            mov     a,sp
0287 24FC      1120            add     a,#0xfc
0289 F581      1121            mov     sp,a
028B EA        1122            mov     a,r2
028C 6000      1123            jz      L010013?
028E           1124   ;        sourcecode.c:246: v1_max = v1;
028E 8558D8    1125            mov     _v1_max,_v1
0291 8559D9    1126            mov     (_v1_max + 1),(_v1 + 1)
0294 855ADA    1127            mov     (_v1_max + 2),(_v1 + 2)
0297 855BDB    1128            mov     (_v1_max + 3),(_v1 + 3)
029A           1129   L010013?:
029A           1130   ;        sourcecode.c:248: v2 = Volts_at_Pin(QFP32_MUX_P2_2);            // gets the amplitude at pin 2.2
029A 75820F    1131            mov     dpl,#0x0F
029D 120000    1132            lcall   _Volts_at_Pin
02A0 858218    1133            mov     _v2,dpl
02A3 858319    1134            mov     (_v2 + 1),dph
02A6 85F01A    1135            mov     (_v2 + 2),b
02A9 F51B      1136            mov     (_v2 + 3),a
02AB           1137   ;        sourcecode.c:249: if (Volts_at_Pin(QFP32_MUX_P2_2) < v2_last){
02AB 75820F    1138            mov     dpl,#0x0F
02AE 120000    1139            lcall   _Volts_at_Pin
02B1 AA82      1140            mov     r2,dpl
02B3 AB83      1141            mov     r3,dph
02B5 ACF0      1142            mov     r4,b
02B7 FD        1143            mov     r5,a
02B8 C018      1144            push    _v2_last
02BA C019      1145            push    (_v2_last + 1)
02BC C01A      1146            push    (_v2_last + 2)
02BE C01B      1147            push    (_v2_last + 3)
02C0 8A82      1148            mov     dpl,r2
02C2 8B83      1149            mov     dph,r3
02C4 8CF0      1150            mov     b,r4
02C6 ED        1151            mov     a,r5
02C7 120000    1152            lcall   ___fslt
02CA AA82      1153            mov     r2,dpl
02CC E581      1154            mov     a,sp
02CE 24FC      1155            add     a,#0xfc
02D0 F581      1156            mov     sp,a
02D2 EA        1157            mov     a,r2
02D3 6000      1158            jz      L010015?
02D5           1159   ;        sourcecode.c:250: v2_max = v2;
02D5 851898    1160            mov     _v2_max,_v2
02D8 851999    1161            mov     (_v2_max + 1),(_v2 + 1)
02DB 851A9A    1162            mov     (_v2_max + 2),(_v2 + 2)
02DE 851B9B    1163            mov     (_v2_max + 3),(_v2 + 3)
02E1           1164   L010015?:
02E1           1165   ;        sourcecode.c:252: printf ("Max Amp @p2.1=%7.5fV, Max Amp @p2.2=%7.5fV,", v1_max, v2_max); //print the two values for max amplitude
02E1 C098      1166            push    _v2_max
02E3 C099      1167            push    (_v2_max + 1)
02E5 C09A      1168            push    (_v2_max + 2)
02E7 C09B      1169            push    (_v2_max + 3)
02E9 C0D8      1170            push    _v1_max
02EB C0D9      1171            push    (_v1_max + 1)
02ED C0DA      1172            push    (_v1_max + 2)
02EF C0DB      1173            push    (_v1_max + 3)
02F1 7488      1174            mov     a,#__str_5
02F3 C0E0      1175            push    acc
02F5 74C2      1176            mov     a,#(__str_5 >> 8)
02F7 C0E0      1177            push    acc
02F9 7480      1178            mov     a,#0x80
02FB C0E0      1179            push    acc
02FD 120000    1180            lcall   _printf
0300 E581      1181            mov     a,sp
0302 24F5      1182            add     a,#0xf5
0304 F581      1183            mov     sp,a
0306           1184   ;        sourcecode.c:260: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0306 75820E    1185            mov     dpl,#0x0E
0309 120000    1186            lcall   _Volts_at_Pin
030C AA82      1187            mov     r2,dpl
030E AB83      1188            mov     r3,dph
0310 ACF0      1189            mov     r4,b
0312 FD        1190            mov     r5,a
0313 8A98      1191            mov     _v,r2
0315 8B99      1192            mov     (_v + 1),r3
0317 8C9A      1193            mov     (_v + 2),r4
0319 8D9B      1194            mov     (_v + 3),r5
031B           1195   ;        sourcecode.c:261: v[1] = Volts_at_Pin(QFP32_MUX_P2_2);
031B 75820F    1196            mov     dpl,#0x0F
031E 120000    1197            lcall   _Volts_at_Pin
0321 AA82      1198            mov     r2,dpl
0323 AB83      1199            mov     r3,dph
0325 ACF0      1200            mov     r4,b
0327 FD        1201            mov     r5,a
0328 8A9C      1202            mov     (_v + 0x0004),r2
032A 8B9D      1203            mov     ((_v + 0x0004) + 1),r3
032C 8C9E      1204            mov     ((_v + 0x0004) + 2),r4
032E 8D9F      1205            mov     ((_v + 0x0004) + 3),r5
0330           1206   ;        sourcecode.c:262: printf ("V@P2.1=%7.5fV, V@P2.2=%7.5fV", v[0], v[1]); // print voltages
0330 C09C      1207            push    (_v + 0x0004)
0332 C09D      1208            push    ((_v + 0x0004) + 1)
0334 C09E      1209            push    ((_v + 0x0004) + 2)
0336 C09F      1210            push    ((_v + 0x0004) + 3)
0338 C098      1211            push    _v
033A C099      1212            push    (_v + 1)
033C C09A      1213            push    (_v + 2)
033E C09B      1214            push    (_v + 3)
0340 74C8      1215            mov     a,#__str_6
0342 C0E0      1216            push    acc
0344 74C2      1217            mov     a,#(__str_6 >> 8)
0346 C0E0      1218            push    acc
0348 7480      1219            mov     a,#0x80
034A C0E0      1220            push    acc
034C 120000    1221            lcall   _printf
034F E581      1222            mov     a,sp
0351 24F5      1223            add     a,#0xf5
0353 F581      1224            mov     sp,a
0355           1225   ;        sourcecode.c:264: printf("\x1b[0K"); // ANSI: Clear from cursor to end of line.
0355 7408      1226            mov     a,#__str_7
0357 C0E0      1227            push    acc
0359 74C3      1228            mov     a,#(__str_7 >> 8)
035B C0E0      1229            push    acc
035D 7480      1230            mov     a,#0x80
035F C0E0      1231            push    acc
0361 120000    1232            lcall   _printf
0364 1581      1233            dec     sp
0366 1581      1234            dec     sp
0368 1581      1235            dec     sp
036A           1236   ;        sourcecode.c:265: ++count;
036A 0558      1237            inc     _count
036C E4        1238            clr     a
036D B55848    1239            cjne    a,_count,L010036?
0370 0559      1240            inc     (_count + 1)
0372           1241   L010036?:
0372 020000    1242            ljmp    L010017?
0375           1243            rseg R_CSEG
0375           1244   
0000           1245            rseg R_XINIT
0000           1246   
0000           1247            rseg R_CONST
0000           1248   __str_0:
0000 1B        1249            db 0x1B
0001 5B324A    1250            db '[2J'
0004 00        1251            db 0x00
0005           1252   __str_1:
0005 41444320  1253            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1254            db 0x0A
0016 46696C65  1255            db 'File: %s'
     3A202573
001E 0A        1256            db 0x0A
001F 436F6D70  1257            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1258            db 0x0A
0030 0A        1259            db 0x0A
0031 00        1260            db 0x00
0032           1261   __str_2:
0032 736F7572  1262            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1263            db 0x00
003F           1264   __str_3:
003F 4D617220  1265            db 'Mar  4 2024'
     20342032
     303234
004A 00        1266            db 0x00
004B           1267   __str_4:
004B 32303A31  1268            db '20:14:46'
     343A3436
0053 00        1269            db 0x00
0054           1270   __str_5:
0054 4D617820  1271            db 'Max Amp @p2.1=%7.5fV, Max Amp @p2.2=%7.5fV,'
     416D7020
     4070322E
     313D2537
     2E356656
     2C204D61
     7820416D
     70204070
     322E323D
     25372E35
     66562C
007F 00        1272            db 0x00
0080           1273   __str_6:
0080 56405032  1274            db 'V@P2.1=%7.5fV, V@P2.2=%7.5fV'
     2E313D25
     372E3566
     562C2056
     4050322E
     323D2537
     2E356656
009C 00        1275            db 0x00
009D           1276   __str_7:
009D 1B        1277            db 0x1B
009E 5B304B    1278            db '[0K'
00A1 00        1279            db 0x00
00A2           1280   
0003           1281            CSEG
0003           1282   
0003           1283   end
