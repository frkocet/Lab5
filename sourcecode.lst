0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 06 13:49:48 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _ADC_at_Pin
0000             32            public _InitPinADC
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public _InitADC
0000             36            public __c51_external_startup
0000             37            public _v2
0000             38            public _v1
0000             39            public _v2_max
0000             40            public _v1_max
0000             41            public _overflow_count
0000             42   ;--------------------------------------------------------
0000             43   ; Special Function Registers
0000             44   ;--------------------------------------------------------
0000             45   _ACC            DATA 0xe0
0000             46   _ADC0ASAH       DATA 0xb6
0000             47   _ADC0ASAL       DATA 0xb5
0000             48   _ADC0ASCF       DATA 0xa1
0000             49   _ADC0ASCT       DATA 0xc7
0000             50   _ADC0CF0        DATA 0xbc
0000             51   _ADC0CF1        DATA 0xb9
0000             52   _ADC0CF2        DATA 0xdf
0000             53   _ADC0CN0        DATA 0xe8
0000             54   _ADC0CN1        DATA 0xb2
0000             55   _ADC0CN2        DATA 0xb3
0000             56   _ADC0GTH        DATA 0xc4
0000             57   _ADC0GTL        DATA 0xc3
0000             58   _ADC0H          DATA 0xbe
0000             59   _ADC0L          DATA 0xbd
0000             60   _ADC0LTH        DATA 0xc6
0000             61   _ADC0LTL        DATA 0xc5
0000             62   _ADC0MX         DATA 0xbb
0000             63   _B              DATA 0xf0
0000             64   _CKCON0         DATA 0x8e
0000             65   _CKCON1         DATA 0xa6
0000             66   _CLEN0          DATA 0xc6
0000             67   _CLIE0          DATA 0xc7
0000             68   _CLIF0          DATA 0xe8
0000             69   _CLKSEL         DATA 0xa9
0000             70   _CLOUT0         DATA 0xd1
0000             71   _CLU0CF         DATA 0xb1
0000             72   _CLU0FN         DATA 0xaf
0000             73   _CLU0MX         DATA 0x84
0000             74   _CLU1CF         DATA 0xb3
0000             75   _CLU1FN         DATA 0xb2
0000             76   _CLU1MX         DATA 0x85
0000             77   _CLU2CF         DATA 0xb6
0000             78   _CLU2FN         DATA 0xb5
0000             79   _CLU2MX         DATA 0x91
0000             80   _CLU3CF         DATA 0xbf
0000             81   _CLU3FN         DATA 0xbe
0000             82   _CLU3MX         DATA 0xae
0000             83   _CMP0CN0        DATA 0x9b
0000             84   _CMP0CN1        DATA 0x99
0000             85   _CMP0MD         DATA 0x9d
0000             86   _CMP0MX         DATA 0x9f
0000             87   _CMP1CN0        DATA 0xbf
0000             88   _CMP1CN1        DATA 0xac
0000             89   _CMP1MD         DATA 0xab
0000             90   _CMP1MX         DATA 0xaa
0000             91   _CRC0CN0        DATA 0xce
0000             92   _CRC0CN1        DATA 0x86
0000             93   _CRC0CNT        DATA 0xd3
0000             94   _CRC0DAT        DATA 0xcb
0000             95   _CRC0FLIP       DATA 0xcf
0000             96   _CRC0IN         DATA 0xca
0000             97   _CRC0ST         DATA 0xd2
0000             98   _DAC0CF0        DATA 0x91
0000             99   _DAC0CF1        DATA 0x92
0000            100   _DAC0H          DATA 0x85
0000            101   _DAC0L          DATA 0x84
0000            102   _DAC1CF0        DATA 0x93
0000            103   _DAC1CF1        DATA 0x94
0000            104   _DAC1H          DATA 0x8a
0000            105   _DAC1L          DATA 0x89
0000            106   _DAC2CF0        DATA 0x95
0000            107   _DAC2CF1        DATA 0x96
0000            108   _DAC2H          DATA 0x8c
0000            109   _DAC2L          DATA 0x8b
0000            110   _DAC3CF0        DATA 0x9a
0000            111   _DAC3CF1        DATA 0x9c
0000            112   _DAC3H          DATA 0x8e
0000            113   _DAC3L          DATA 0x8d
0000            114   _DACGCF0        DATA 0x88
0000            115   _DACGCF1        DATA 0x98
0000            116   _DACGCF2        DATA 0xa2
0000            117   _DERIVID        DATA 0xad
0000            118   _DEVICEID       DATA 0xb5
0000            119   _DPH            DATA 0x83
0000            120   _DPL            DATA 0x82
0000            121   _EIE1           DATA 0xe6
0000            122   _EIE2           DATA 0xf3
0000            123   _EIP1           DATA 0xbb
0000            124   _EIP1H          DATA 0xee
0000            125   _EIP2           DATA 0xed
0000            126   _EIP2H          DATA 0xf6
0000            127   _EMI0CN         DATA 0xe7
0000            128   _FLKEY          DATA 0xb7
0000            129   _HFO0CAL        DATA 0xc7
0000            130   _HFO1CAL        DATA 0xd6
0000            131   _HFOCN          DATA 0xef
0000            132   _I2C0ADM        DATA 0xff
0000            133   _I2C0CN0        DATA 0xba
0000            134   _I2C0DIN        DATA 0xbc
0000            135   _I2C0DOUT       DATA 0xbb
0000            136   _I2C0FCN0       DATA 0xad
0000            137   _I2C0FCN1       DATA 0xab
0000            138   _I2C0FCT        DATA 0xf5
0000            139   _I2C0SLAD       DATA 0xbd
0000            140   _I2C0STAT       DATA 0xb9
0000            141   _IE             DATA 0xa8
0000            142   _IP             DATA 0xb8
0000            143   _IPH            DATA 0xf2
0000            144   _IT01CF         DATA 0xe4
0000            145   _LFO0CN         DATA 0xb1
0000            146   _P0             DATA 0x80
0000            147   _P0MASK         DATA 0xfe
0000            148   _P0MAT          DATA 0xfd
0000            149   _P0MDIN         DATA 0xf1
0000            150   _P0MDOUT        DATA 0xa4
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1             DATA 0x90
0000            153   _P1MASK         DATA 0xee
0000            154   _P1MAT          DATA 0xed
0000            155   _P1MDIN         DATA 0xf2
0000            156   _P1MDOUT        DATA 0xa5
0000            157   _P1SKIP         DATA 0xd5
0000            158   _P2             DATA 0xa0
0000            159   _P2MASK         DATA 0xfc
0000            160   _P2MAT          DATA 0xfb
0000            161   _P2MDIN         DATA 0xf3
0000            162   _P2MDOUT        DATA 0xa6
0000            163   _P2SKIP         DATA 0xcc
0000            164   _P3             DATA 0xb0
0000            165   _P3MDIN         DATA 0xf4
0000            166   _P3MDOUT        DATA 0x9c
0000            167   _PCA0CENT       DATA 0x9e
0000            168   _PCA0CLR        DATA 0x9c
0000            169   _PCA0CN0        DATA 0xd8
0000            170   _PCA0CPH0       DATA 0xfc
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPH3       DATA 0xf5
0000            174   _PCA0CPH4       DATA 0x85
0000            175   _PCA0CPH5       DATA 0xde
0000            176   _PCA0CPL0       DATA 0xfb
0000            177   _PCA0CPL1       DATA 0xe9
0000            178   _PCA0CPL2       DATA 0xeb
0000            179   _PCA0CPL3       DATA 0xf4
0000            180   _PCA0CPL4       DATA 0x84
0000            181   _PCA0CPL5       DATA 0xdd
0000            182   _PCA0CPM0       DATA 0xda
0000            183   _PCA0CPM1       DATA 0xdb
0000            184   _PCA0CPM2       DATA 0xdc
0000            185   _PCA0CPM3       DATA 0xae
0000            186   _PCA0CPM4       DATA 0xaf
0000            187   _PCA0CPM5       DATA 0xcc
0000            188   _PCA0H          DATA 0xfa
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0MD         DATA 0xd9
0000            191   _PCA0POL        DATA 0x96
0000            192   _PCA0PWM        DATA 0xf7
0000            193   _PCON0          DATA 0x87
0000            194   _PCON1          DATA 0xcd
0000            195   _PFE0CN         DATA 0xc1
0000            196   _PRTDRV         DATA 0xf6
0000            197   _PSCTL          DATA 0x8f
0000            198   _PSTAT0         DATA 0xaa
0000            199   _PSW            DATA 0xd0
0000            200   _REF0CN         DATA 0xd1
0000            201   _REG0CN         DATA 0xc9
0000            202   _REVID          DATA 0xb6
0000            203   _RSTSRC         DATA 0xef
0000            204   _SBCON1         DATA 0x94
0000            205   _SBRLH1         DATA 0x96
0000            206   _SBRLL1         DATA 0x95
0000            207   _SBUF           DATA 0x99
0000            208   _SBUF0          DATA 0x99
0000            209   _SBUF1          DATA 0x92
0000            210   _SCON           DATA 0x98
0000            211   _SCON0          DATA 0x98
0000            212   _SCON1          DATA 0xc8
0000            213   _SFRPAGE        DATA 0xa7
0000            214   _SFRPGCN        DATA 0xbc
0000            215   _SFRSTACK       DATA 0xd7
0000            216   _SMB0ADM        DATA 0xd6
0000            217   _SMB0ADR        DATA 0xd7
0000            218   _SMB0CF         DATA 0xc1
0000            219   _SMB0CN0        DATA 0xc0
0000            220   _SMB0DAT        DATA 0xc2
0000            221   _SMB0FCN0       DATA 0xc3
0000            222   _SMB0FCN1       DATA 0xc4
0000            223   _SMB0FCT        DATA 0xef
0000            224   _SMB0RXLN       DATA 0xc5
0000            225   _SMB0TC         DATA 0xac
0000            226   _SMOD1          DATA 0x93
0000            227   _SP             DATA 0x81
0000            228   _SPI0CFG        DATA 0xa1
0000            229   _SPI0CKR        DATA 0xa2
0000            230   _SPI0CN0        DATA 0xf8
0000            231   _SPI0DAT        DATA 0xa3
0000            232   _SPI0FCN0       DATA 0x9a
0000            233   _SPI0FCN1       DATA 0x9b
0000            234   _SPI0FCT        DATA 0xf7
0000            235   _SPI0PCF        DATA 0xdf
0000            236   _TCON           DATA 0x88
0000            237   _TH0            DATA 0x8c
0000            238   _TH1            DATA 0x8d
0000            239   _TL0            DATA 0x8a
0000            240   _TL1            DATA 0x8b
0000            241   _TMOD           DATA 0x89
0000            242   _TMR2CN0        DATA 0xc8
0000            243   _TMR2CN1        DATA 0xfd
0000            244   _TMR2H          DATA 0xcf
0000            245   _TMR2L          DATA 0xce
0000            246   _TMR2RLH        DATA 0xcb
0000            247   _TMR2RLL        DATA 0xca
0000            248   _TMR3CN0        DATA 0x91
0000            249   _TMR3CN1        DATA 0xfe
0000            250   _TMR3H          DATA 0x95
0000            251   _TMR3L          DATA 0x94
0000            252   _TMR3RLH        DATA 0x93
0000            253   _TMR3RLL        DATA 0x92
0000            254   _TMR4CN0        DATA 0x98
0000            255   _TMR4CN1        DATA 0xff
0000            256   _TMR4H          DATA 0xa5
0000            257   _TMR4L          DATA 0xa4
0000            258   _TMR4RLH        DATA 0xa3
0000            259   _TMR4RLL        DATA 0xa2
0000            260   _TMR5CN0        DATA 0xc0
0000            261   _TMR5CN1        DATA 0xf1
0000            262   _TMR5H          DATA 0xd5
0000            263   _TMR5L          DATA 0xd4
0000            264   _TMR5RLH        DATA 0xd3
0000            265   _TMR5RLL        DATA 0xd2
0000            266   _UART0PCF       DATA 0xd9
0000            267   _UART1FCN0      DATA 0x9d
0000            268   _UART1FCN1      DATA 0xd8
0000            269   _UART1FCT       DATA 0xfa
0000            270   _UART1LIN       DATA 0x9e
0000            271   _UART1PCF       DATA 0xda
0000            272   _VDM0CN         DATA 0xff
0000            273   _WDTCN          DATA 0x97
0000            274   _XBR0           DATA 0xe1
0000            275   _XBR1           DATA 0xe2
0000            276   _XBR2           DATA 0xe3
0000            277   _XOSC0CN        DATA 0x86
0000            278   _DPTR           DATA 0x8382
0000            279   _TMR2RL         DATA 0xcbca
0000            280   _TMR3RL         DATA 0x9392
0000            281   _TMR4RL         DATA 0xa3a2
0000            282   _TMR5RL         DATA 0xd3d2
0000            283   _TMR0           DATA 0x8c8a
0000            284   _TMR1           DATA 0x8d8b
0000            285   _TMR2           DATA 0xcfce
0000            286   _TMR3           DATA 0x9594
0000            287   _TMR4           DATA 0xa5a4
0000            288   _TMR5           DATA 0xd5d4
0000            289   _SBRL1          DATA 0x9695
0000            290   _PCA0           DATA 0xfaf9
0000            291   _PCA0CP0        DATA 0xfcfb
0000            292   _PCA0CP1        DATA 0xeae9
0000            293   _PCA0CP2        DATA 0xeceb
0000            294   _PCA0CP3        DATA 0xf5f4
0000            295   _PCA0CP4        DATA 0x8584
0000            296   _PCA0CP5        DATA 0xdedd
0000            297   _ADC0ASA        DATA 0xb6b5
0000            298   _ADC0GT         DATA 0xc4c3
0000            299   _ADC0           DATA 0xbebd
0000            300   _ADC0LT         DATA 0xc6c5
0000            301   _DAC0           DATA 0x8584
0000            302   _DAC1           DATA 0x8a89
0000            303   _DAC2           DATA 0x8c8b
0000            304   _DAC3           DATA 0x8e8d
0000            305   ;--------------------------------------------------------
0000            306   ; special function bits
0000            307   ;--------------------------------------------------------
0000            308   _ACC_0          BIT 0xe0
0000            309   _ACC_1          BIT 0xe1
0000            310   _ACC_2          BIT 0xe2
0000            311   _ACC_3          BIT 0xe3
0000            312   _ACC_4          BIT 0xe4
0000            313   _ACC_5          BIT 0xe5
0000            314   _ACC_6          BIT 0xe6
0000            315   _ACC_7          BIT 0xe7
0000            316   _TEMPE          BIT 0xe8
0000            317   _ADGN0          BIT 0xe9
0000            318   _ADGN1          BIT 0xea
0000            319   _ADWINT         BIT 0xeb
0000            320   _ADBUSY         BIT 0xec
0000            321   _ADINT          BIT 0xed
0000            322   _IPOEN          BIT 0xee
0000            323   _ADEN           BIT 0xef
0000            324   _B_0            BIT 0xf0
0000            325   _B_1            BIT 0xf1
0000            326   _B_2            BIT 0xf2
0000            327   _B_3            BIT 0xf3
0000            328   _B_4            BIT 0xf4
0000            329   _B_5            BIT 0xf5
0000            330   _B_6            BIT 0xf6
0000            331   _B_7            BIT 0xf7
0000            332   _C0FIF          BIT 0xe8
0000            333   _C0RIF          BIT 0xe9
0000            334   _C1FIF          BIT 0xea
0000            335   _C1RIF          BIT 0xeb
0000            336   _C2FIF          BIT 0xec
0000            337   _C2RIF          BIT 0xed
0000            338   _C3FIF          BIT 0xee
0000            339   _C3RIF          BIT 0xef
0000            340   _D1SRC0         BIT 0x88
0000            341   _D1SRC1         BIT 0x89
0000            342   _D1AMEN         BIT 0x8a
0000            343   _D01REFSL       BIT 0x8b
0000            344   _D3SRC0         BIT 0x8c
0000            345   _D3SRC1         BIT 0x8d
0000            346   _D3AMEN         BIT 0x8e
0000            347   _D23REFSL       BIT 0x8f
0000            348   _D0UDIS         BIT 0x98
0000            349   _D1UDIS         BIT 0x99
0000            350   _D2UDIS         BIT 0x9a
0000            351   _D3UDIS         BIT 0x9b
0000            352   _EX0            BIT 0xa8
0000            353   _ET0            BIT 0xa9
0000            354   _EX1            BIT 0xaa
0000            355   _ET1            BIT 0xab
0000            356   _ES0            BIT 0xac
0000            357   _ET2            BIT 0xad
0000            358   _ESPI0          BIT 0xae
0000            359   _EA             BIT 0xaf
0000            360   _PX0            BIT 0xb8
0000            361   _PT0            BIT 0xb9
0000            362   _PX1            BIT 0xba
0000            363   _PT1            BIT 0xbb
0000            364   _PS0            BIT 0xbc
0000            365   _PT2            BIT 0xbd
0000            366   _PSPI0          BIT 0xbe
0000            367   _P0_0           BIT 0x80
0000            368   _P0_1           BIT 0x81
0000            369   _P0_2           BIT 0x82
0000            370   _P0_3           BIT 0x83
0000            371   _P0_4           BIT 0x84
0000            372   _P0_5           BIT 0x85
0000            373   _P0_6           BIT 0x86
0000            374   _P0_7           BIT 0x87
0000            375   _P1_0           BIT 0x90
0000            376   _P1_1           BIT 0x91
0000            377   _P1_2           BIT 0x92
0000            378   _P1_3           BIT 0x93
0000            379   _P1_4           BIT 0x94
0000            380   _P1_5           BIT 0x95
0000            381   _P1_6           BIT 0x96
0000            382   _P1_7           BIT 0x97
0000            383   _P2_0           BIT 0xa0
0000            384   _P2_1           BIT 0xa1
0000            385   _P2_2           BIT 0xa2
0000            386   _P2_3           BIT 0xa3
0000            387   _P2_4           BIT 0xa4
0000            388   _P2_5           BIT 0xa5
0000            389   _P2_6           BIT 0xa6
0000            390   _P3_0           BIT 0xb0
0000            391   _P3_1           BIT 0xb1
0000            392   _P3_2           BIT 0xb2
0000            393   _P3_3           BIT 0xb3
0000            394   _P3_4           BIT 0xb4
0000            395   _P3_7           BIT 0xb7
0000            396   _CCF0           BIT 0xd8
0000            397   _CCF1           BIT 0xd9
0000            398   _CCF2           BIT 0xda
0000            399   _CCF3           BIT 0xdb
0000            400   _CCF4           BIT 0xdc
0000            401   _CCF5           BIT 0xdd
0000            402   _CR             BIT 0xde
0000            403   _CF             BIT 0xdf
0000            404   _PARITY         BIT 0xd0
0000            405   _F1             BIT 0xd1
0000            406   _OV             BIT 0xd2
0000            407   _RS0            BIT 0xd3
0000            408   _RS1            BIT 0xd4
0000            409   _F0             BIT 0xd5
0000            410   _AC             BIT 0xd6
0000            411   _CY             BIT 0xd7
0000            412   _RI             BIT 0x98
0000            413   _TI             BIT 0x99
0000            414   _RB8            BIT 0x9a
0000            415   _TB8            BIT 0x9b
0000            416   _REN            BIT 0x9c
0000            417   _CE             BIT 0x9d
0000            418   _SMODE          BIT 0x9e
0000            419   _RI1            BIT 0xc8
0000            420   _TI1            BIT 0xc9
0000            421   _RBX1           BIT 0xca
0000            422   _TBX1           BIT 0xcb
0000            423   _REN1           BIT 0xcc
0000            424   _PERR1          BIT 0xcd
0000            425   _OVR1           BIT 0xce
0000            426   _SI             BIT 0xc0
0000            427   _ACK            BIT 0xc1
0000            428   _ARBLOST        BIT 0xc2
0000            429   _ACKRQ          BIT 0xc3
0000            430   _STO            BIT 0xc4
0000            431   _STA            BIT 0xc5
0000            432   _TXMODE         BIT 0xc6
0000            433   _MASTER         BIT 0xc7
0000            434   _SPIEN          BIT 0xf8
0000            435   _TXNF           BIT 0xf9
0000            436   _NSSMD0         BIT 0xfa
0000            437   _NSSMD1         BIT 0xfb
0000            438   _RXOVRN         BIT 0xfc
0000            439   _MODF           BIT 0xfd
0000            440   _WCOL           BIT 0xfe
0000            441   _SPIF           BIT 0xff
0000            442   _IT0            BIT 0x88
0000            443   _IE0            BIT 0x89
0000            444   _IT1            BIT 0x8a
0000            445   _IE1            BIT 0x8b
0000            446   _TR0            BIT 0x8c
0000            447   _TF0            BIT 0x8d
0000            448   _TR1            BIT 0x8e
0000            449   _TF1            BIT 0x8f
0000            450   _T2XCLK0        BIT 0xc8
0000            451   _T2XCLK1        BIT 0xc9
0000            452   _TR2            BIT 0xca
0000            453   _T2SPLIT        BIT 0xcb
0000            454   _TF2CEN         BIT 0xcc
0000            455   _TF2LEN         BIT 0xcd
0000            456   _TF2L           BIT 0xce
0000            457   _TF2H           BIT 0xcf
0000            458   _T4XCLK0        BIT 0x98
0000            459   _T4XCLK1        BIT 0x99
0000            460   _TR4            BIT 0x9a
0000            461   _T4SPLIT        BIT 0x9b
0000            462   _TF4CEN         BIT 0x9c
0000            463   _TF4LEN         BIT 0x9d
0000            464   _TF4L           BIT 0x9e
0000            465   _TF4H           BIT 0x9f
0000            466   _T5XCLK0        BIT 0xc0
0000            467   _T5XCLK1        BIT 0xc1
0000            468   _TR5            BIT 0xc2
0000            469   _T5SPLIT        BIT 0xc3
0000            470   _TF5CEN         BIT 0xc4
0000            471   _TF5LEN         BIT 0xc5
0000            472   _TF5L           BIT 0xc6
0000            473   _TF5H           BIT 0xc7
0000            474   _RIE            BIT 0xd8
0000            475   _RXTO0          BIT 0xd9
0000            476   _RXTO1          BIT 0xda
0000            477   _RFRQ           BIT 0xdb
0000            478   _TIE            BIT 0xdc
0000            479   _TXHOLD         BIT 0xdd
0000            480   _TXNF1          BIT 0xde
0000            481   _TFRQ           BIT 0xdf
0000            482   ;--------------------------------------------------------
0000            483   ; overlayable register banks
0000            484   ;--------------------------------------------------------
0000            485            rbank0 segment data overlay
0000            486   ;--------------------------------------------------------
0000            487   ; internal ram data
0000            488   ;--------------------------------------------------------
0000            489            rseg R_DSEG
0000            490   _overflow_count:
0000            491            ds 1
0001            492   _v1_max:
0001            493            ds 4
0005            494   _v2_max:
0005            495            ds 4
0009            496   _v1:
0009            497            ds 4
000D            498   _v2:
000D            499            ds 4
0011            500   _main_period_1_61:
0011            501            ds 4
0015            502   _main_Phase_Shift_1_61:
0015            503            ds 4
0019            504   ;--------------------------------------------------------
0019            505   ; overlayable items in internal ram 
0019            506   ;--------------------------------------------------------
0000            507            rseg    R_OSEG
0000            508            rseg    R_OSEG
0000            509   _InitPinADC_PARM_2:
0000            510            ds 1
0001            511            rseg    R_OSEG
0001            512   ;--------------------------------------------------------
0001            513   ; indirectly addressable internal ram data
0001            514   ;--------------------------------------------------------
0000            515            rseg R_ISEG
0000            516   ;--------------------------------------------------------
0000            517   ; absolute internal ram data
0000            518   ;--------------------------------------------------------
0000            519            DSEG
0000            520   ;--------------------------------------------------------
0000            521   ; bit data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_BSEG
0000            524   ;--------------------------------------------------------
0000            525   ; paged external ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_PSEG
0000            528   ;--------------------------------------------------------
0000            529   ; external ram data
0000            530   ;--------------------------------------------------------
0000            531            rseg R_XSEG
0000            532   ;--------------------------------------------------------
0000            533   ; absolute external ram data
0000            534   ;--------------------------------------------------------
0000            535            XSEG
0000            536   ;--------------------------------------------------------
0000            537   ; external initialized ram data
0000            538   ;--------------------------------------------------------
0000            539            rseg R_IXSEG
0000            540            rseg R_HOME
0000            541            rseg R_GSINIT
0000            542            rseg R_CSEG
0000            543   ;--------------------------------------------------------
0000            544   ; Reset entry point and interrupt vectors
0000            545   ;--------------------------------------------------------
0000            546            CSEG at 0x0000
0000 020000     547            ljmp    _crt0
0003            548   ;--------------------------------------------------------
0003            549   ; global & static initialisations
0003            550   ;--------------------------------------------------------
0000            551            rseg R_HOME
0000            552            rseg R_GSINIT
0000            553            rseg R_GSINIT
0000            554   ;--------------------------------------------------------
0000            555   ; data variables initialization
0000            556   ;--------------------------------------------------------
0000            557            rseg R_DINIT
0000            558   ;        sourcecode.c:15: float v1_max = 0; float v2_max = 0;
0000 751800     559            mov     _v1_max,#0x00
0003 751900     560            mov     (_v1_max + 1),#0x00
0006 751A00     561            mov     (_v1_max + 2),#0x00
0009 751B00     562            mov     (_v1_max + 3),#0x00
000C            563   ;        sourcecode.c:15: float v1 = 0; float v2 = 0;
000C 75D800     564            mov     _v2_max,#0x00
000F 75D900     565            mov     (_v2_max + 1),#0x00
0012 75DA00     566            mov     (_v2_max + 2),#0x00
0015 75DB00     567            mov     (_v2_max + 3),#0x00
0018            568   ;        sourcecode.c:16: 
0018 759800     569            mov     _v1,#0x00
001B 759900     570            mov     (_v1 + 1),#0x00
001E 759A00     571            mov     (_v1 + 2),#0x00
0021 759B00     572            mov     (_v1 + 3),#0x00
0024            573   ;        sourcecode.c:16: float v1 = 0; float v2 = 0;
0024 755800     574            mov     _v2,#0x00
0027 755900     575            mov     (_v2 + 1),#0x00
002A 755A00     576            mov     (_v2 + 2),#0x00
002D 755B00     577            mov     (_v2 + 3),#0x00
0030            578            ; The linker places a 'ret' at the end of segment R_DINIT.
0030            579   ;--------------------------------------------------------
0030            580   ; code
0030            581   ;--------------------------------------------------------
0000            582            rseg R_CSEG
0000            583   ;------------------------------------------------------------
0000            584   ;Allocation info for local variables in function '_c51_external_startup'
0000            585   ;------------------------------------------------------------
0000            586   ;------------------------------------------------------------
0000            587   ;        sourcecode.c:18: char _c51_external_startup (void)
0000            588   ;        -----------------------------------------
0000            589   ;         function _c51_external_startup
0000            590   ;        -----------------------------------------
0000            591   __c51_external_startup:
0000            592            using   0
0000            593   ;        sourcecode.c:21: SFRPAGE = 0x00;
0000 75A700     594            mov     _SFRPAGE,#0x00
0003            595   ;        sourcecode.c:22: WDTCN = 0xDE; //First key
0003 7597DE     596            mov     _WDTCN,#0xDE
0006            597   ;        sourcecode.c:23: WDTCN = 0xAD; //Second key
0006 7597AD     598            mov     _WDTCN,#0xAD
0009            599   ;        sourcecode.c:25: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     600            mov     _VDM0CN,#0x80
000C            601   ;        sourcecode.c:26: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     602            mov     _RSTSRC,#0x06
000F            603   ;        sourcecode.c:33: SFRPAGE = 0x10;
000F 75A710     604            mov     _SFRPAGE,#0x10
0012            605   ;        sourcecode.c:34: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     606            mov     _PFE0CN,#0x20
0015            607   ;        sourcecode.c:35: SFRPAGE = 0x00;
0015 75A700     608            mov     _SFRPAGE,#0x00
0018            609   ;        sourcecode.c:56: CLKSEL = 0x00;
0018 75A900     610            mov     _CLKSEL,#0x00
001B            611   ;        sourcecode.c:57: CLKSEL = 0x00;
001B 75A900     612            mov     _CLKSEL,#0x00
001E            613   ;        sourcecode.c:58: while ((CLKSEL & 0x80) == 0);
001E            614   L002001?:
001E E5A9       615            mov     a,_CLKSEL
0020 30E7B0     616            jnb     acc.7,L002001?
0023            617   ;        sourcecode.c:59: CLKSEL = 0x03;
0023 75A903     618            mov     _CLKSEL,#0x03
0026            619   ;        sourcecode.c:60: CLKSEL = 0x03;
0026 75A903     620            mov     _CLKSEL,#0x03
0029            621   ;        sourcecode.c:61: while ((CLKSEL & 0x80) == 0);
0029            622   L002004?:
0029 E5A9       623            mov     a,_CLKSEL
002B 30E730     624            jnb     acc.7,L002004?
002E            625   ;        sourcecode.c:66: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     626            orl     _P0MDOUT,#0x10
0031            627   ;        sourcecode.c:67: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     628            mov     _XBR0,#0x01
0034            629   ;        sourcecode.c:68: XBR1     = 0X00;
0034 75E200     630            mov     _XBR1,#0x00
0037            631   ;        sourcecode.c:69: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     632            mov     _XBR2,#0x40
003A            633   ;        sourcecode.c:75: SCON0 = 0x10;
003A 759810     634            mov     _SCON0,#0x10
003D            635   ;        sourcecode.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     636            mov     _TH1,#0xE6
0040            637   ;        sourcecode.c:77: TL1 = TH1;      // Init Timer1
0040 858D8B     638            mov     _TL1,_TH1
0043            639   ;        sourcecode.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     640            anl     _TMOD,#0x0F
0046            641   ;        sourcecode.c:79: TMOD |=  0x20;                       
0046 438920     642            orl     _TMOD,#0x20
0049            643   ;        sourcecode.c:80: TR1 = 1; // START Timer1
0049 D28E       644            setb    _TR1
004B            645   ;        sourcecode.c:81: TI = 1;  // Indicate TX0 ready
004B D299       646            setb    _TI
004D            647   ;        sourcecode.c:83: return 0;
004D 758200     648            mov     dpl,#0x00
0050 22         649            ret
0051            650   ;------------------------------------------------------------
0051            651   ;Allocation info for local variables in function 'InitADC'
0051            652   ;------------------------------------------------------------
0051            653   ;------------------------------------------------------------
0051            654   ;        sourcecode.c:86: void InitADC (void)
0051            655   ;        -----------------------------------------
0051            656   ;         function InitADC
0051            657   ;        -----------------------------------------
0051            658   _InitADC:
0051            659   ;        sourcecode.c:88: SFRPAGE = 0x00;
0051 75A700     660            mov     _SFRPAGE,#0x00
0054            661   ;        sourcecode.c:89: ADEN=0; // Disable ADC
0054 C2EF       662            clr     _ADEN
0056            663   ;        sourcecode.c:94: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     664            mov     _ADC0CN1,#0x80
0059            665   ;        sourcecode.c:98: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     666            mov     _ADC0CF0,#0x20
005C            667   ;        sourcecode.c:102: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     668            mov     _ADC0CF1,#0x1E
005F            669   ;        sourcecode.c:111: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     670            mov     _ADC0CN0,#0x00
0062            671   ;        sourcecode.c:116: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     672            mov     _ADC0CF2,#0x3F
0065            673   ;        sourcecode.c:120: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     674            mov     _ADC0CN2,#0x00
0068            675   ;        sourcecode.c:122: ADEN=1; // Enable ADC
0068 D2EF       676            setb    _ADEN
006A 22         677            ret
006B            678   ;------------------------------------------------------------
006B            679   ;Allocation info for local variables in function 'Timer3us'
006B            680   ;------------------------------------------------------------
006B            681   ;us                        Allocated to registers r2 
006B            682   ;i                         Allocated to registers r3 
006B            683   ;------------------------------------------------------------
006B            684   ;        sourcecode.c:126: void Timer3us(unsigned char us)
006B            685   ;        -----------------------------------------
006B            686   ;         function Timer3us
006B            687   ;        -----------------------------------------
006B            688   _Timer3us:
006B AA82       689            mov     r2,dpl
006D            690   ;        sourcecode.c:131: CKCON0|=0b_0100_0000;
006D 438E40     691            orl     _CKCON0,#0x40
0070            692   ;        sourcecode.c:133: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     693            mov     _TMR3RL,#0xB8
0073 7593FF     694            mov     (_TMR3RL >> 8),#0xFF
0076            695   ;        sourcecode.c:134: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     696            mov     _TMR3,_TMR3RL
0079 859395     697            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            698   ;        sourcecode.c:136: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     699            mov     _TMR3CN0,#0x04
007F            700   ;        sourcecode.c:137: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       701            mov     r3,#0x00
0081            702   L004004?:
0081 C3         703            clr     c
0082 EB         704            mov     a,r3
0083 9A         705            subb    a,r2
0084 5000       706            jnc     L004007?
0086            707   ;        sourcecode.c:139: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            708   L004001?:
0086 E591       709            mov     a,_TMR3CN0
0088 30E730     710            jnb     acc.7,L004001?
008B            711   ;        sourcecode.c:140: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     712            anl     _TMR3CN0,#0x7F
008E            713   ;        sourcecode.c:137: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         714            inc     r3
008F 8000       715            sjmp    L004004?
0091            716   L004007?:
0091            717   ;        sourcecode.c:142: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     718            mov     _TMR3CN0,#0x00
0094 22         719            ret
0095            720   ;------------------------------------------------------------
0095            721   ;Allocation info for local variables in function 'waitms'
0095            722   ;------------------------------------------------------------
0095            723   ;ms                        Allocated to registers r2 r3 
0095            724   ;j                         Allocated to registers r4 r5 
0095            725   ;k                         Allocated to registers r6 
0095            726   ;------------------------------------------------------------
0095            727   ;        sourcecode.c:145: void waitms (unsigned int ms)
0095            728   ;        -----------------------------------------
0095            729   ;         function waitms
0095            730   ;        -----------------------------------------
0095            731   _waitms:
0095 AA82       732            mov     r2,dpl
0097 AB83       733            mov     r3,dph
0099            734   ;        sourcecode.c:149: for(j=0; j<ms; j++)
0099 7C00       735            mov     r4,#0x00
009B 7D00       736            mov     r5,#0x00
009D            737   L005005?:
009D C3         738            clr     c
009E EC         739            mov     a,r4
009F 9A         740            subb    a,r2
00A0 ED         741            mov     a,r5
00A1 9B         742            subb    a,r3
00A2 5000       743            jnc     L005009?
00A4            744   ;        sourcecode.c:150: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       745            mov     r6,#0x00
00A6            746   L005001?:
00A6 BE0470     747            cjne    r6,#0x04,L005018?
00A9            748   L005018?:
00A9 5000       749            jnc     L005007?
00AB 7582FA     750            mov     dpl,#0xFA
00AE C002       751            push    ar2
00B0 C003       752            push    ar3
00B2 C004       753            push    ar4
00B4 C005       754            push    ar5
00B6 C006       755            push    ar6
00B8 120000     756            lcall   _Timer3us
00BB D006       757            pop     ar6
00BD D005       758            pop     ar5
00BF D004       759            pop     ar4
00C1 D003       760            pop     ar3
00C3 D002       761            pop     ar2
00C5 0E         762            inc     r6
00C6 8000       763            sjmp    L005001?
00C8            764   L005007?:
00C8            765   ;        sourcecode.c:149: for(j=0; j<ms; j++)
00C8 0C         766            inc     r4
00C9 BC00B0     767            cjne    r4,#0x00,L005005?
00CC 0D         768            inc     r5
00CD 8000       769            sjmp    L005005?
00CF            770   L005009?:
00CF 22         771            ret
00D0            772   ;------------------------------------------------------------
00D0            773   ;Allocation info for local variables in function 'InitPinADC'
00D0            774   ;------------------------------------------------------------
00D0            775   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            776   ;portno                    Allocated to registers r2 
00D0            777   ;mask                      Allocated to registers r3 
00D0            778   ;------------------------------------------------------------
00D0            779   ;        sourcecode.c:155: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            780   ;        -----------------------------------------
00D0            781   ;         function InitPinADC
00D0            782   ;        -----------------------------------------
00D0            783   _InitPinADC:
00D0 AA82       784            mov     r2,dpl
00D2            785   ;        sourcecode.c:159: mask=1<<pinno;
00D2 85C8F0     786            mov     b,_InitPinADC_PARM_2
00D5 05F0       787            inc     b
00D7 7401       788            mov     a,#0x01
00D9 8000       789            sjmp    L006013?
00DB            790   L006011?:
00DB 25E0       791            add     a,acc
00DD            792   L006013?:
00DD D5F070     793            djnz    b,L006011?
00E0 FB         794            mov     r3,a
00E1            795   ;        sourcecode.c:161: SFRPAGE = 0x20;
00E1 75A720     796            mov     _SFRPAGE,#0x20
00E4            797   ;        sourcecode.c:162: switch (portno)
00E4 BA00B0     798            cjne    r2,#0x00,L006014?
00E7 8000       799            sjmp    L006001?
00E9            800   L006014?:
00E9 BA0130     801            cjne    r2,#0x01,L006015?
00EC 8000       802            sjmp    L006002?
00EE            803   L006015?:
00EE            804   ;        sourcecode.c:164: case 0:
00EE BA02B0     805            cjne    r2,#0x02,L006005?
00F1 8000       806            sjmp    L006003?
00F3            807   L006001?:
00F3            808   ;        sourcecode.c:165: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         809            mov     a,r3
00F4 F4         810            cpl     a
00F5 FA         811            mov     r2,a
00F6 52F1       812            anl     _P0MDIN,a
00F8            813   ;        sourcecode.c:166: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         814            mov     a,r3
00F9 42D4       815            orl     _P0SKIP,a
00FB            816   ;        sourcecode.c:167: break;
00FB            817   ;        sourcecode.c:168: case 1:
00FB 8000       818            sjmp    L006005?
00FD            819   L006002?:
00FD            820   ;        sourcecode.c:169: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         821            mov     a,r3
00FE F4         822            cpl     a
00FF FA         823            mov     r2,a
0100 52F2       824            anl     _P1MDIN,a
0102            825   ;        sourcecode.c:170: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         826            mov     a,r3
0103 42D5       827            orl     _P1SKIP,a
0105            828   ;        sourcecode.c:171: break;
0105            829   ;        sourcecode.c:172: case 2:
0105 8000       830            sjmp    L006005?
0107            831   L006003?:
0107            832   ;        sourcecode.c:173: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         833            mov     a,r3
0108 F4         834            cpl     a
0109 FA         835            mov     r2,a
010A 52F3       836            anl     _P2MDIN,a
010C            837   ;        sourcecode.c:174: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         838            mov     a,r3
010D 42CC       839            orl     _P2SKIP,a
010F            840   ;        sourcecode.c:178: }
010F            841   L006005?:
010F            842   ;        sourcecode.c:179: SFRPAGE = 0x00;
010F 75A700     843            mov     _SFRPAGE,#0x00
0112 22         844            ret
0113            845   ;------------------------------------------------------------
0113            846   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            847   ;------------------------------------------------------------
0113            848   ;pin                       Allocated to registers 
0113            849   ;------------------------------------------------------------
0113            850   ;        sourcecode.c:182: unsigned int ADC_at_Pin(unsigned char pin)
0113            851   ;        -----------------------------------------
0113            852   ;         function ADC_at_Pin
0113            853   ;        -----------------------------------------
0113            854   _ADC_at_Pin:
0113 8582BB     855            mov     _ADC0MX,dpl
0116            856   ;        sourcecode.c:185: ADINT = 0;
0116 C2ED       857            clr     _ADINT
0118            858   ;        sourcecode.c:186: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       859            setb    _ADBUSY
011A            860   ;        sourcecode.c:187: while (!ADINT); // Wait for conversion to complete
011A            861   L007001?:
011A 30ED30     862            jnb     _ADINT,L007001?
011D            863   ;        sourcecode.c:188: return (ADC0);
011D 85BD82     864            mov     dpl,_ADC0
0120 85BE83     865            mov     dph,(_ADC0 >> 8)
0123 22         866            ret
0124            867   ;------------------------------------------------------------
0124            868   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            869   ;------------------------------------------------------------
0124            870   ;pin                       Allocated to registers r2 
0124            871   ;------------------------------------------------------------
0124            872   ;        sourcecode.c:199: float Volts_at_Pin(unsigned char pin)
0124            873   ;        -----------------------------------------
0124            874   ;         function Volts_at_Pin
0124            875   ;        -----------------------------------------
0124            876   _Volts_at_Pin:
0124            877   ;        sourcecode.c:201: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     878            lcall   _ADC_at_Pin
0127 120000     879            lcall   ___uint2fs
012A AA82       880            mov     r2,dpl
012C AB83       881            mov     r3,dph
012E ACF0       882            mov     r4,b
0130 FD         883            mov     r5,a
0131 C002       884            push    ar2
0133 C003       885            push    ar3
0135 C004       886            push    ar4
0137 C005       887            push    ar5
0139 90923A     888            mov     dptr,#0x923A
013C 75F053     889            mov     b,#0x53
013F 7440       890            mov     a,#0x40
0141 120000     891            lcall   ___fsmul
0144 AA82       892            mov     r2,dpl
0146 AB83       893            mov     r3,dph
0148 ACF0       894            mov     r4,b
014A FD         895            mov     r5,a
014B E581       896            mov     a,sp
014D 24FC       897            add     a,#0xfc
014F F581       898            mov     sp,a
0151 E4         899            clr     a
0152 C0E0       900            push    acc
0154 74FC       901            mov     a,#0xFC
0156 C0E0       902            push    acc
0158 747F       903            mov     a,#0x7F
015A C0E0       904            push    acc
015C 7446       905            mov     a,#0x46
015E C0E0       906            push    acc
0160 8A82       907            mov     dpl,r2
0162 8B83       908            mov     dph,r3
0164 8CF0       909            mov     b,r4
0166 ED         910            mov     a,r5
0167 120000     911            lcall   ___fsdiv
016A AA82       912            mov     r2,dpl
016C AB83       913            mov     r3,dph
016E ACF0       914            mov     r4,b
0170 FD         915            mov     r5,a
0171 E581       916            mov     a,sp
0173 24FC       917            add     a,#0xfc
0175 F581       918            mov     sp,a
0177 8A82       919            mov     dpl,r2
0179 8B83       920            mov     dph,r3
017B 8CF0       921            mov     b,r4
017D ED         922            mov     a,r5
017E 22         923            ret
017F            924   ;------------------------------------------------------------
017F            925   ;Allocation info for local variables in function 'TIMER0_Init'
017F            926   ;------------------------------------------------------------
017F            927   ;------------------------------------------------------------
017F            928   ;        sourcecode.c:204: void TIMER0_Init(void)
017F            929   ;        -----------------------------------------
017F            930   ;         function TIMER0_Init
017F            931   ;        -----------------------------------------
017F            932   _TIMER0_Init:
017F            933   ;        sourcecode.c:206: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
017F 5389F0     934            anl     _TMOD,#0xF0
0182            935   ;        sourcecode.c:207: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0182 438901     936            orl     _TMOD,#0x01
0185            937   ;        sourcecode.c:208: TR0=0; // Stop Timer/Counter 0
0185 C28C       938            clr     _TR0
0187 22         939            ret
0188            940   ;------------------------------------------------------------
0188            941   ;Allocation info for local variables in function 'main'
0188            942   ;------------------------------------------------------------
0188            943   ;period                    Allocated with name '_main_period_1_61'
0188            944   ;Phase_Shift               Allocated with name '_main_Phase_Shift_1_61'
0188            945   ;time_difference           Allocated to registers r2 r3 r4 r5 
0188            946   ;------------------------------------------------------------
0188            947   ;        sourcecode.c:217: void main (void)
0188            948   ;        -----------------------------------------
0188            949   ;         function main
0188            950   ;        -----------------------------------------
0188            951   _main:
0188            952   ;        sourcecode.c:223: TIMER0_Init();
0188 120000     953            lcall   _TIMER0_Init
018B            954   ;        sourcecode.c:225: waitms(500); // Give PuTTy a chance to start before sending
018B 9001F4     955            mov     dptr,#0x01F4
018E 120000     956            lcall   _waitms
0191            957   ;        sourcecode.c:226: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 7470       958            mov     a,#__str_0
0193 C0E0       959            push    acc
0195 74D1       960            mov     a,#(__str_0 >> 8)
0197 C0E0       961            push    acc
0199 7480       962            mov     a,#0x80
019B C0E0       963            push    acc
019D 120000     964            lcall   _printf
01A0 1581       965            dec     sp
01A2 1581       966            dec     sp
01A4 1581       967            dec     sp
01A6            968   ;        sourcecode.c:231: __FILE__, __DATE__, __TIME__);
01A6            969   ;        sourcecode.c:230: "Compiled: %s, %s\n\n",
01A6 74F0       970            mov     a,#__str_4
01A8 C0E0       971            push    acc
01AA 74D1       972            mov     a,#(__str_4 >> 8)
01AC C0E0       973            push    acc
01AE 7480       974            mov     a,#0x80
01B0 C0E0       975            push    acc
01B2 7430       976            mov     a,#__str_3
01B4 C0E0       977            push    acc
01B6 74D2       978            mov     a,#(__str_3 >> 8)
01B8 C0E0       979            push    acc
01BA 7480       980            mov     a,#0x80
01BC C0E0       981            push    acc
01BE 7470       982            mov     a,#__str_2
01C0 C0E0       983            push    acc
01C2 74D2       984            mov     a,#(__str_2 >> 8)
01C4 C0E0       985            push    acc
01C6 7480       986            mov     a,#0x80
01C8 C0E0       987            push    acc
01CA 74B0       988            mov     a,#__str_1
01CC C0E0       989            push    acc
01CE 74D2       990            mov     a,#(__str_1 >> 8)
01D0 C0E0       991            push    acc
01D2 7480       992            mov     a,#0x80
01D4 C0E0       993            push    acc
01D6 120000     994            lcall   _printf
01D9 E581       995            mov     a,sp
01DB 24F4       996            add     a,#0xf4
01DD F581       997            mov     sp,a
01DF            998   ;        sourcecode.c:233: InitPinADC(2, 1); // Configure P2.1 as analog input
01DF 75C801     999            mov     _InitPinADC_PARM_2,#0x01
01E2 758202    1000            mov     dpl,#0x02
01E5 120000    1001            lcall   _InitPinADC
01E8           1002   ;        sourcecode.c:234: InitPinADC(2, 2); // Configure P2.2 as analog input
01E8 75C802    1003            mov     _InitPinADC_PARM_2,#0x02
01EB 758202    1004            mov     dpl,#0x02
01EE 120000    1005            lcall   _InitPinADC
01F1           1006   ;        sourcecode.c:236: InitADC();
01F1 120000    1007            lcall   _InitADC
01F4           1008   ;        sourcecode.c:238: while(1)
01F4           1009   L010038?:
01F4           1010   ;        sourcecode.c:241: TL0 = 0; 
01F4 758A00    1011            mov     _TL0,#0x00
01F7           1012   ;        sourcecode.c:242: TH0 = 0;
01F7 758C00    1013            mov     _TH0,#0x00
01FA           1014   ;        sourcecode.c:243: TF0 = 0;
01FA C28D      1015            clr     _TF0
01FC           1016   ;        sourcecode.c:244: overflow_count = 0;
01FC 755800    1017            mov     _overflow_count,#0x00
01FF           1018   ;        sourcecode.c:246: while (P0_6 != 0); // Wait for the signal to be zero
01FF           1019   L010001?:
01FF 208630    1020            jb      _P0_6,L010001?
0202           1021   ;        sourcecode.c:247: while (P0_6 != 1); // Wait for the signal to be one
0202           1022   L010004?:
0202 308670    1023            jnb     _P0_6,L010004?
0205           1024   ;        sourcecode.c:248: TR0 = 1; // Start the timer
0205 D28C      1025            setb    _TR0
0207           1026   ;        sourcecode.c:249: while (P0_6 != 0) { // Wait for the signal to be zero
0207           1027   L010009?:
0207 3086F0    1028            jnb     _P0_6,L010014?
020A           1029   ;        sourcecode.c:250: if (TF0 == 1) { // Did the 16-bit timer overflow?
020A           1030   ;        sourcecode.c:251: TF0 = 0;
020A 108D30    1031            jbc     _TF0,L010066?
020D 8000      1032            sjmp    L010009?
020F           1033   L010066?:
020F           1034   ;        sourcecode.c:252: overflow_count++;
020F 0558      1035            inc     _overflow_count
0211           1036   ;        sourcecode.c:255: while (P0_6 != 1) { // Wait for the signal to be one
0211 8000      1037            sjmp    L010009?
0213           1038   L010014?:
0213 208670    1039            jb      _P0_6,L010016?
0216           1040   ;        sourcecode.c:256: if (TF0 == 1) { // Did the 16-bit timer overflow?
0216           1041   ;        sourcecode.c:257: TF0 = 0;
0216 108DB0    1042            jbc     _TF0,L010068?
0219 8000      1043            sjmp    L010014?
021B           1044   L010068?:
021B           1045   ;        sourcecode.c:258: overflow_count++;
021B 0558      1046            inc     _overflow_count
021D 8000      1047            sjmp    L010014?
021F           1048   L010016?:
021F           1049   ;        sourcecode.c:261: TR0 = 0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
021F C28C      1050            clr     _TR0
0221           1051   ;        sourcecode.c:262: period = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0221 855882    1052            mov     dpl,_overflow_count
0224 120000    1053            lcall   ___uchar2fs
0227 AA82      1054            mov     r2,dpl
0229 AB83      1055            mov     r3,dph
022B ACF0      1056            mov     r4,b
022D FD        1057            mov     r5,a
022E C002      1058            push    ar2
0230 C003      1059            push    ar3
0232 C004      1060            push    ar4
0234 C005      1061            push    ar5
0236 900000    1062            mov     dptr,#0x0000
0239 75F080    1063            mov     b,#0x80
023C 7447      1064            mov     a,#0x47
023E 120000    1065            lcall   ___fsmul
0241 AA82      1066            mov     r2,dpl
0243 AB83      1067            mov     r3,dph
0245 ACF0      1068            mov     r4,b
0247 FD        1069            mov     r5,a
0248 E581      1070            mov     a,sp
024A 24FC      1071            add     a,#0xfc
024C F581      1072            mov     sp,a
024E 858C82    1073            mov     dpl,_TH0
0251 C002      1074            push    ar2
0253 C003      1075            push    ar3
0255 C004      1076            push    ar4
0257 C005      1077            push    ar5
0259 120000    1078            lcall   ___uchar2fs
025C AE82      1079            mov     r6,dpl
025E AF83      1080            mov     r7,dph
0260 A8F0      1081            mov     r0,b
0262 F9        1082            mov     r1,a
0263 C006      1083            push    ar6
0265 C007      1084            push    ar7
0267 C000      1085            push    ar0
0269 C001      1086            push    ar1
026B 900000    1087            mov     dptr,#0x0000
026E 75F080    1088            mov     b,#0x80
0271 7443      1089            mov     a,#0x43
0273 120000    1090            lcall   ___fsmul
0276 AE82      1091            mov     r6,dpl
0278 AF83      1092            mov     r7,dph
027A A8F0      1093            mov     r0,b
027C F9        1094            mov     r1,a
027D E581      1095            mov     a,sp
027F 24FC      1096            add     a,#0xfc
0281 F581      1097            mov     sp,a
0283 D005      1098            pop     ar5
0285 D004      1099            pop     ar4
0287 D003      1100            pop     ar3
0289 D002      1101            pop     ar2
028B C006      1102            push    ar6
028D C007      1103            push    ar7
028F C000      1104            push    ar0
0291 C001      1105            push    ar1
0293 8A82      1106            mov     dpl,r2
0295 8B83      1107            mov     dph,r3
0297 8CF0      1108            mov     b,r4
0299 ED        1109            mov     a,r5
029A 120000    1110            lcall   ___fsadd
029D AA82      1111            mov     r2,dpl
029F AB83      1112            mov     r3,dph
02A1 ACF0      1113            mov     r4,b
02A3 FD        1114            mov     r5,a
02A4 E581      1115            mov     a,sp
02A6 24FC      1116            add     a,#0xfc
02A8 F581      1117            mov     sp,a
02AA AE8A      1118            mov     r6,_TL0
02AC 7F00      1119            mov     r7,#0x00
02AE 8E82      1120            mov     dpl,r6
02B0 8F83      1121            mov     dph,r7
02B2 C002      1122            push    ar2
02B4 C003      1123            push    ar3
02B6 C004      1124            push    ar4
02B8 C005      1125            push    ar5
02BA 120000    1126            lcall   ___sint2fs
02BD AE82      1127            mov     r6,dpl
02BF AF83      1128            mov     r7,dph
02C1 A8F0      1129            mov     r0,b
02C3 F9        1130            mov     r1,a
02C4 D005      1131            pop     ar5
02C6 D004      1132            pop     ar4
02C8 D003      1133            pop     ar3
02CA D002      1134            pop     ar2
02CC C006      1135            push    ar6
02CE C007      1136            push    ar7
02D0 C000      1137            push    ar0
02D2 C001      1138            push    ar1
02D4 8A82      1139            mov     dpl,r2
02D6 8B83      1140            mov     dph,r3
02D8 8CF0      1141            mov     b,r4
02DA ED        1142            mov     a,r5
02DB 120000    1143            lcall   ___fsadd
02DE AA82      1144            mov     r2,dpl
02E0 AB83      1145            mov     r3,dph
02E2 ACF0      1146            mov     r4,b
02E4 FD        1147            mov     r5,a
02E5 E581      1148            mov     a,sp
02E7 24FC      1149            add     a,#0xfc
02E9 F581      1150            mov     sp,a
02EB C002      1151            push    ar2
02ED C003      1152            push    ar3
02EF C004      1153            push    ar4
02F1 C005      1154            push    ar5
02F3 90F4FC    1155            mov     dptr,#0xF4FC
02F6 75F032    1156            mov     b,#0x32
02F9 7434      1157            mov     a,#0x34
02FB 120000    1158            lcall   ___fsmul
02FE 8582E0    1159            mov     _main_period_1_61,dpl
0301 8583E1    1160            mov     (_main_period_1_61 + 1),dph
0304 85F0E2    1161            mov     (_main_period_1_61 + 2),b
0307 F5E3      1162            mov     (_main_period_1_61 + 3),a
0309 E581      1163            mov     a,sp
030B 24FC      1164            add     a,#0xfc
030D F581      1165            mov     sp,a
030F           1166   ;        sourcecode.c:264: while(P0_6 != 0) //wait for zero cross of reference
030F E4        1167            clr     a
0310 C0E0      1168            push    acc
0312 C0E0      1169            push    acc
0314 7480      1170            mov     a,#0x80
0316 C0E0      1171            push    acc
0318 7440      1172            mov     a,#0x40
031A C0E0      1173            push    acc
031C 85E082    1174            mov     dpl,_main_period_1_61
031F 85E183    1175            mov     dph,(_main_period_1_61 + 1)
0322 85E2F0    1176            mov     b,(_main_period_1_61 + 2)
0325 E5E3      1177            mov     a,(_main_period_1_61 + 3)
0327 120000    1178            lcall   ___fsdiv
032A AE82      1179            mov     r6,dpl
032C AF83      1180            mov     r7,dph
032E A8F0      1181            mov     r0,b
0330 F9        1182            mov     r1,a
0331 E581      1183            mov     a,sp
0333 24FC      1184            add     a,#0xfc
0335 F581      1185            mov     sp,a
0337           1186   L010020?:
0337 3086F0    1187            jnb     _P0_6,L010022?
033A           1188   ;        sourcecode.c:265: while(P0_6 != 1)
033A           1189   L010017?:
033A 2086B0    1190            jb      _P0_6,L010020?
033D           1191   ;        sourcecode.c:266: waitms(period/4);
033D 8E82      1192            mov     dpl,r6
033F 8F83      1193            mov     dph,r7
0341 88F0      1194            mov     b,r0
0343 E9        1195            mov     a,r1
0344 C006      1196            push    ar6
0346 C007      1197            push    ar7
0348 C000      1198            push    ar0
034A C001      1199            push    ar1
034C 120000    1200            lcall   ___fs2uint
034F 120000    1201            lcall   _waitms
0352 D001      1202            pop     ar1
0354 D000      1203            pop     ar0
0356 D007      1204            pop     ar7
0358 D006      1205            pop     ar6
035A 8000      1206            sjmp    L010017?
035C           1207   L010022?:
035C           1208   ;        sourcecode.c:267: v1_max = Volts_at_Pin(QFP32_MUX_P2_1);
035C 75820E    1209            mov     dpl,#0x0E
035F 120000    1210            lcall   _Volts_at_Pin
0362 858218    1211            mov     _v1_max,dpl
0365 858319    1212            mov     (_v1_max + 1),dph
0368 85F01A    1213            mov     (_v1_max + 2),b
036B F51B      1214            mov     (_v1_max + 3),a
036D           1215   ;        sourcecode.c:269: while(P2_2 != 0) //wait for zero cross of other signal
036D E4        1216            clr     a
036E C0E0      1217            push    acc
0370 C0E0      1218            push    acc
0372 7480      1219            mov     a,#0x80
0374 C0E0      1220            push    acc
0376 7440      1221            mov     a,#0x40
0378 C0E0      1222            push    acc
037A 85E082    1223            mov     dpl,_main_period_1_61
037D 85E183    1224            mov     dph,(_main_period_1_61 + 1)
0380 85E2F0    1225            mov     b,(_main_period_1_61 + 2)
0383 E5E3      1226            mov     a,(_main_period_1_61 + 3)
0385 120000    1227            lcall   ___fsdiv
0388 AE82      1228            mov     r6,dpl
038A AF83      1229            mov     r7,dph
038C A8F0      1230            mov     r0,b
038E F9        1231            mov     r1,a
038F E581      1232            mov     a,sp
0391 24FC      1233            add     a,#0xfc
0393 F581      1234            mov     sp,a
0395           1235   L010026?:
0395 30A2F0    1236            jnb     _P2_2,L010028?
0398           1237   ;        sourcecode.c:270: while(P2_2 != 1)
0398           1238   L010023?:
0398 20A2B0    1239            jb      _P2_2,L010026?
039B           1240   ;        sourcecode.c:271: waitms(period/4);
039B 8E82      1241            mov     dpl,r6
039D 8F83      1242            mov     dph,r7
039F 88F0      1243            mov     b,r0
03A1 E9        1244            mov     a,r1
03A2 C006      1245            push    ar6
03A4 C007      1246            push    ar7
03A6 C000      1247            push    ar0
03A8 C001      1248            push    ar1
03AA 120000    1249            lcall   ___fs2uint
03AD 120000    1250            lcall   _waitms
03B0 D001      1251            pop     ar1
03B2 D000      1252            pop     ar0
03B4 D007      1253            pop     ar7
03B6 D006      1254            pop     ar6
03B8 8000      1255            sjmp    L010023?
03BA           1256   L010028?:
03BA           1257   ;        sourcecode.c:272: v2_max = Volts_at_Pin(QFP32_MUX_P2_2);
03BA 75820F    1258            mov     dpl,#0x0F
03BD 120000    1259            lcall   _Volts_at_Pin
03C0 8582D8    1260            mov     _v2_max,dpl
03C3 8583D9    1261            mov     (_v2_max + 1),dph
03C6 85F0DA    1262            mov     (_v2_max + 2),b
03C9 F5DB      1263            mov     (_v2_max + 3),a
03CB           1264   ;        sourcecode.c:280: TR0=0; // Stop timer 0
03CB C28C      1265            clr     _TR0
03CD           1266   ;        sourcecode.c:281: overflow_count = 0;
03CD 755800    1267            mov     _overflow_count,#0x00
03D0           1268   ;        sourcecode.c:282: TH0=0; TL0=0; TF0 = 0;                // Reset the timer
03D0 758C00    1269            mov     _TH0,#0x00
03D3 758A00    1270            mov     _TL0,#0x00
03D6 C28D      1271            clr     _TF0
03D8           1272   ;        sourcecode.c:284: while (P0_6 != 0);                    // Wait for reference signal to be zero
03D8           1273   L010029?:
03D8 208670    1274            jb      _P0_6,L010029?
03DB           1275   ;        sourcecode.c:285: TR0=1; // start timer
03DB D28C      1276            setb    _TR0
03DD           1277   ;        sourcecode.c:286: P3_2=1; //set pin high for testing
03DD D2B2      1278            setb    _P3_2
03DF           1279   ;        sourcecode.c:288: while (P0_1 != 0) {           // Wait for test signal to hit zero
03DF           1280   L010034?:
03DF 3081F0    1281            jnb     _P0_1,L010036?
03E2           1282   ;        sourcecode.c:289: if (TF0 == 1) { // Did the 16-bit timer overflow?
03E2           1283   ;        sourcecode.c:290: TF0 = 0;
03E2 108D30    1284            jbc     _TF0,L010075?
03E5 8000      1285            sjmp    L010034?
03E7           1286   L010075?:
03E7           1287   ;        sourcecode.c:291: overflow_count++;
03E7 0558      1288            inc     _overflow_count
03E9 8000      1289            sjmp    L010034?
03EB           1290   L010036?:
03EB           1291   ;        sourcecode.c:294: TR0=0;
03EB C28C      1292            clr     _TR0
03ED           1293   ;        sourcecode.c:295: P3_2=0;
03ED C2B2      1294            clr     _P3_2
03EF           1295   ;        sourcecode.c:298: time_difference = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
03EF 855882    1296            mov     dpl,_overflow_count
03F2 120000    1297            lcall   ___uchar2fs
03F5 AE82      1298            mov     r6,dpl
03F7 AF83      1299            mov     r7,dph
03F9 A8F0      1300            mov     r0,b
03FB F9        1301            mov     r1,a
03FC C006      1302            push    ar6
03FE C007      1303            push    ar7
0400 C000      1304            push    ar0
0402 C001      1305            push    ar1
0404 900000    1306            mov     dptr,#0x0000
0407 75F080    1307            mov     b,#0x80
040A 7447      1308            mov     a,#0x47
040C 120000    1309            lcall   ___fsmul
040F AE82      1310            mov     r6,dpl
0411 AF83      1311            mov     r7,dph
0413 A8F0      1312            mov     r0,b
0415 F9        1313            mov     r1,a
0416 E581      1314            mov     a,sp
0418 24FC      1315            add     a,#0xfc
041A F581      1316            mov     sp,a
041C 858C82    1317            mov     dpl,_TH0
041F C006      1318            push    ar6
0421 C007      1319            push    ar7
0423 C000      1320            push    ar0
0425 C001      1321            push    ar1
0427 120000    1322            lcall   ___uchar2fs
042A AA82      1323            mov     r2,dpl
042C AB83      1324            mov     r3,dph
042E ACF0      1325            mov     r4,b
0430 FD        1326            mov     r5,a
0431 C002      1327            push    ar2
0433 C003      1328            push    ar3
0435 C004      1329            push    ar4
0437 C005      1330            push    ar5
0439 900000    1331            mov     dptr,#0x0000
043C 75F080    1332            mov     b,#0x80
043F 7443      1333            mov     a,#0x43
0441 120000    1334            lcall   ___fsmul
0444 AA82      1335            mov     r2,dpl
0446 AB83      1336            mov     r3,dph
0448 ACF0      1337            mov     r4,b
044A FD        1338            mov     r5,a
044B E581      1339            mov     a,sp
044D 24FC      1340            add     a,#0xfc
044F F581      1341            mov     sp,a
0451 D001      1342            pop     ar1
0453 D000      1343            pop     ar0
0455 D007      1344            pop     ar7
0457 D006      1345            pop     ar6
0459 C002      1346            push    ar2
045B C003      1347            push    ar3
045D C004      1348            push    ar4
045F C005      1349            push    ar5
0461 8E82      1350            mov     dpl,r6
0463 8F83      1351            mov     dph,r7
0465 88F0      1352            mov     b,r0
0467 E9        1353            mov     a,r1
0468 120000    1354            lcall   ___fsadd
046B AA82      1355            mov     r2,dpl
046D AB83      1356            mov     r3,dph
046F ACF0      1357            mov     r4,b
0471 FD        1358            mov     r5,a
0472 E581      1359            mov     a,sp
0474 24FC      1360            add     a,#0xfc
0476 F581      1361            mov     sp,a
0478 AE8A      1362            mov     r6,_TL0
047A 7F00      1363            mov     r7,#0x00
047C 8E82      1364            mov     dpl,r6
047E 8F83      1365            mov     dph,r7
0480 C002      1366            push    ar2
0482 C003      1367            push    ar3
0484 C004      1368            push    ar4
0486 C005      1369            push    ar5
0488 120000    1370            lcall   ___sint2fs
048B AE82      1371            mov     r6,dpl
048D AF83      1372            mov     r7,dph
048F A8F0      1373            mov     r0,b
0491 F9        1374            mov     r1,a
0492 D005      1375            pop     ar5
0494 D004      1376            pop     ar4
0496 D003      1377            pop     ar3
0498 D002      1378            pop     ar2
049A C006      1379            push    ar6
049C C007      1380            push    ar7
049E C000      1381            push    ar0
04A0 C001      1382            push    ar1
04A2 8A82      1383            mov     dpl,r2
04A4 8B83      1384            mov     dph,r3
04A6 8CF0      1385            mov     b,r4
04A8 ED        1386            mov     a,r5
04A9 120000    1387            lcall   ___fsadd
04AC AA82      1388            mov     r2,dpl
04AE AB83      1389            mov     r3,dph
04B0 ACF0      1390            mov     r4,b
04B2 FD        1391            mov     r5,a
04B3 E581      1392            mov     a,sp
04B5 24FC      1393            add     a,#0xfc
04B7 F581      1394            mov     sp,a
04B9 C002      1395            push    ar2
04BB C003      1396            push    ar3
04BD C004      1397            push    ar4
04BF C005      1398            push    ar5
04C1 90F4FC    1399            mov     dptr,#0xF4FC
04C4 75F032    1400            mov     b,#0x32
04C7 7434      1401            mov     a,#0x34
04C9 120000    1402            lcall   ___fsmul
04CC AA82      1403            mov     r2,dpl
04CE AB83      1404            mov     r3,dph
04D0 ACF0      1405            mov     r4,b
04D2 FD        1406            mov     r5,a
04D3 E581      1407            mov     a,sp
04D5 24FC      1408            add     a,#0xfc
04D7 F581      1409            mov     sp,a
04D9           1410   ;        sourcecode.c:299: Phase_Shift = (time_difference * 360.0) / period;   // we now have the phase shift   
04D9 C002      1411            push    ar2
04DB C003      1412            push    ar3
04DD C004      1413            push    ar4
04DF C005      1414            push    ar5
04E1 C002      1415            push    ar2
04E3 C003      1416            push    ar3
04E5 C004      1417            push    ar4
04E7 C005      1418            push    ar5
04E9 900000    1419            mov     dptr,#0x0000
04EC 75F0B4    1420            mov     b,#0xB4
04EF 7443      1421            mov     a,#0x43
04F1 120000    1422            lcall   ___fsmul
04F4 AE82      1423            mov     r6,dpl
04F6 AF83      1424            mov     r7,dph
04F8 A8F0      1425            mov     r0,b
04FA F9        1426            mov     r1,a
04FB E581      1427            mov     a,sp
04FD 24FC      1428            add     a,#0xfc
04FF F581      1429            mov     sp,a
0501 C0E0      1430            push    _main_period_1_61
0503 C0E1      1431            push    (_main_period_1_61 + 1)
0505 C0E2      1432            push    (_main_period_1_61 + 2)
0507 C0E3      1433            push    (_main_period_1_61 + 3)
0509 8E82      1434            mov     dpl,r6
050B 8F83      1435            mov     dph,r7
050D 88F0      1436            mov     b,r0
050F E9        1437            mov     a,r1
0510 120000    1438            lcall   ___fsdiv
0513 858230    1439            mov     _main_Phase_Shift_1_61,dpl
0516 858331    1440            mov     (_main_Phase_Shift_1_61 + 1),dph
0519 85F032    1441            mov     (_main_Phase_Shift_1_61 + 2),b
051C F533      1442            mov     (_main_Phase_Shift_1_61 + 3),a
051E E581      1443            mov     a,sp
0520 24FC      1444            add     a,#0xfc
0522 F581      1445            mov     sp,a
0524           1446   ;        sourcecode.c:301: printf("Period: T=%fms, Time difference: %5.5fms, Phase shift: %f \n", period*1000.0, time_difference*1000.0, Phase_Shift);
0524 900000    1447            mov     dptr,#0x0000
0527 75F07A    1448            mov     b,#0x7A
052A 7444      1449            mov     a,#0x44
052C 120000    1450            lcall   ___fsmul
052F AA82      1451            mov     r2,dpl
0531 AB83      1452            mov     r3,dph
0533 ACF0      1453            mov     r4,b
0535 FD        1454            mov     r5,a
0536 E581      1455            mov     a,sp
0538 24FC      1456            add     a,#0xfc
053A F581      1457            mov     sp,a
053C C002      1458            push    ar2
053E C003      1459            push    ar3
0540 C004      1460            push    ar4
0542 C005      1461            push    ar5
0544 C0E0      1462            push    _main_period_1_61
0546 C0E1      1463            push    (_main_period_1_61 + 1)
0548 C0E2      1464            push    (_main_period_1_61 + 2)
054A C0E3      1465            push    (_main_period_1_61 + 3)
054C 900000    1466            mov     dptr,#0x0000
054F 75F07A    1467            mov     b,#0x7A
0552 7444      1468            mov     a,#0x44
0554 120000    1469            lcall   ___fsmul
0557 AE82      1470            mov     r6,dpl
0559 AF83      1471            mov     r7,dph
055B A8F0      1472            mov     r0,b
055D F9        1473            mov     r1,a
055E E581      1474            mov     a,sp
0560 24FC      1475            add     a,#0xfc
0562 F581      1476            mov     sp,a
0564 D005      1477            pop     ar5
0566 D004      1478            pop     ar4
0568 D003      1479            pop     ar3
056A D002      1480            pop     ar2
056C C030      1481            push    _main_Phase_Shift_1_61
056E C031      1482            push    (_main_Phase_Shift_1_61 + 1)
0570 C032      1483            push    (_main_Phase_Shift_1_61 + 2)
0572 C033      1484            push    (_main_Phase_Shift_1_61 + 3)
0574 C002      1485            push    ar2
0576 C003      1486            push    ar3
0578 C004      1487            push    ar4
057A C005      1488            push    ar5
057C C006      1489            push    ar6
057E C007      1490            push    ar7
0580 C000      1491            push    ar0
0582 C001      1492            push    ar1
0584 7470      1493            mov     a,#__str_5
0586 C0E0      1494            push    acc
0588 74D8      1495            mov     a,#(__str_5 >> 8)
058A C0E0      1496            push    acc
058C 7480      1497            mov     a,#0x80
058E C0E0      1498            push    acc
0590 120000    1499            lcall   _printf
0593 E581      1500            mov     a,sp
0595 24F1      1501            add     a,#0xf1
0597 F581      1502            mov     sp,a
0599 020000    1503            ljmp    L010038?
059C           1504            rseg R_CSEG
059C           1505   
0000           1506            rseg R_XINIT
0000           1507   
0000           1508            rseg R_CONST
0000           1509   __str_0:
0000 1B        1510            db 0x1B
0001 5B324A    1511            db '[2J'
0004 00        1512            db 0x00
0005           1513   __str_1:
0005 41444320  1514            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1515            db 0x0A
0016 46696C65  1516            db 'File: %s'
     3A202573
001E 0A        1517            db 0x0A
001F 436F6D70  1518            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1519            db 0x0A
0030 0A        1520            db 0x0A
0031 00        1521            db 0x00
0032           1522   __str_2:
0032 736F7572  1523            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1524            db 0x00
003F           1525   __str_3:
003F 4D617220  1526            db 'Mar  6 2024'
     20362032
     303234
004A 00        1527            db 0x00
004B           1528   __str_4:
004B 31333A34  1529            db '13:49:47'
     393A3437
0053 00        1530            db 0x00
0054           1531   __str_5:
0054 50657269  1532            db 'Period: T=%fms, Time difference: %5.5fms, Phase shift: %f '
     6F643A20
     543D2566
     6D732C20
     54696D65
     20646966
     66657265
     6E63653A
     2025352E
     35666D73
     2C205068
     61736520
     73686966
     743A2025
     6620
008E 0A        1533            db 0x0A
008F 00        1534            db 0x00
0090           1535   
0003           1536            CSEG
0003           1537   
0003           1538   end
