0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 05:40:12 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _LCDprint2
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _TIMER0_Init
0000             37            public _Volts_at_Pin
0000             38            public _ADC_at_Pin
0000             39            public _InitPinADC
0000             40            public _waitms
0000             41            public _Timer3us
0000             42            public _InitADC
0000             43            public __c51_external_startup
0000             44            public _LCDprint_PARM_3
0000             45            public _LCDprint2_PARM_3
0000             46            public _LCDprint2_PARM_2
0000             47            public _LCDprint_PARM_2
0000             48            public _v2
0000             49            public _v1
0000             50            public _v2_rms
0000             51            public _v1_rms
0000             52            public _overflow_count
0000             53   ;--------------------------------------------------------
0000             54   ; Special Function Registers
0000             55   ;--------------------------------------------------------
0000             56   _ACC            DATA 0xe0
0000             57   _ADC0ASAH       DATA 0xb6
0000             58   _ADC0ASAL       DATA 0xb5
0000             59   _ADC0ASCF       DATA 0xa1
0000             60   _ADC0ASCT       DATA 0xc7
0000             61   _ADC0CF0        DATA 0xbc
0000             62   _ADC0CF1        DATA 0xb9
0000             63   _ADC0CF2        DATA 0xdf
0000             64   _ADC0CN0        DATA 0xe8
0000             65   _ADC0CN1        DATA 0xb2
0000             66   _ADC0CN2        DATA 0xb3
0000             67   _ADC0GTH        DATA 0xc4
0000             68   _ADC0GTL        DATA 0xc3
0000             69   _ADC0H          DATA 0xbe
0000             70   _ADC0L          DATA 0xbd
0000             71   _ADC0LTH        DATA 0xc6
0000             72   _ADC0LTL        DATA 0xc5
0000             73   _ADC0MX         DATA 0xbb
0000             74   _B              DATA 0xf0
0000             75   _CKCON0         DATA 0x8e
0000             76   _CKCON1         DATA 0xa6
0000             77   _CLEN0          DATA 0xc6
0000             78   _CLIE0          DATA 0xc7
0000             79   _CLIF0          DATA 0xe8
0000             80   _CLKSEL         DATA 0xa9
0000             81   _CLOUT0         DATA 0xd1
0000             82   _CLU0CF         DATA 0xb1
0000             83   _CLU0FN         DATA 0xaf
0000             84   _CLU0MX         DATA 0x84
0000             85   _CLU1CF         DATA 0xb3
0000             86   _CLU1FN         DATA 0xb2
0000             87   _CLU1MX         DATA 0x85
0000             88   _CLU2CF         DATA 0xb6
0000             89   _CLU2FN         DATA 0xb5
0000             90   _CLU2MX         DATA 0x91
0000             91   _CLU3CF         DATA 0xbf
0000             92   _CLU3FN         DATA 0xbe
0000             93   _CLU3MX         DATA 0xae
0000             94   _CMP0CN0        DATA 0x9b
0000             95   _CMP0CN1        DATA 0x99
0000             96   _CMP0MD         DATA 0x9d
0000             97   _CMP0MX         DATA 0x9f
0000             98   _CMP1CN0        DATA 0xbf
0000             99   _CMP1CN1        DATA 0xac
0000            100   _CMP1MD         DATA 0xab
0000            101   _CMP1MX         DATA 0xaa
0000            102   _CRC0CN0        DATA 0xce
0000            103   _CRC0CN1        DATA 0x86
0000            104   _CRC0CNT        DATA 0xd3
0000            105   _CRC0DAT        DATA 0xcb
0000            106   _CRC0FLIP       DATA 0xcf
0000            107   _CRC0IN         DATA 0xca
0000            108   _CRC0ST         DATA 0xd2
0000            109   _DAC0CF0        DATA 0x91
0000            110   _DAC0CF1        DATA 0x92
0000            111   _DAC0H          DATA 0x85
0000            112   _DAC0L          DATA 0x84
0000            113   _DAC1CF0        DATA 0x93
0000            114   _DAC1CF1        DATA 0x94
0000            115   _DAC1H          DATA 0x8a
0000            116   _DAC1L          DATA 0x89
0000            117   _DAC2CF0        DATA 0x95
0000            118   _DAC2CF1        DATA 0x96
0000            119   _DAC2H          DATA 0x8c
0000            120   _DAC2L          DATA 0x8b
0000            121   _DAC3CF0        DATA 0x9a
0000            122   _DAC3CF1        DATA 0x9c
0000            123   _DAC3H          DATA 0x8e
0000            124   _DAC3L          DATA 0x8d
0000            125   _DACGCF0        DATA 0x88
0000            126   _DACGCF1        DATA 0x98
0000            127   _DACGCF2        DATA 0xa2
0000            128   _DERIVID        DATA 0xad
0000            129   _DEVICEID       DATA 0xb5
0000            130   _DPH            DATA 0x83
0000            131   _DPL            DATA 0x82
0000            132   _EIE1           DATA 0xe6
0000            133   _EIE2           DATA 0xf3
0000            134   _EIP1           DATA 0xbb
0000            135   _EIP1H          DATA 0xee
0000            136   _EIP2           DATA 0xed
0000            137   _EIP2H          DATA 0xf6
0000            138   _EMI0CN         DATA 0xe7
0000            139   _FLKEY          DATA 0xb7
0000            140   _HFO0CAL        DATA 0xc7
0000            141   _HFO1CAL        DATA 0xd6
0000            142   _HFOCN          DATA 0xef
0000            143   _I2C0ADM        DATA 0xff
0000            144   _I2C0CN0        DATA 0xba
0000            145   _I2C0DIN        DATA 0xbc
0000            146   _I2C0DOUT       DATA 0xbb
0000            147   _I2C0FCN0       DATA 0xad
0000            148   _I2C0FCN1       DATA 0xab
0000            149   _I2C0FCT        DATA 0xf5
0000            150   _I2C0SLAD       DATA 0xbd
0000            151   _I2C0STAT       DATA 0xb9
0000            152   _IE             DATA 0xa8
0000            153   _IP             DATA 0xb8
0000            154   _IPH            DATA 0xf2
0000            155   _IT01CF         DATA 0xe4
0000            156   _LFO0CN         DATA 0xb1
0000            157   _P0             DATA 0x80
0000            158   _P0MASK         DATA 0xfe
0000            159   _P0MAT          DATA 0xfd
0000            160   _P0MDIN         DATA 0xf1
0000            161   _P0MDOUT        DATA 0xa4
0000            162   _P0SKIP         DATA 0xd4
0000            163   _P1             DATA 0x90
0000            164   _P1MASK         DATA 0xee
0000            165   _P1MAT          DATA 0xed
0000            166   _P1MDIN         DATA 0xf2
0000            167   _P1MDOUT        DATA 0xa5
0000            168   _P1SKIP         DATA 0xd5
0000            169   _P2             DATA 0xa0
0000            170   _P2MASK         DATA 0xfc
0000            171   _P2MAT          DATA 0xfb
0000            172   _P2MDIN         DATA 0xf3
0000            173   _P2MDOUT        DATA 0xa6
0000            174   _P2SKIP         DATA 0xcc
0000            175   _P3             DATA 0xb0
0000            176   _P3MDIN         DATA 0xf4
0000            177   _P3MDOUT        DATA 0x9c
0000            178   _PCA0CENT       DATA 0x9e
0000            179   _PCA0CLR        DATA 0x9c
0000            180   _PCA0CN0        DATA 0xd8
0000            181   _PCA0CPH0       DATA 0xfc
0000            182   _PCA0CPH1       DATA 0xea
0000            183   _PCA0CPH2       DATA 0xec
0000            184   _PCA0CPH3       DATA 0xf5
0000            185   _PCA0CPH4       DATA 0x85
0000            186   _PCA0CPH5       DATA 0xde
0000            187   _PCA0CPL0       DATA 0xfb
0000            188   _PCA0CPL1       DATA 0xe9
0000            189   _PCA0CPL2       DATA 0xeb
0000            190   _PCA0CPL3       DATA 0xf4
0000            191   _PCA0CPL4       DATA 0x84
0000            192   _PCA0CPL5       DATA 0xdd
0000            193   _PCA0CPM0       DATA 0xda
0000            194   _PCA0CPM1       DATA 0xdb
0000            195   _PCA0CPM2       DATA 0xdc
0000            196   _PCA0CPM3       DATA 0xae
0000            197   _PCA0CPM4       DATA 0xaf
0000            198   _PCA0CPM5       DATA 0xcc
0000            199   _PCA0H          DATA 0xfa
0000            200   _PCA0L          DATA 0xf9
0000            201   _PCA0MD         DATA 0xd9
0000            202   _PCA0POL        DATA 0x96
0000            203   _PCA0PWM        DATA 0xf7
0000            204   _PCON0          DATA 0x87
0000            205   _PCON1          DATA 0xcd
0000            206   _PFE0CN         DATA 0xc1
0000            207   _PRTDRV         DATA 0xf6
0000            208   _PSCTL          DATA 0x8f
0000            209   _PSTAT0         DATA 0xaa
0000            210   _PSW            DATA 0xd0
0000            211   _REF0CN         DATA 0xd1
0000            212   _REG0CN         DATA 0xc9
0000            213   _REVID          DATA 0xb6
0000            214   _RSTSRC         DATA 0xef
0000            215   _SBCON1         DATA 0x94
0000            216   _SBRLH1         DATA 0x96
0000            217   _SBRLL1         DATA 0x95
0000            218   _SBUF           DATA 0x99
0000            219   _SBUF0          DATA 0x99
0000            220   _SBUF1          DATA 0x92
0000            221   _SCON           DATA 0x98
0000            222   _SCON0          DATA 0x98
0000            223   _SCON1          DATA 0xc8
0000            224   _SFRPAGE        DATA 0xa7
0000            225   _SFRPGCN        DATA 0xbc
0000            226   _SFRSTACK       DATA 0xd7
0000            227   _SMB0ADM        DATA 0xd6
0000            228   _SMB0ADR        DATA 0xd7
0000            229   _SMB0CF         DATA 0xc1
0000            230   _SMB0CN0        DATA 0xc0
0000            231   _SMB0DAT        DATA 0xc2
0000            232   _SMB0FCN0       DATA 0xc3
0000            233   _SMB0FCN1       DATA 0xc4
0000            234   _SMB0FCT        DATA 0xef
0000            235   _SMB0RXLN       DATA 0xc5
0000            236   _SMB0TC         DATA 0xac
0000            237   _SMOD1          DATA 0x93
0000            238   _SP             DATA 0x81
0000            239   _SPI0CFG        DATA 0xa1
0000            240   _SPI0CKR        DATA 0xa2
0000            241   _SPI0CN0        DATA 0xf8
0000            242   _SPI0DAT        DATA 0xa3
0000            243   _SPI0FCN0       DATA 0x9a
0000            244   _SPI0FCN1       DATA 0x9b
0000            245   _SPI0FCT        DATA 0xf7
0000            246   _SPI0PCF        DATA 0xdf
0000            247   _TCON           DATA 0x88
0000            248   _TH0            DATA 0x8c
0000            249   _TH1            DATA 0x8d
0000            250   _TL0            DATA 0x8a
0000            251   _TL1            DATA 0x8b
0000            252   _TMOD           DATA 0x89
0000            253   _TMR2CN0        DATA 0xc8
0000            254   _TMR2CN1        DATA 0xfd
0000            255   _TMR2H          DATA 0xcf
0000            256   _TMR2L          DATA 0xce
0000            257   _TMR2RLH        DATA 0xcb
0000            258   _TMR2RLL        DATA 0xca
0000            259   _TMR3CN0        DATA 0x91
0000            260   _TMR3CN1        DATA 0xfe
0000            261   _TMR3H          DATA 0x95
0000            262   _TMR3L          DATA 0x94
0000            263   _TMR3RLH        DATA 0x93
0000            264   _TMR3RLL        DATA 0x92
0000            265   _TMR4CN0        DATA 0x98
0000            266   _TMR4CN1        DATA 0xff
0000            267   _TMR4H          DATA 0xa5
0000            268   _TMR4L          DATA 0xa4
0000            269   _TMR4RLH        DATA 0xa3
0000            270   _TMR4RLL        DATA 0xa2
0000            271   _TMR5CN0        DATA 0xc0
0000            272   _TMR5CN1        DATA 0xf1
0000            273   _TMR5H          DATA 0xd5
0000            274   _TMR5L          DATA 0xd4
0000            275   _TMR5RLH        DATA 0xd3
0000            276   _TMR5RLL        DATA 0xd2
0000            277   _UART0PCF       DATA 0xd9
0000            278   _UART1FCN0      DATA 0x9d
0000            279   _UART1FCN1      DATA 0xd8
0000            280   _UART1FCT       DATA 0xfa
0000            281   _UART1LIN       DATA 0x9e
0000            282   _UART1PCF       DATA 0xda
0000            283   _VDM0CN         DATA 0xff
0000            284   _WDTCN          DATA 0x97
0000            285   _XBR0           DATA 0xe1
0000            286   _XBR1           DATA 0xe2
0000            287   _XBR2           DATA 0xe3
0000            288   _XOSC0CN        DATA 0x86
0000            289   _DPTR           DATA 0x8382
0000            290   _TMR2RL         DATA 0xcbca
0000            291   _TMR3RL         DATA 0x9392
0000            292   _TMR4RL         DATA 0xa3a2
0000            293   _TMR5RL         DATA 0xd3d2
0000            294   _TMR0           DATA 0x8c8a
0000            295   _TMR1           DATA 0x8d8b
0000            296   _TMR2           DATA 0xcfce
0000            297   _TMR3           DATA 0x9594
0000            298   _TMR4           DATA 0xa5a4
0000            299   _TMR5           DATA 0xd5d4
0000            300   _SBRL1          DATA 0x9695
0000            301   _PCA0           DATA 0xfaf9
0000            302   _PCA0CP0        DATA 0xfcfb
0000            303   _PCA0CP1        DATA 0xeae9
0000            304   _PCA0CP2        DATA 0xeceb
0000            305   _PCA0CP3        DATA 0xf5f4
0000            306   _PCA0CP4        DATA 0x8584
0000            307   _PCA0CP5        DATA 0xdedd
0000            308   _ADC0ASA        DATA 0xb6b5
0000            309   _ADC0GT         DATA 0xc4c3
0000            310   _ADC0           DATA 0xbebd
0000            311   _ADC0LT         DATA 0xc6c5
0000            312   _DAC0           DATA 0x8584
0000            313   _DAC1           DATA 0x8a89
0000            314   _DAC2           DATA 0x8c8b
0000            315   _DAC3           DATA 0x8e8d
0000            316   ;--------------------------------------------------------
0000            317   ; special function bits
0000            318   ;--------------------------------------------------------
0000            319   _ACC_0          BIT 0xe0
0000            320   _ACC_1          BIT 0xe1
0000            321   _ACC_2          BIT 0xe2
0000            322   _ACC_3          BIT 0xe3
0000            323   _ACC_4          BIT 0xe4
0000            324   _ACC_5          BIT 0xe5
0000            325   _ACC_6          BIT 0xe6
0000            326   _ACC_7          BIT 0xe7
0000            327   _TEMPE          BIT 0xe8
0000            328   _ADGN0          BIT 0xe9
0000            329   _ADGN1          BIT 0xea
0000            330   _ADWINT         BIT 0xeb
0000            331   _ADBUSY         BIT 0xec
0000            332   _ADINT          BIT 0xed
0000            333   _IPOEN          BIT 0xee
0000            334   _ADEN           BIT 0xef
0000            335   _B_0            BIT 0xf0
0000            336   _B_1            BIT 0xf1
0000            337   _B_2            BIT 0xf2
0000            338   _B_3            BIT 0xf3
0000            339   _B_4            BIT 0xf4
0000            340   _B_5            BIT 0xf5
0000            341   _B_6            BIT 0xf6
0000            342   _B_7            BIT 0xf7
0000            343   _C0FIF          BIT 0xe8
0000            344   _C0RIF          BIT 0xe9
0000            345   _C1FIF          BIT 0xea
0000            346   _C1RIF          BIT 0xeb
0000            347   _C2FIF          BIT 0xec
0000            348   _C2RIF          BIT 0xed
0000            349   _C3FIF          BIT 0xee
0000            350   _C3RIF          BIT 0xef
0000            351   _D1SRC0         BIT 0x88
0000            352   _D1SRC1         BIT 0x89
0000            353   _D1AMEN         BIT 0x8a
0000            354   _D01REFSL       BIT 0x8b
0000            355   _D3SRC0         BIT 0x8c
0000            356   _D3SRC1         BIT 0x8d
0000            357   _D3AMEN         BIT 0x8e
0000            358   _D23REFSL       BIT 0x8f
0000            359   _D0UDIS         BIT 0x98
0000            360   _D1UDIS         BIT 0x99
0000            361   _D2UDIS         BIT 0x9a
0000            362   _D3UDIS         BIT 0x9b
0000            363   _EX0            BIT 0xa8
0000            364   _ET0            BIT 0xa9
0000            365   _EX1            BIT 0xaa
0000            366   _ET1            BIT 0xab
0000            367   _ES0            BIT 0xac
0000            368   _ET2            BIT 0xad
0000            369   _ESPI0          BIT 0xae
0000            370   _EA             BIT 0xaf
0000            371   _PX0            BIT 0xb8
0000            372   _PT0            BIT 0xb9
0000            373   _PX1            BIT 0xba
0000            374   _PT1            BIT 0xbb
0000            375   _PS0            BIT 0xbc
0000            376   _PT2            BIT 0xbd
0000            377   _PSPI0          BIT 0xbe
0000            378   _P0_0           BIT 0x80
0000            379   _P0_1           BIT 0x81
0000            380   _P0_2           BIT 0x82
0000            381   _P0_3           BIT 0x83
0000            382   _P0_4           BIT 0x84
0000            383   _P0_5           BIT 0x85
0000            384   _P0_6           BIT 0x86
0000            385   _P0_7           BIT 0x87
0000            386   _P1_0           BIT 0x90
0000            387   _P1_1           BIT 0x91
0000            388   _P1_2           BIT 0x92
0000            389   _P1_3           BIT 0x93
0000            390   _P1_4           BIT 0x94
0000            391   _P1_5           BIT 0x95
0000            392   _P1_6           BIT 0x96
0000            393   _P1_7           BIT 0x97
0000            394   _P2_0           BIT 0xa0
0000            395   _P2_1           BIT 0xa1
0000            396   _P2_2           BIT 0xa2
0000            397   _P2_3           BIT 0xa3
0000            398   _P2_4           BIT 0xa4
0000            399   _P2_5           BIT 0xa5
0000            400   _P2_6           BIT 0xa6
0000            401   _P3_0           BIT 0xb0
0000            402   _P3_1           BIT 0xb1
0000            403   _P3_2           BIT 0xb2
0000            404   _P3_3           BIT 0xb3
0000            405   _P3_4           BIT 0xb4
0000            406   _P3_7           BIT 0xb7
0000            407   _CCF0           BIT 0xd8
0000            408   _CCF1           BIT 0xd9
0000            409   _CCF2           BIT 0xda
0000            410   _CCF3           BIT 0xdb
0000            411   _CCF4           BIT 0xdc
0000            412   _CCF5           BIT 0xdd
0000            413   _CR             BIT 0xde
0000            414   _CF             BIT 0xdf
0000            415   _PARITY         BIT 0xd0
0000            416   _F1             BIT 0xd1
0000            417   _OV             BIT 0xd2
0000            418   _RS0            BIT 0xd3
0000            419   _RS1            BIT 0xd4
0000            420   _F0             BIT 0xd5
0000            421   _AC             BIT 0xd6
0000            422   _CY             BIT 0xd7
0000            423   _RI             BIT 0x98
0000            424   _TI             BIT 0x99
0000            425   _RB8            BIT 0x9a
0000            426   _TB8            BIT 0x9b
0000            427   _REN            BIT 0x9c
0000            428   _CE             BIT 0x9d
0000            429   _SMODE          BIT 0x9e
0000            430   _RI1            BIT 0xc8
0000            431   _TI1            BIT 0xc9
0000            432   _RBX1           BIT 0xca
0000            433   _TBX1           BIT 0xcb
0000            434   _REN1           BIT 0xcc
0000            435   _PERR1          BIT 0xcd
0000            436   _OVR1           BIT 0xce
0000            437   _SI             BIT 0xc0
0000            438   _ACK            BIT 0xc1
0000            439   _ARBLOST        BIT 0xc2
0000            440   _ACKRQ          BIT 0xc3
0000            441   _STO            BIT 0xc4
0000            442   _STA            BIT 0xc5
0000            443   _TXMODE         BIT 0xc6
0000            444   _MASTER         BIT 0xc7
0000            445   _SPIEN          BIT 0xf8
0000            446   _TXNF           BIT 0xf9
0000            447   _NSSMD0         BIT 0xfa
0000            448   _NSSMD1         BIT 0xfb
0000            449   _RXOVRN         BIT 0xfc
0000            450   _MODF           BIT 0xfd
0000            451   _WCOL           BIT 0xfe
0000            452   _SPIF           BIT 0xff
0000            453   _IT0            BIT 0x88
0000            454   _IE0            BIT 0x89
0000            455   _IT1            BIT 0x8a
0000            456   _IE1            BIT 0x8b
0000            457   _TR0            BIT 0x8c
0000            458   _TF0            BIT 0x8d
0000            459   _TR1            BIT 0x8e
0000            460   _TF1            BIT 0x8f
0000            461   _T2XCLK0        BIT 0xc8
0000            462   _T2XCLK1        BIT 0xc9
0000            463   _TR2            BIT 0xca
0000            464   _T2SPLIT        BIT 0xcb
0000            465   _TF2CEN         BIT 0xcc
0000            466   _TF2LEN         BIT 0xcd
0000            467   _TF2L           BIT 0xce
0000            468   _TF2H           BIT 0xcf
0000            469   _T4XCLK0        BIT 0x98
0000            470   _T4XCLK1        BIT 0x99
0000            471   _TR4            BIT 0x9a
0000            472   _T4SPLIT        BIT 0x9b
0000            473   _TF4CEN         BIT 0x9c
0000            474   _TF4LEN         BIT 0x9d
0000            475   _TF4L           BIT 0x9e
0000            476   _TF4H           BIT 0x9f
0000            477   _T5XCLK0        BIT 0xc0
0000            478   _T5XCLK1        BIT 0xc1
0000            479   _TR5            BIT 0xc2
0000            480   _T5SPLIT        BIT 0xc3
0000            481   _TF5CEN         BIT 0xc4
0000            482   _TF5LEN         BIT 0xc5
0000            483   _TF5L           BIT 0xc6
0000            484   _TF5H           BIT 0xc7
0000            485   _RIE            BIT 0xd8
0000            486   _RXTO0          BIT 0xd9
0000            487   _RXTO1          BIT 0xda
0000            488   _RFRQ           BIT 0xdb
0000            489   _TIE            BIT 0xdc
0000            490   _TXHOLD         BIT 0xdd
0000            491   _TXNF1          BIT 0xde
0000            492   _TFRQ           BIT 0xdf
0000            493   ;--------------------------------------------------------
0000            494   ; overlayable register banks
0000            495   ;--------------------------------------------------------
0000            496            rbank0 segment data overlay
0000            497   ;--------------------------------------------------------
0000            498   ; internal ram data
0000            499   ;--------------------------------------------------------
0000            500            rseg R_DSEG
0000            501   _overflow_count:
0000            502            ds 1
0001            503   _v1_rms:
0001            504            ds 4
0005            505   _v2_rms:
0005            506            ds 4
0009            507   _v1:
0009            508            ds 4
000D            509   _v2:
000D            510            ds 4
0011            511   _LCDprint_PARM_2:
0011            512            ds 1
0012            513   _LCDprint2_PARM_2:
0012            514            ds 1
0013            515   _LCDprint2_PARM_3:
0013            516            ds 1
0014            517   _main_period_1_76:
0014            518            ds 4
0018            519   _main_Phase_Shift_1_76:
0018            520            ds 4
001C            521   _main_frequency_1_76:
001C            522            ds 4
0020            523   _main_angfrequency_1_76:
0020            524            ds 4
0024            525   _main_bonus_counter_1_76:
0024            526            ds 2
0026            527   _main_str_frequency_1_76:
0026            528            ds 4
002A            529   _main_str_vref_1_76:
002A            530            ds 5
002F            531   _main_str_vtest_1_76:
002F            532            ds 5
0034            533   _main_str_phase_1_76:
0034            534            ds 4
0038            535   _main_str_period_1_76:
0038            536            ds 4
003C            537   _main_str_angfrequency_1_76:
003C            538            ds 4
0040            539   _main_sloc0_1_0:
0040            540            ds 2
0042            541   _main_sloc1_1_0:
0042            542            ds 4
0046            543   ;--------------------------------------------------------
0046            544   ; overlayable items in internal ram 
0046            545   ;--------------------------------------------------------
0000            546            rseg    R_OSEG
0000            547            rseg    R_OSEG
0000            548   _InitPinADC_PARM_2:
0000            549            ds 1
0001            550            rseg    R_OSEG
0001            551   ;--------------------------------------------------------
0001            552   ; indirectly addressable internal ram data
0001            553   ;--------------------------------------------------------
0000            554            rseg R_ISEG
0000            555   ;--------------------------------------------------------
0000            556   ; absolute internal ram data
0000            557   ;--------------------------------------------------------
0000            558            DSEG
0000            559   ;--------------------------------------------------------
0000            560   ; bit data
0000            561   ;--------------------------------------------------------
0000            562            rseg R_BSEG
0000            563   _LCDprint_PARM_3:
0000            564            DBIT    1
0001            565   ;--------------------------------------------------------
0001            566   ; paged external ram data
0001            567   ;--------------------------------------------------------
0000            568            rseg R_PSEG
0000            569   ;--------------------------------------------------------
0000            570   ; external ram data
0000            571   ;--------------------------------------------------------
0000            572            rseg R_XSEG
0000            573   ;--------------------------------------------------------
0000            574   ; absolute external ram data
0000            575   ;--------------------------------------------------------
0000            576            XSEG
0000            577   ;--------------------------------------------------------
0000            578   ; external initialized ram data
0000            579   ;--------------------------------------------------------
0000            580            rseg R_IXSEG
0000            581            rseg R_HOME
0000            582            rseg R_GSINIT
0000            583            rseg R_CSEG
0000            584   ;--------------------------------------------------------
0000            585   ; Reset entry point and interrupt vectors
0000            586   ;--------------------------------------------------------
0000            587            CSEG at 0x0000
0000 020000     588            ljmp    _crt0
0003            589   ;--------------------------------------------------------
0003            590   ; global & static initialisations
0003            591   ;--------------------------------------------------------
0000            592            rseg R_HOME
0000            593            rseg R_GSINIT
0000            594            rseg R_GSINIT
0000            595   ;--------------------------------------------------------
0000            596   ; data variables initialization
0000            597   ;--------------------------------------------------------
0000            598            rseg R_DINIT
0000            599   ;        sourcecode.c:31: float v1_rms = 0; float v2_rms = 0;
0000 751800     600            mov     _v1_rms,#0x00
0003 751900     601            mov     (_v1_rms + 1),#0x00
0006 751A00     602            mov     (_v1_rms + 2),#0x00
0009 751B00     603            mov     (_v1_rms + 3),#0x00
000C            604   ;        sourcecode.c:31: float v1 = 0; float v2 = 0;
000C 75D800     605            mov     _v2_rms,#0x00
000F 75D900     606            mov     (_v2_rms + 1),#0x00
0012 75DA00     607            mov     (_v2_rms + 2),#0x00
0015 75DB00     608            mov     (_v2_rms + 3),#0x00
0018            609   ;        sourcecode.c:32: 
0018 759800     610            mov     _v1,#0x00
001B 759900     611            mov     (_v1 + 1),#0x00
001E 759A00     612            mov     (_v1 + 2),#0x00
0021 759B00     613            mov     (_v1 + 3),#0x00
0024            614   ;        sourcecode.c:32: float v1 = 0; float v2 = 0;
0024 755800     615            mov     _v2,#0x00
0027 755900     616            mov     (_v2 + 1),#0x00
002A 755A00     617            mov     (_v2 + 2),#0x00
002D 755B00     618            mov     (_v2 + 3),#0x00
0030            619            ; The linker places a 'ret' at the end of segment R_DINIT.
0030            620   ;--------------------------------------------------------
0030            621   ; code
0030            622   ;--------------------------------------------------------
0000            623            rseg R_CSEG
0000            624   ;------------------------------------------------------------
0000            625   ;Allocation info for local variables in function '_c51_external_startup'
0000            626   ;------------------------------------------------------------
0000            627   ;------------------------------------------------------------
0000            628   ;        sourcecode.c:34: char _c51_external_startup (void)
0000            629   ;        -----------------------------------------
0000            630   ;         function _c51_external_startup
0000            631   ;        -----------------------------------------
0000            632   __c51_external_startup:
0000            633            using   0
0000            634   ;        sourcecode.c:42: VDM0CN=0x80;       // enable VDD monitor
0000 75FF80     635            mov     _VDM0CN,#0x80
0003            636   ;        sourcecode.c:43: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
0003 75EF06     637            mov     _RSTSRC,#0x06
0006            638   ;        sourcecode.c:50: SFRPAGE = 0x10;
0006 75A710     639            mov     _SFRPAGE,#0x10
0009            640   ;        sourcecode.c:51: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0009 75C120     641            mov     _PFE0CN,#0x20
000C            642   ;        sourcecode.c:52: SFRPAGE = 0x00;
000C 75A700     643            mov     _SFRPAGE,#0x00
000F            644   ;        sourcecode.c:73: CLKSEL = 0x00;
000F 75A900     645            mov     _CLKSEL,#0x00
0012            646   ;        sourcecode.c:74: CLKSEL = 0x00;
0012 75A900     647            mov     _CLKSEL,#0x00
0015            648   ;        sourcecode.c:75: while ((CLKSEL & 0x80) == 0);
0015            649   L002001?:
0015 E5A9       650            mov     a,_CLKSEL
0017 30E700     651            jnb     acc.7,L002001?
001A            652   ;        sourcecode.c:76: CLKSEL = 0x03;
001A 75A903     653            mov     _CLKSEL,#0x03
001D            654   ;        sourcecode.c:77: CLKSEL = 0x03;
001D 75A903     655            mov     _CLKSEL,#0x03
0020            656   ;        sourcecode.c:78: while ((CLKSEL & 0x80) == 0);
0020            657   L002004?:
0020 E5A9       658            mov     a,_CLKSEL
0022 30E780     659            jnb     acc.7,L002004?
0025            660   ;        sourcecode.c:83: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
0025 43A410     661            orl     _P0MDOUT,#0x10
0028            662   ;        sourcecode.c:84: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0028 75E101     663            mov     _XBR0,#0x01
002B            664   ;        sourcecode.c:85: XBR1     = 0X00;
002B 75E200     665            mov     _XBR1,#0x00
002E            666   ;        sourcecode.c:86: XBR2     = 0x40; // Enable crossbar and weak pull-ups
002E 75E340     667            mov     _XBR2,#0x40
0031            668   ;        sourcecode.c:92: SCON0 = 0x10;
0031 759810     669            mov     _SCON0,#0x10
0034            670   ;        sourcecode.c:93: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0034 758DE6     671            mov     _TH1,#0xE6
0037            672   ;        sourcecode.c:94: TL1 = TH1;      // Init Timer1
0037 858D8B     673            mov     _TL1,_TH1
003A            674   ;        sourcecode.c:95: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
003A 53890F     675            anl     _TMOD,#0x0F
003D            676   ;        sourcecode.c:96: TMOD |=  0x20;                       
003D 438920     677            orl     _TMOD,#0x20
0040            678   ;        sourcecode.c:97: TR1 = 1; // START Timer1
0040 D28E       679            setb    _TR1
0042            680   ;        sourcecode.c:98: TI = 1;  // Indicate TX0 ready
0042 D299       681            setb    _TI
0044            682   ;        sourcecode.c:100: return 0;
0044 758200     683            mov     dpl,#0x00
0047 22         684            ret
0048            685   ;------------------------------------------------------------
0048            686   ;Allocation info for local variables in function 'InitADC'
0048            687   ;------------------------------------------------------------
0048            688   ;------------------------------------------------------------
0048            689   ;        sourcecode.c:103: void InitADC (void)
0048            690   ;        -----------------------------------------
0048            691   ;         function InitADC
0048            692   ;        -----------------------------------------
0048            693   _InitADC:
0048            694   ;        sourcecode.c:105: SFRPAGE = 0x00;
0048 75A700     695            mov     _SFRPAGE,#0x00
004B            696   ;        sourcecode.c:106: ADEN=0; // Disable ADC
004B C2EF       697            clr     _ADEN
004D            698   ;        sourcecode.c:111: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
004D 75B280     699            mov     _ADC0CN1,#0x80
0050            700   ;        sourcecode.c:115: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0050 75BC20     701            mov     _ADC0CF0,#0x20
0053            702   ;        sourcecode.c:119: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0053 75B91E     703            mov     _ADC0CF1,#0x1E
0056            704   ;        sourcecode.c:128: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0056 75E800     705            mov     _ADC0CN0,#0x00
0059            706   ;        sourcecode.c:133: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0059 75DF3F     707            mov     _ADC0CF2,#0x3F
005C            708   ;        sourcecode.c:137: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
005C 75B300     709            mov     _ADC0CN2,#0x00
005F            710   ;        sourcecode.c:139: ADEN=1; // Enable ADC
005F D2EF       711            setb    _ADEN
0061 22         712            ret
0062            713   ;------------------------------------------------------------
0062            714   ;Allocation info for local variables in function 'Timer3us'
0062            715   ;------------------------------------------------------------
0062            716   ;us                        Allocated to registers r2 
0062            717   ;i                         Allocated to registers r3 
0062            718   ;------------------------------------------------------------
0062            719   ;        sourcecode.c:143: void Timer3us(unsigned char us)
0062            720   ;        -----------------------------------------
0062            721   ;         function Timer3us
0062            722   ;        -----------------------------------------
0062            723   _Timer3us:
0062 AA82       724            mov     r2,dpl
0064            725   ;        sourcecode.c:148: CKCON0|=0b_0100_0000;
0064 438E40     726            orl     _CKCON0,#0x40
0067            727   ;        sourcecode.c:150: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0067 7592B8     728            mov     _TMR3RL,#0xB8
006A 7593FF     729            mov     (_TMR3RL >> 8),#0xFF
006D            730   ;        sourcecode.c:151: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
006D 859294     731            mov     _TMR3,_TMR3RL
0070 859395     732            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0073            733   ;        sourcecode.c:153: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0073 759104     734            mov     _TMR3CN0,#0x04
0076            735   ;        sourcecode.c:154: for (i = 0; i < us; i++)       // Count <us> overflows
0076 7B00       736            mov     r3,#0x00
0078            737   L004004?:
0078 C3         738            clr     c
0079 EB         739            mov     a,r3
007A 9A         740            subb    a,r2
007B 5000       741            jnc     L004007?
007D            742   ;        sourcecode.c:156: while (!(TMR3CN0 & 0x80));  // Wait for overflow
007D            743   L004001?:
007D E591       744            mov     a,_TMR3CN0
007F 30E780     745            jnb     acc.7,L004001?
0082            746   ;        sourcecode.c:157: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0082 53917F     747            anl     _TMR3CN0,#0x7F
0085            748   ;        sourcecode.c:154: for (i = 0; i < us; i++)       // Count <us> overflows
0085 0B         749            inc     r3
0086 8000       750            sjmp    L004004?
0088            751   L004007?:
0088            752   ;        sourcecode.c:159: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0088 759100     753            mov     _TMR3CN0,#0x00
008B 22         754            ret
008C            755   ;------------------------------------------------------------
008C            756   ;Allocation info for local variables in function 'waitms'
008C            757   ;------------------------------------------------------------
008C            758   ;ms                        Allocated to registers r2 r3 
008C            759   ;j                         Allocated to registers r4 r5 
008C            760   ;k                         Allocated to registers r6 
008C            761   ;------------------------------------------------------------
008C            762   ;        sourcecode.c:162: void waitms (unsigned int ms)
008C            763   ;        -----------------------------------------
008C            764   ;         function waitms
008C            765   ;        -----------------------------------------
008C            766   _waitms:
008C AA82       767            mov     r2,dpl
008E AB83       768            mov     r3,dph
0090            769   ;        sourcecode.c:166: for(j=0; j<ms; j++)
0090 7C00       770            mov     r4,#0x00
0092 7D00       771            mov     r5,#0x00
0094            772   L005005?:
0094 C3         773            clr     c
0095 EC         774            mov     a,r4
0096 9A         775            subb    a,r2
0097 ED         776            mov     a,r5
0098 9B         777            subb    a,r3
0099 5000       778            jnc     L005009?
009B            779   ;        sourcecode.c:167: for (k=0; k<4; k++) Timer3us(250);
009B 7E00       780            mov     r6,#0x00
009D            781   L005001?:
009D BE04C0     782            cjne    r6,#0x04,L005018?
00A0            783   L005018?:
00A0 5000       784            jnc     L005007?
00A2 7582FA     785            mov     dpl,#0xFA
00A5 C002       786            push    ar2
00A7 C003       787            push    ar3
00A9 C004       788            push    ar4
00AB C005       789            push    ar5
00AD C006       790            push    ar6
00AF 120000     791            lcall   _Timer3us
00B2 D006       792            pop     ar6
00B4 D005       793            pop     ar5
00B6 D004       794            pop     ar4
00B8 D003       795            pop     ar3
00BA D002       796            pop     ar2
00BC 0E         797            inc     r6
00BD 8000       798            sjmp    L005001?
00BF            799   L005007?:
00BF            800   ;        sourcecode.c:166: for(j=0; j<ms; j++)
00BF 0C         801            inc     r4
00C0 BC0000     802            cjne    r4,#0x00,L005005?
00C3 0D         803            inc     r5
00C4 8000       804            sjmp    L005005?
00C6            805   L005009?:
00C6 22         806            ret
00C7            807   ;------------------------------------------------------------
00C7            808   ;Allocation info for local variables in function 'InitPinADC'
00C7            809   ;------------------------------------------------------------
00C7            810   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00C7            811   ;portno                    Allocated to registers r2 
00C7            812   ;mask                      Allocated to registers r3 
00C7            813   ;------------------------------------------------------------
00C7            814   ;        sourcecode.c:172: void InitPinADC (unsigned char portno, unsigned char pinno)
00C7            815   ;        -----------------------------------------
00C7            816   ;         function InitPinADC
00C7            817   ;        -----------------------------------------
00C7            818   _InitPinADC:
00C7 AA82       819            mov     r2,dpl
00C9            820   ;        sourcecode.c:176: mask=1<<pinno;
00C9 85C8F0     821            mov     b,_InitPinADC_PARM_2
00CC 05F0       822            inc     b
00CE 7401       823            mov     a,#0x01
00D0 8000       824            sjmp    L006013?
00D2            825   L006011?:
00D2 25E0       826            add     a,acc
00D4            827   L006013?:
00D4 D5F0C0     828            djnz    b,L006011?
00D7 FB         829            mov     r3,a
00D8            830   ;        sourcecode.c:178: SFRPAGE = 0x20;
00D8 75A720     831            mov     _SFRPAGE,#0x20
00DB            832   ;        sourcecode.c:179: switch (portno)
00DB BA0000     833            cjne    r2,#0x00,L006014?
00DE 8000       834            sjmp    L006001?
00E0            835   L006014?:
00E0 BA0180     836            cjne    r2,#0x01,L006015?
00E3 8000       837            sjmp    L006002?
00E5            838   L006015?:
00E5            839   ;        sourcecode.c:181: case 0:
00E5 BA0200     840            cjne    r2,#0x02,L006005?
00E8 8000       841            sjmp    L006003?
00EA            842   L006001?:
00EA            843   ;        sourcecode.c:182: P0MDIN &= (~mask); // Set pin as analog input
00EA EB         844            mov     a,r3
00EB F4         845            cpl     a
00EC FA         846            mov     r2,a
00ED 52F1       847            anl     _P0MDIN,a
00EF            848   ;        sourcecode.c:183: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00EF EB         849            mov     a,r3
00F0 42D4       850            orl     _P0SKIP,a
00F2            851   ;        sourcecode.c:184: break;
00F2            852   ;        sourcecode.c:185: case 1:
00F2 8000       853            sjmp    L006005?
00F4            854   L006002?:
00F4            855   ;        sourcecode.c:186: P1MDIN &= (~mask); // Set pin as analog input
00F4 EB         856            mov     a,r3
00F5 F4         857            cpl     a
00F6 FA         858            mov     r2,a
00F7 52F2       859            anl     _P1MDIN,a
00F9            860   ;        sourcecode.c:187: P1SKIP |= mask; // Skip Crossbar decoding for this pin
00F9 EB         861            mov     a,r3
00FA 42D5       862            orl     _P1SKIP,a
00FC            863   ;        sourcecode.c:188: break;
00FC            864   ;        sourcecode.c:189: case 2:
00FC 8000       865            sjmp    L006005?
00FE            866   L006003?:
00FE            867   ;        sourcecode.c:190: P2MDIN &= (~mask); // Set pin as analog input
00FE EB         868            mov     a,r3
00FF F4         869            cpl     a
0100 FA         870            mov     r2,a
0101 52F3       871            anl     _P2MDIN,a
0103            872   ;        sourcecode.c:191: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0103 EB         873            mov     a,r3
0104 42CC       874            orl     _P2SKIP,a
0106            875   ;        sourcecode.c:195: }
0106            876   L006005?:
0106            877   ;        sourcecode.c:196: SFRPAGE = 0x00;
0106 75A700     878            mov     _SFRPAGE,#0x00
0109 22         879            ret
010A            880   ;------------------------------------------------------------
010A            881   ;Allocation info for local variables in function 'ADC_at_Pin'
010A            882   ;------------------------------------------------------------
010A            883   ;pin                       Allocated to registers 
010A            884   ;------------------------------------------------------------
010A            885   ;        sourcecode.c:199: unsigned int ADC_at_Pin(unsigned char pin)
010A            886   ;        -----------------------------------------
010A            887   ;         function ADC_at_Pin
010A            888   ;        -----------------------------------------
010A            889   _ADC_at_Pin:
010A 8582BB     890            mov     _ADC0MX,dpl
010D            891   ;        sourcecode.c:202: ADINT = 0;
010D C2ED       892            clr     _ADINT
010F            893   ;        sourcecode.c:203: ADBUSY = 1;     // Convert voltage at the pin
010F D2EC       894            setb    _ADBUSY
0111            895   ;        sourcecode.c:204: while (!ADINT); // Wait for conversion to complete
0111            896   L007001?:
0111 30ED80     897            jnb     _ADINT,L007001?
0114            898   ;        sourcecode.c:205: return (ADC0);
0114 85BD82     899            mov     dpl,_ADC0
0117 85BE83     900            mov     dph,(_ADC0 >> 8)
011A 22         901            ret
011B            902   ;------------------------------------------------------------
011B            903   ;Allocation info for local variables in function 'Volts_at_Pin'
011B            904   ;------------------------------------------------------------
011B            905   ;pin                       Allocated to registers r2 
011B            906   ;------------------------------------------------------------
011B            907   ;        sourcecode.c:209: float Volts_at_Pin(unsigned char pin)
011B            908   ;        -----------------------------------------
011B            909   ;         function Volts_at_Pin
011B            910   ;        -----------------------------------------
011B            911   _Volts_at_Pin:
011B            912   ;        sourcecode.c:211: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
011B 120000     913            lcall   _ADC_at_Pin
011E 120000     914            lcall   ___uint2fs
0121 AA82       915            mov     r2,dpl
0123 AB83       916            mov     r3,dph
0125 ACF0       917            mov     r4,b
0127 FD         918            mov     r5,a
0128 C002       919            push    ar2
012A C003       920            push    ar3
012C C004       921            push    ar4
012E C005       922            push    ar5
0130 90923A     923            mov     dptr,#0x923A
0133 75F053     924            mov     b,#0x53
0136 7440       925            mov     a,#0x40
0138 120000     926            lcall   ___fsmul
013B AA82       927            mov     r2,dpl
013D AB83       928            mov     r3,dph
013F ACF0       929            mov     r4,b
0141 FD         930            mov     r5,a
0142 E581       931            mov     a,sp
0144 24FC       932            add     a,#0xfc
0146 F581       933            mov     sp,a
0148 E4         934            clr     a
0149 C0E0       935            push    acc
014B 74FC       936            mov     a,#0xFC
014D C0E0       937            push    acc
014F 747F       938            mov     a,#0x7F
0151 C0E0       939            push    acc
0153 7446       940            mov     a,#0x46
0155 C0E0       941            push    acc
0157 8A82       942            mov     dpl,r2
0159 8B83       943            mov     dph,r3
015B 8CF0       944            mov     b,r4
015D ED         945            mov     a,r5
015E 120000     946            lcall   ___fsdiv
0161 AA82       947            mov     r2,dpl
0163 AB83       948            mov     r3,dph
0165 ACF0       949            mov     r4,b
0167 FD         950            mov     r5,a
0168 E581       951            mov     a,sp
016A 24FC       952            add     a,#0xfc
016C F581       953            mov     sp,a
016E 8A82       954            mov     dpl,r2
0170 8B83       955            mov     dph,r3
0172 8CF0       956            mov     b,r4
0174 ED         957            mov     a,r5
0175 22         958            ret
0176            959   ;------------------------------------------------------------
0176            960   ;Allocation info for local variables in function 'TIMER0_Init'
0176            961   ;------------------------------------------------------------
0176            962   ;------------------------------------------------------------
0176            963   ;        sourcecode.c:214: void TIMER0_Init(void)
0176            964   ;        -----------------------------------------
0176            965   ;         function TIMER0_Init
0176            966   ;        -----------------------------------------
0176            967   _TIMER0_Init:
0176            968   ;        sourcecode.c:216: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0176 5389F0     969            anl     _TMOD,#0xF0
0179            970   ;        sourcecode.c:217: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0179 438901     971            orl     _TMOD,#0x01
017C            972   ;        sourcecode.c:218: TR0=0; // Stop Timer/Counter 0
017C C28C       973            clr     _TR0
017E 22         974            ret
017F            975   ;------------------------------------------------------------
017F            976   ;Allocation info for local variables in function 'LCD_pulse'
017F            977   ;------------------------------------------------------------
017F            978   ;------------------------------------------------------------
017F            979   ;        sourcecode.c:223: void LCD_pulse (void)
017F            980   ;        -----------------------------------------
017F            981   ;         function LCD_pulse
017F            982   ;        -----------------------------------------
017F            983   _LCD_pulse:
017F            984   ;        sourcecode.c:225: LCD_E=1;
017F D2A0       985            setb    _P2_0
0181            986   ;        sourcecode.c:226: Timer3us(40);
0181 758228     987            mov     dpl,#0x28
0184 120000     988            lcall   _Timer3us
0187            989   ;        sourcecode.c:227: LCD_E=0;
0187 C2A0       990            clr     _P2_0
0189 22         991            ret
018A            992   ;------------------------------------------------------------
018A            993   ;Allocation info for local variables in function 'LCD_byte'
018A            994   ;------------------------------------------------------------
018A            995   ;x                         Allocated to registers r2 
018A            996   ;------------------------------------------------------------
018A            997   ;        sourcecode.c:230: void LCD_byte (unsigned char x)
018A            998   ;        -----------------------------------------
018A            999   ;         function LCD_byte
018A           1000   ;        -----------------------------------------
018A           1001   _LCD_byte:
018A AA82      1002            mov     r2,dpl
018C           1003   ;        sourcecode.c:233: ACC=x; //Send high nible
018C 8AE0      1004            mov     _ACC,r2
018E           1005   ;        sourcecode.c:234: LCD_D7=ACC_7;
018E A2E7      1006            mov     c,_ACC_7
0190 9290      1007            mov     _P1_0,c
0192           1008   ;        sourcecode.c:235: LCD_D6=ACC_6;
0192 A2E6      1009            mov     c,_ACC_6
0194 9291      1010            mov     _P1_1,c
0196           1011   ;        sourcecode.c:236: LCD_D5=ACC_5;
0196 A2E5      1012            mov     c,_ACC_5
0198 9292      1013            mov     _P1_2,c
019A           1014   ;        sourcecode.c:237: LCD_D4=ACC_4;
019A A2E4      1015            mov     c,_ACC_4
019C 9293      1016            mov     _P1_3,c
019E           1017   ;        sourcecode.c:238: LCD_pulse();
019E C002      1018            push    ar2
01A0 120000    1019            lcall   _LCD_pulse
01A3           1020   ;        sourcecode.c:239: Timer3us(40);
01A3 758228    1021            mov     dpl,#0x28
01A6 120000    1022            lcall   _Timer3us
01A9 D002      1023            pop     ar2
01AB           1024   ;        sourcecode.c:240: ACC=x; //Send low nible
01AB 8AE0      1025            mov     _ACC,r2
01AD           1026   ;        sourcecode.c:241: LCD_D7=ACC_3;
01AD A2E3      1027            mov     c,_ACC_3
01AF 9290      1028            mov     _P1_0,c
01B1           1029   ;        sourcecode.c:242: LCD_D6=ACC_2;
01B1 A2E2      1030            mov     c,_ACC_2
01B3 9291      1031            mov     _P1_1,c
01B5           1032   ;        sourcecode.c:243: LCD_D5=ACC_1;
01B5 A2E1      1033            mov     c,_ACC_1
01B7 9292      1034            mov     _P1_2,c
01B9           1035   ;        sourcecode.c:244: LCD_D4=ACC_0;
01B9 A2E0      1036            mov     c,_ACC_0
01BB 9293      1037            mov     _P1_3,c
01BD           1038   ;        sourcecode.c:245: LCD_pulse();
01BD 020000    1039            ljmp    _LCD_pulse
01C0           1040   ;------------------------------------------------------------
01C0           1041   ;Allocation info for local variables in function 'WriteData'
01C0           1042   ;------------------------------------------------------------
01C0           1043   ;x                         Allocated to registers r2 
01C0           1044   ;------------------------------------------------------------
01C0           1045   ;        sourcecode.c:248: void WriteData (unsigned char x)
01C0           1046   ;        -----------------------------------------
01C0           1047   ;         function WriteData
01C0           1048   ;        -----------------------------------------
01C0           1049   _WriteData:
01C0 AA82      1050            mov     r2,dpl
01C2           1051   ;        sourcecode.c:250: LCD_RS=1;
01C2 D297      1052            setb    _P1_7
01C4           1053   ;        sourcecode.c:251: LCD_byte(x);
01C4 8A82      1054            mov     dpl,r2
01C6 120000    1055            lcall   _LCD_byte
01C9           1056   ;        sourcecode.c:252: waitms(2);
01C9 900002    1057            mov     dptr,#0x0002
01CC 020000    1058            ljmp    _waitms
01CF           1059   ;------------------------------------------------------------
01CF           1060   ;Allocation info for local variables in function 'WriteCommand'
01CF           1061   ;------------------------------------------------------------
01CF           1062   ;x                         Allocated to registers r2 
01CF           1063   ;------------------------------------------------------------
01CF           1064   ;        sourcecode.c:255: void WriteCommand (unsigned char x)
01CF           1065   ;        -----------------------------------------
01CF           1066   ;         function WriteCommand
01CF           1067   ;        -----------------------------------------
01CF           1068   _WriteCommand:
01CF AA82      1069            mov     r2,dpl
01D1           1070   ;        sourcecode.c:257: LCD_RS=0;
01D1 C297      1071            clr     _P1_7
01D3           1072   ;        sourcecode.c:258: LCD_byte(x);
01D3 8A82      1073            mov     dpl,r2
01D5 120000    1074            lcall   _LCD_byte
01D8           1075   ;        sourcecode.c:259: waitms(5);
01D8 900005    1076            mov     dptr,#0x0005
01DB 020000    1077            ljmp    _waitms
01DE           1078   ;------------------------------------------------------------
01DE           1079   ;Allocation info for local variables in function 'LCD_4BIT'
01DE           1080   ;------------------------------------------------------------
01DE           1081   ;------------------------------------------------------------
01DE           1082   ;        sourcecode.c:262: void LCD_4BIT (void)
01DE           1083   ;        -----------------------------------------
01DE           1084   ;         function LCD_4BIT
01DE           1085   ;        -----------------------------------------
01DE           1086   _LCD_4BIT:
01DE           1087   ;        sourcecode.c:264: LCD_E=0; // Resting state of LCD's enable is zero
01DE C2A0      1088            clr     _P2_0
01E0           1089   ;        sourcecode.c:266: waitms(20);
01E0 900014    1090            mov     dptr,#0x0014
01E3 120000    1091            lcall   _waitms
01E6           1092   ;        sourcecode.c:268: WriteCommand(0x33);
01E6 758233    1093            mov     dpl,#0x33
01E9 120000    1094            lcall   _WriteCommand
01EC           1095   ;        sourcecode.c:269: WriteCommand(0x33);
01EC 758233    1096            mov     dpl,#0x33
01EF 120000    1097            lcall   _WriteCommand
01F2           1098   ;        sourcecode.c:270: WriteCommand(0x32); // Change to 4-bit mode
01F2 758232    1099            mov     dpl,#0x32
01F5 120000    1100            lcall   _WriteCommand
01F8           1101   ;        sourcecode.c:273: WriteCommand(0x28);
01F8 758228    1102            mov     dpl,#0x28
01FB 120000    1103            lcall   _WriteCommand
01FE           1104   ;        sourcecode.c:274: WriteCommand(0x0c);
01FE 75820C    1105            mov     dpl,#0x0C
0201 120000    1106            lcall   _WriteCommand
0204           1107   ;        sourcecode.c:275: WriteCommand(0x01); // Clear screen command (takes some time)
0204 758201    1108            mov     dpl,#0x01
0207 120000    1109            lcall   _WriteCommand
020A           1110   ;        sourcecode.c:276: waitms(20); // Wait for clear screen command to finsih.
020A 900014    1111            mov     dptr,#0x0014
020D 020000    1112            ljmp    _waitms
0210           1113   ;------------------------------------------------------------
0210           1114   ;Allocation info for local variables in function 'LCDprint'
0210           1115   ;------------------------------------------------------------
0210           1116   ;line                      Allocated with name '_LCDprint_PARM_2'
0210           1117   ;string                    Allocated to registers r2 r3 r4 
0210           1118   ;j                         Allocated to registers r5 r6 
0210           1119   ;------------------------------------------------------------
0210           1120   ;        sourcecode.c:279: void LCDprint(char * string, unsigned char line, bit clear)
0210           1121   ;        -----------------------------------------
0210           1122   ;         function LCDprint
0210           1123   ;        -----------------------------------------
0210           1124   _LCDprint:
0210 AA82      1125            mov     r2,dpl
0212 AB83      1126            mov     r3,dph
0214 ACF0      1127            mov     r4,b
0216           1128   ;        sourcecode.c:283: WriteCommand(line==2?0xc0:0x80);
0216 7402      1129            mov     a,#0x02
0218 B518C0    1130            cjne    a,_LCDprint_PARM_2,L015013?
021B 7DC0      1131            mov     r5,#0xC0
021D 8000      1132            sjmp    L015014?
021F           1133   L015013?:
021F 7D80      1134            mov     r5,#0x80
0221           1135   L015014?:
0221 8D82      1136            mov     dpl,r5
0223 C002      1137            push    ar2
0225 C003      1138            push    ar3
0227 C004      1139            push    ar4
0229 120000    1140            lcall   _WriteCommand
022C           1141   ;        sourcecode.c:284: waitms(5);
022C 900005    1142            mov     dptr,#0x0005
022F 120000    1143            lcall   _waitms
0232 D004      1144            pop     ar4
0234 D003      1145            pop     ar3
0236 D002      1146            pop     ar2
0238           1147   ;        sourcecode.c:285: for(j=0; string[j]!=0; j++)   WriteData(string[j]);// Write the message
0238 7D00      1148            mov     r5,#0x00
023A 7E00      1149            mov     r6,#0x00
023C           1150   L015003?:
023C ED        1151            mov     a,r5
023D 2A        1152            add     a,r2
023E FF        1153            mov     r7,a
023F EE        1154            mov     a,r6
0240 3B        1155            addc    a,r3
0241 F8        1156            mov     r0,a
0242 8C01      1157            mov     ar1,r4
0244 8F82      1158            mov     dpl,r7
0246 8883      1159            mov     dph,r0
0248 89F0      1160            mov     b,r1
024A 120000    1161            lcall   __gptrget
024D FF        1162            mov     r7,a
024E 6000      1163            jz      L015006?
0250 8F82      1164            mov     dpl,r7
0252 C002      1165            push    ar2
0254 C003      1166            push    ar3
0256 C004      1167            push    ar4
0258 C005      1168            push    ar5
025A C006      1169            push    ar6
025C 120000    1170            lcall   _WriteData
025F D006      1171            pop     ar6
0261 D005      1172            pop     ar5
0263 D004      1173            pop     ar4
0265 D003      1174            pop     ar3
0267 D002      1175            pop     ar2
0269 0D        1176            inc     r5
026A BD0040    1177            cjne    r5,#0x00,L015003?
026D 0E        1178            inc     r6
026E 8000      1179            sjmp    L015003?
0270           1180   L015006?:
0270           1181   ;        sourcecode.c:286: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0270 302800    1182            jnb     _LCDprint_PARM_3,L015011?
0273 8D02      1183            mov     ar2,r5
0275 8E03      1184            mov     ar3,r6
0277           1185   L015007?:
0277 C3        1186            clr     c
0278 EA        1187            mov     a,r2
0279 9410      1188            subb    a,#0x10
027B EB        1189            mov     a,r3
027C 6480      1190            xrl     a,#0x80
027E 9480      1191            subb    a,#0x80
0280 5000      1192            jnc     L015011?
0282 758220    1193            mov     dpl,#0x20
0285 C002      1194            push    ar2
0287 C003      1195            push    ar3
0289 120000    1196            lcall   _WriteData
028C D003      1197            pop     ar3
028E D002      1198            pop     ar2
0290 0A        1199            inc     r2
0291 BA0040    1200            cjne    r2,#0x00,L015007?
0294 0B        1201            inc     r3
0295 8000      1202            sjmp    L015007?
0297           1203   L015011?:
0297 22        1204            ret
0298           1205   ;------------------------------------------------------------
0298           1206   ;Allocation info for local variables in function 'LCDprint2'
0298           1207   ;------------------------------------------------------------
0298           1208   ;line                      Allocated with name '_LCDprint2_PARM_2'
0298           1209   ;col                       Allocated with name '_LCDprint2_PARM_3'
0298           1210   ;string                    Allocated to registers r2 r3 r4 
0298           1211   ;j                         Allocated to registers r5 r6 
0298           1212   ;------------------------------------------------------------
0298           1213   ;        sourcecode.c:289: void LCDprint2(char * string, unsigned char line, unsigned char col)
0298           1214   ;        -----------------------------------------
0298           1215   ;         function LCDprint2
0298           1216   ;        -----------------------------------------
0298           1217   _LCDprint2:
0298 AA82      1218            mov     r2,dpl
029A AB83      1219            mov     r3,dph
029C ACF0      1220            mov     r4,b
029E           1221   ;        sourcecode.c:293: WriteCommand(line==2?0xc0|col:0x80|col); // Move cursor to line and column
029E 7402      1222            mov     a,#0x02
02A0 B5C880    1223            cjne    a,_LCDprint2_PARM_2,L016007?
02A3 74C0      1224            mov     a,#0xC0
02A5 4578      1225            orl     a,_LCDprint2_PARM_3
02A7 FD        1226            mov     r5,a
02A8 8000      1227            sjmp    L016008?
02AA           1228   L016007?:
02AA 7480      1229            mov     a,#0x80
02AC 4578      1230            orl     a,_LCDprint2_PARM_3
02AE FD        1231            mov     r5,a
02AF           1232   L016008?:
02AF 8D82      1233            mov     dpl,r5
02B1 C002      1234            push    ar2
02B3 C003      1235            push    ar3
02B5 C004      1236            push    ar4
02B7 120000    1237            lcall   _WriteCommand
02BA D004      1238            pop     ar4
02BC D003      1239            pop     ar3
02BE D002      1240            pop     ar2
02C0           1241   ;        sourcecode.c:294: for(j=0; string[j]!=0; j++){ 
02C0 7D00      1242            mov     r5,#0x00
02C2 7E00      1243            mov     r6,#0x00
02C4           1244   L016001?:
02C4 ED        1245            mov     a,r5
02C5 2A        1246            add     a,r2
02C6 FF        1247            mov     r7,a
02C7 EE        1248            mov     a,r6
02C8 3B        1249            addc    a,r3
02C9 F8        1250            mov     r0,a
02CA 8C01      1251            mov     ar1,r4
02CC 8F82      1252            mov     dpl,r7
02CE 8883      1253            mov     dph,r0
02D0 89F0      1254            mov     b,r1
02D2 120000    1255            lcall   __gptrget
02D5 FF        1256            mov     r7,a
02D6 6000      1257            jz      L016005?
02D8           1258   ;        sourcecode.c:295: WriteData(string[j]); // Write the message
02D8 8F82      1259            mov     dpl,r7
02DA C002      1260            push    ar2
02DC C003      1261            push    ar3
02DE C004      1262            push    ar4
02E0 C005      1263            push    ar5
02E2 C006      1264            push    ar6
02E4 120000    1265            lcall   _WriteData
02E7 D006      1266            pop     ar6
02E9 D005      1267            pop     ar5
02EB D004      1268            pop     ar4
02ED D003      1269            pop     ar3
02EF D002      1270            pop     ar2
02F1           1271   ;        sourcecode.c:294: for(j=0; string[j]!=0; j++){ 
02F1 0D        1272            inc     r5
02F2 BD0000    1273            cjne    r5,#0x00,L016001?
02F5 0E        1274            inc     r6
02F6 8000      1275            sjmp    L016001?
02F8           1276   L016005?:
02F8 22        1277            ret
02F9           1278   ;------------------------------------------------------------
02F9           1279   ;Allocation info for local variables in function 'main'
02F9           1280   ;------------------------------------------------------------
02F9           1281   ;period                    Allocated with name '_main_period_1_76'
02F9           1282   ;Phase_Shift               Allocated with name '_main_Phase_Shift_1_76'
02F9           1283   ;time_difference           Allocated to registers r2 r3 r4 r5 
02F9           1284   ;frequency                 Allocated with name '_main_frequency_1_76'
02F9           1285   ;angfrequency              Allocated with name '_main_angfrequency_1_76'
02F9           1286   ;bonus_counter             Allocated with name '_main_bonus_counter_1_76'
02F9           1287   ;str_frequency             Allocated with name '_main_str_frequency_1_76'
02F9           1288   ;str_vref                  Allocated with name '_main_str_vref_1_76'
02F9           1289   ;str_vtest                 Allocated with name '_main_str_vtest_1_76'
02F9           1290   ;str_phase                 Allocated with name '_main_str_phase_1_76'
02F9           1291   ;str_period                Allocated with name '_main_str_period_1_76'
02F9           1292   ;str_angfrequency          Allocated with name '_main_str_angfrequency_1_76'
02F9           1293   ;sloc0                     Allocated with name '_main_sloc0_1_0'
02F9           1294   ;sloc1                     Allocated with name '_main_sloc1_1_0'
02F9           1295   ;------------------------------------------------------------
02F9           1296   ;        sourcecode.c:302: void main (void)
02F9           1297   ;        -----------------------------------------
02F9           1298   ;         function main
02F9           1299   ;        -----------------------------------------
02F9           1300   _main:
02F9           1301   ;        sourcecode.c:309: unsigned int bonus_counter = 0; 
02F9 E4        1302            clr     a
02FA F520      1303            mov     _main_bonus_counter_1_76,a
02FC F521      1304            mov     (_main_bonus_counter_1_76 + 1),a
02FE           1305   ;        sourcecode.c:318: TIMER0_Init();
02FE 120000    1306            lcall   _TIMER0_Init
0301           1307   ;        sourcecode.c:321: LCD_4BIT();
0301 120000    1308            lcall   _LCD_4BIT
0304           1309   ;        sourcecode.c:323: waitms(500); // Give PuTTy a chance to start before sending
0304 9001F4    1310            mov     dptr,#0x01F4
0307 120000    1311            lcall   _waitms
030A           1312   ;        sourcecode.c:324: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
030A 7480      1313            mov     a,#__str_0
030C C0E0      1314            push    acc
030E 74DA      1315            mov     a,#(__str_0 >> 8)
0310 C0E0      1316            push    acc
0312 7480      1317            mov     a,#0x80
0314 C0E0      1318            push    acc
0316 120000    1319            lcall   _printf
0319 1581      1320            dec     sp
031B 1581      1321            dec     sp
031D 1581      1322            dec     sp
031F           1323   ;        sourcecode.c:329: __FILE__, __DATE__, __TIME__);
031F           1324   ;        sourcecode.c:328: "Compiled: %s, %s\n\n",
031F 7400      1325            mov     a,#__str_4
0321 C0E0      1326            push    acc
0323 74DB      1327            mov     a,#(__str_4 >> 8)
0325 C0E0      1328            push    acc
0327 7480      1329            mov     a,#0x80
0329 C0E0      1330            push    acc
032B 7440      1331            mov     a,#__str_3
032D C0E0      1332            push    acc
032F 74DB      1333            mov     a,#(__str_3 >> 8)
0331 C0E0      1334            push    acc
0333 7480      1335            mov     a,#0x80
0335 C0E0      1336            push    acc
0337 7480      1337            mov     a,#__str_2
0339 C0E0      1338            push    acc
033B 74DB      1339            mov     a,#(__str_2 >> 8)
033D C0E0      1340            push    acc
033F 7480      1341            mov     a,#0x80
0341 C0E0      1342            push    acc
0343 74C0      1343            mov     a,#__str_1
0345 C0E0      1344            push    acc
0347 74DB      1345            mov     a,#(__str_1 >> 8)
0349 C0E0      1346            push    acc
034B 7480      1347            mov     a,#0x80
034D C0E0      1348            push    acc
034F 120000    1349            lcall   _printf
0352 E581      1350            mov     a,sp
0354 24F4      1351            add     a,#0xf4
0356 F581      1352            mov     sp,a
0358           1353   ;        sourcecode.c:334: LCDprint2("F:XXHz   P:  .XXX", 1, 0); //string, row, column
0358 75C801    1354            mov     _LCDprint2_PARM_2,#0x01
035B 757800    1355            mov     _LCDprint2_PARM_3,#0x00
035E 90DC00    1356            mov     dptr,#__str_5
0361 75F080    1357            mov     b,#0x80
0364 120000    1358            lcall   _LCDprint2
0367           1359   ;        sourcecode.c:335: LCDprint2("VR:X.XX  VT:X.XX", 2, 0); //string, row, column
0367 75C802    1360            mov     _LCDprint2_PARM_2,#0x02
036A 757800    1361            mov     _LCDprint2_PARM_3,#0x00
036D 90DC40    1362            mov     dptr,#__str_6
0370 75F080    1363            mov     b,#0x80
0373 120000    1364            lcall   _LCDprint2
0376           1365   ;        sourcecode.c:337: InitPinADC(2, 1); // Configure P2.1 as analog input
0376 75C801    1366            mov     _InitPinADC_PARM_2,#0x01
0379 758202    1367            mov     dpl,#0x02
037C 120000    1368            lcall   _InitPinADC
037F           1369   ;        sourcecode.c:338: InitPinADC(2, 2); // Configure P2.2 as analog input
037F 75C802    1370            mov     _InitPinADC_PARM_2,#0x02
0382 758202    1371            mov     dpl,#0x02
0385 120000    1372            lcall   _InitPinADC
0388           1373   ;        sourcecode.c:340: InitADC();
0388 120000    1374            lcall   _InitADC
038B           1375   ;        sourcecode.c:342: while(1)
038B           1376   L017062?:
038B           1377   ;        sourcecode.c:345: TL0 = 0; 
038B 758A00    1378            mov     _TL0,#0x00
038E           1379   ;        sourcecode.c:346: TH0 = 0;
038E 758C00    1380            mov     _TH0,#0x00
0391           1381   ;        sourcecode.c:347: TF0 = 0;
0391 C28D      1382            clr     _TF0
0393           1383   ;        sourcecode.c:348: overflow_count = 0;
0393 75E800    1384            mov     _overflow_count,#0x00
0396           1385   ;        sourcecode.c:354: while(Volts_at_Pin(QFP32_MUX_P2_2) > 0); // Wait for the signal to be zero
0396           1386   L017001?:
0396 75820F    1387            mov     dpl,#0x0F
0399 120000    1388            lcall   _Volts_at_Pin
039C AC82      1389            mov     r4,dpl
039E AD83      1390            mov     r5,dph
03A0 AEF0      1391            mov     r6,b
03A2 FF        1392            mov     r7,a
03A3 E4        1393            clr     a
03A4 C0E0      1394            push    acc
03A6 C0E0      1395            push    acc
03A8 C0E0      1396            push    acc
03AA C0E0      1397            push    acc
03AC 8C82      1398            mov     dpl,r4
03AE 8D83      1399            mov     dph,r5
03B0 8EF0      1400            mov     b,r6
03B2 EF        1401            mov     a,r7
03B3 120000    1402            lcall   ___fsgt
03B6 AC82      1403            mov     r4,dpl
03B8 E581      1404            mov     a,sp
03BA 24FC      1405            add     a,#0xfc
03BC F581      1406            mov     sp,a
03BE EC        1407            mov     a,r4
03BF 7000      1408            jnz     L017001?
03C1           1409   ;        sourcecode.c:355: while(Volts_at_Pin(QFP32_MUX_P2_2) == 0); // Wait for the signal to be one
03C1           1410   L017004?:
03C1 75820F    1411            mov     dpl,#0x0F
03C4 120000    1412            lcall   _Volts_at_Pin
03C7 AC82      1413            mov     r4,dpl
03C9 AD83      1414            mov     r5,dph
03CB AEF0      1415            mov     r6,b
03CD FF        1416            mov     r7,a
03CE EC        1417            mov     a,r4
03CF 4D        1418            orl     a,r5
03D0 4E        1419            orl     a,r6
03D1 8FF0      1420            mov     b,r7
03D3 C2F7      1421            clr     b.7 ; Clear the sign bit
03D5 45F0      1422            orl     a,b
03D7 6000      1423            jz      L017004?
03D9           1424   ;        sourcecode.c:356: TR0 = 1; // Start the timer
03D9 D28C      1425            setb    _TR0
03DB           1426   ;        sourcecode.c:357: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0) { // Wait for the signal to be zero
03DB           1427   L017009?:
03DB 75820F    1428            mov     dpl,#0x0F
03DE 120000    1429            lcall   _Volts_at_Pin
03E1 AC82      1430            mov     r4,dpl
03E3 AD83      1431            mov     r5,dph
03E5 AEF0      1432            mov     r6,b
03E7 FF        1433            mov     r7,a
03E8 E4        1434            clr     a
03E9 C0E0      1435            push    acc
03EB C0E0      1436            push    acc
03ED C0E0      1437            push    acc
03EF C0E0      1438            push    acc
03F1 8C82      1439            mov     dpl,r4
03F3 8D83      1440            mov     dph,r5
03F5 8EF0      1441            mov     b,r6
03F7 EF        1442            mov     a,r7
03F8 120000    1443            lcall   ___fsgt
03FB AC82      1444            mov     r4,dpl
03FD E581      1445            mov     a,sp
03FF 24FC      1446            add     a,#0xfc
0401 F581      1447            mov     sp,a
0403 EC        1448            mov     a,r4
0404 6000      1449            jz      L017014?
0406           1450   ;        sourcecode.c:358: if (TF0 == 1) { // Did the 16-bit timer overflow?
0406           1451   ;        sourcecode.c:359: TF0 = 0;
0406 108D00    1452            jbc     _TF0,L017100?
0409 8000      1453            sjmp    L017009?
040B           1454   L017100?:
040B           1455   ;        sourcecode.c:360: overflow_count++;
040B 05E8      1456            inc     _overflow_count
040D           1457   ;        sourcecode.c:363: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0) { // Wait for the signal to be one
040D 8000      1458            sjmp    L017009?
040F           1459   L017014?:
040F 75820F    1460            mov     dpl,#0x0F
0412 120000    1461            lcall   _Volts_at_Pin
0415 AC82      1462            mov     r4,dpl
0417 AD83      1463            mov     r5,dph
0419 AEF0      1464            mov     r6,b
041B FF        1465            mov     r7,a
041C E4        1466            clr     a
041D C0E0      1467            push    acc
041F C0E0      1468            push    acc
0421 C0E0      1469            push    acc
0423 C0E0      1470            push    acc
0425 8C82      1471            mov     dpl,r4
0427 8D83      1472            mov     dph,r5
0429 8EF0      1473            mov     b,r6
042B EF        1474            mov     a,r7
042C 120000    1475            lcall   ___fsgt
042F AC82      1476            mov     r4,dpl
0431 E581      1477            mov     a,sp
0433 24FC      1478            add     a,#0xfc
0435 F581      1479            mov     sp,a
0437 EC        1480            mov     a,r4
0438 6000      1481            jz      L017016?
043A           1482   ;        sourcecode.c:364: if (TF0 == 1) { // Did the 16-bit timer overflow?
043A           1483   ;        sourcecode.c:365: TF0 = 0;
043A 108D80    1484            jbc     _TF0,L017102?
043D 8000      1485            sjmp    L017014?
043F           1486   L017102?:
043F           1487   ;        sourcecode.c:366: overflow_count++;
043F 05E8      1488            inc     _overflow_count
0441 8000      1489            sjmp    L017014?
0443           1490   L017016?:
0443           1491   ;        sourcecode.c:369: TR0 = 0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0443 C28C      1492            clr     _TR0
0445           1493   ;        sourcecode.c:370: period = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*(2);
0445 85E882    1494            mov     dpl,_overflow_count
0448 120000    1495            lcall   ___uchar2fs
044B AC82      1496            mov     r4,dpl
044D AD83      1497            mov     r5,dph
044F AEF0      1498            mov     r6,b
0451 FF        1499            mov     r7,a
0452 C004      1500            push    ar4
0454 C005      1501            push    ar5
0456 C006      1502            push    ar6
0458 C007      1503            push    ar7
045A 900000    1504            mov     dptr,#0x0000
045D 75F080    1505            mov     b,#0x80
0460 7447      1506            mov     a,#0x47
0462 120000    1507            lcall   ___fsmul
0465 AC82      1508            mov     r4,dpl
0467 AD83      1509            mov     r5,dph
0469 AEF0      1510            mov     r6,b
046B FF        1511            mov     r7,a
046C E581      1512            mov     a,sp
046E 24FC      1513            add     a,#0xfc
0470 F581      1514            mov     sp,a
0472 858C82    1515            mov     dpl,_TH0
0475 C004      1516            push    ar4
0477 C005      1517            push    ar5
0479 C006      1518            push    ar6
047B C007      1519            push    ar7
047D 120000    1520            lcall   ___uchar2fs
0480 A882      1521            mov     r0,dpl
0482 A983      1522            mov     r1,dph
0484 AAF0      1523            mov     r2,b
0486 FB        1524            mov     r3,a
0487 C000      1525            push    ar0
0489 C001      1526            push    ar1
048B C002      1527            push    ar2
048D C003      1528            push    ar3
048F 900000    1529            mov     dptr,#0x0000
0492 75F080    1530            mov     b,#0x80
0495 7443      1531            mov     a,#0x43
0497 120000    1532            lcall   ___fsmul
049A AA82      1533            mov     r2,dpl
049C AB83      1534            mov     r3,dph
049E A8F0      1535            mov     r0,b
04A0 F9        1536            mov     r1,a
04A1 E581      1537            mov     a,sp
04A3 24FC      1538            add     a,#0xfc
04A5 F581      1539            mov     sp,a
04A7 D007      1540            pop     ar7
04A9 D006      1541            pop     ar6
04AB D005      1542            pop     ar5
04AD D004      1543            pop     ar4
04AF C002      1544            push    ar2
04B1 C003      1545            push    ar3
04B3 C000      1546            push    ar0
04B5 C001      1547            push    ar1
04B7 8C82      1548            mov     dpl,r4
04B9 8D83      1549            mov     dph,r5
04BB 8EF0      1550            mov     b,r6
04BD EF        1551            mov     a,r7
04BE 120000    1552            lcall   ___fsadd
04C1 AA82      1553            mov     r2,dpl
04C3 AB83      1554            mov     r3,dph
04C5 ACF0      1555            mov     r4,b
04C7 FD        1556            mov     r5,a
04C8 E581      1557            mov     a,sp
04CA 24FC      1558            add     a,#0xfc
04CC F581      1559            mov     sp,a
04CE AE8A      1560            mov     r6,_TL0
04D0 7F00      1561            mov     r7,#0x00
04D2 8E82      1562            mov     dpl,r6
04D4 8F83      1563            mov     dph,r7
04D6 C002      1564            push    ar2
04D8 C003      1565            push    ar3
04DA C004      1566            push    ar4
04DC C005      1567            push    ar5
04DE 120000    1568            lcall   ___sint2fs
04E1 AE82      1569            mov     r6,dpl
04E3 AF83      1570            mov     r7,dph
04E5 A8F0      1571            mov     r0,b
04E7 F9        1572            mov     r1,a
04E8 D005      1573            pop     ar5
04EA D004      1574            pop     ar4
04EC D003      1575            pop     ar3
04EE D002      1576            pop     ar2
04F0 C006      1577            push    ar6
04F2 C007      1578            push    ar7
04F4 C000      1579            push    ar0
04F6 C001      1580            push    ar1
04F8 8A82      1581            mov     dpl,r2
04FA 8B83      1582            mov     dph,r3
04FC 8CF0      1583            mov     b,r4
04FE ED        1584            mov     a,r5
04FF 120000    1585            lcall   ___fsadd
0502 AA82      1586            mov     r2,dpl
0504 AB83      1587            mov     r3,dph
0506 ACF0      1588            mov     r4,b
0508 FD        1589            mov     r5,a
0509 E581      1590            mov     a,sp
050B 24FC      1591            add     a,#0xfc
050D F581      1592            mov     sp,a
050F C002      1593            push    ar2
0511 C003      1594            push    ar3
0513 C004      1595            push    ar4
0515 C005      1596            push    ar5
0517 90F4FC    1597            mov     dptr,#0xF4FC
051A 75F0B2    1598            mov     b,#0xB2
051D 7434      1599            mov     a,#0x34
051F 120000    1600            lcall   ___fsmul
0522 8582E0    1601            mov     _main_period_1_76,dpl
0525 8583E1    1602            mov     (_main_period_1_76 + 1),dph
0528 85F0E2    1603            mov     (_main_period_1_76 + 2),b
052B F5E3      1604            mov     (_main_period_1_76 + 3),a
052D E581      1605            mov     a,sp
052F 24FC      1606            add     a,#0xfc
0531 F581      1607            mov     sp,a
0533           1608   ;        sourcecode.c:372: frequency = 1.0/period;
0533 C0E0      1609            push    _main_period_1_76
0535 C0E1      1610            push    (_main_period_1_76 + 1)
0537 C0E2      1611            push    (_main_period_1_76 + 2)
0539 C0E3      1612            push    (_main_period_1_76 + 3)
053B 900000    1613            mov     dptr,#0x0000
053E 75F080    1614            mov     b,#0x80
0541 743F      1615            mov     a,#0x3F
0543 120000    1616            lcall   ___fsdiv
0546 858280    1617            mov     _main_frequency_1_76,dpl
0549 858381    1618            mov     (_main_frequency_1_76 + 1),dph
054C 85F082    1619            mov     (_main_frequency_1_76 + 2),b
054F F583      1620            mov     (_main_frequency_1_76 + 3),a
0551 E581      1621            mov     a,sp
0553 24FC      1622            add     a,#0xfc
0555 F581      1623            mov     sp,a
0557           1624   ;        sourcecode.c:373: angfrequency = frequency * 2 * 3.1415926535; 
0557 C080      1625            push    _main_frequency_1_76
0559 C081      1626            push    (_main_frequency_1_76 + 1)
055B C082      1627            push    (_main_frequency_1_76 + 2)
055D C083      1628            push    (_main_frequency_1_76 + 3)
055F 900FDB    1629            mov     dptr,#0x0FDB
0562 75F0C9    1630            mov     b,#0xC9
0565 7440      1631            mov     a,#0x40
0567 120000    1632            lcall   ___fsmul
056A 8582D0    1633            mov     _main_angfrequency_1_76,dpl
056D 8583D1    1634            mov     (_main_angfrequency_1_76 + 1),dph
0570 85F0D2    1635            mov     (_main_angfrequency_1_76 + 2),b
0573 F5D3      1636            mov     (_main_angfrequency_1_76 + 3),a
0575 E581      1637            mov     a,sp
0577 24FC      1638            add     a,#0xfc
0579 F581      1639            mov     sp,a
057B           1640   ;        sourcecode.c:375: while(Volts_at_Pin(QFP32_MUX_P2_2) > 0);
057B           1641   L017017?:
057B 75820F    1642            mov     dpl,#0x0F
057E 120000    1643            lcall   _Volts_at_Pin
0581 AE82      1644            mov     r6,dpl
0583 AF83      1645            mov     r7,dph
0585 A8F0      1646            mov     r0,b
0587 F9        1647            mov     r1,a
0588 E4        1648            clr     a
0589 C0E0      1649            push    acc
058B C0E0      1650            push    acc
058D C0E0      1651            push    acc
058F C0E0      1652            push    acc
0591 8E82      1653            mov     dpl,r6
0593 8F83      1654            mov     dph,r7
0595 88F0      1655            mov     b,r0
0597 E9        1656            mov     a,r1
0598 120000    1657            lcall   ___fsgt
059B AE82      1658            mov     r6,dpl
059D E581      1659            mov     a,sp
059F 24FC      1660            add     a,#0xfc
05A1 F581      1661            mov     sp,a
05A3 EE        1662            mov     a,r6
05A4 7000      1663            jnz     L017017?
05A6           1664   ;        sourcecode.c:376: while(Volts_at_Pin(QFP32_MUX_P2_2) == 0);
05A6           1665   L017020?:
05A6 75820F    1666            mov     dpl,#0x0F
05A9 120000    1667            lcall   _Volts_at_Pin
05AC AE82      1668            mov     r6,dpl
05AE AF83      1669            mov     r7,dph
05B0 A8F0      1670            mov     r0,b
05B2 F9        1671            mov     r1,a
05B3 EE        1672            mov     a,r6
05B4 4F        1673            orl     a,r7
05B5 48        1674            orl     a,r0
05B6 89F0      1675            mov     b,r1
05B8 C2F7      1676            clr     b.7 ; Clear the sign bit
05BA 45F0      1677            orl     a,b
05BC 6000      1678            jz      L017020?
05BE           1679   ;        sourcecode.c:377: waitms(period*1000/4);
05BE C0E0      1680            push    _main_period_1_76
05C0 C0E1      1681            push    (_main_period_1_76 + 1)
05C2 C0E2      1682            push    (_main_period_1_76 + 2)
05C4 C0E3      1683            push    (_main_period_1_76 + 3)
05C6 900000    1684            mov     dptr,#0x0000
05C9 75F07A    1685            mov     b,#0x7A
05CC 7444      1686            mov     a,#0x44
05CE 120000    1687            lcall   ___fsmul
05D1 AE82      1688            mov     r6,dpl
05D3 AF83      1689            mov     r7,dph
05D5 A8F0      1690            mov     r0,b
05D7 F9        1691            mov     r1,a
05D8 E581      1692            mov     a,sp
05DA 24FC      1693            add     a,#0xfc
05DC F581      1694            mov     sp,a
05DE C006      1695            push    ar6
05E0 C007      1696            push    ar7
05E2 C000      1697            push    ar0
05E4 C001      1698            push    ar1
05E6 E4        1699            clr     a
05E7 C0E0      1700            push    acc
05E9 C0E0      1701            push    acc
05EB 7480      1702            mov     a,#0x80
05ED C0E0      1703            push    acc
05EF 7440      1704            mov     a,#0x40
05F1 C0E0      1705            push    acc
05F3 8E82      1706            mov     dpl,r6
05F5 8F83      1707            mov     dph,r7
05F7 88F0      1708            mov     b,r0
05F9 E9        1709            mov     a,r1
05FA 120000    1710            lcall   ___fsdiv
05FD AA82      1711            mov     r2,dpl
05FF AB83      1712            mov     r3,dph
0601 ACF0      1713            mov     r4,b
0603 FD        1714            mov     r5,a
0604 E581      1715            mov     a,sp
0606 24FC      1716            add     a,#0xfc
0608 F581      1717            mov     sp,a
060A 8A82      1718            mov     dpl,r2
060C 8B83      1719            mov     dph,r3
060E 8CF0      1720            mov     b,r4
0610 ED        1721            mov     a,r5
0611 120000    1722            lcall   ___fs2uint
0614 858240    1723            mov     _main_sloc0_1_0,dpl
0617 858341    1724            mov  (_main_sloc0_1_0 + 1),dph
061A 120000    1725            lcall   _waitms
061D           1726   ;        sourcecode.c:378: v1_rms = Volts_at_Pin(QFP32_MUX_P2_2) / 1.41321356237;
061D 75820F    1727            mov     dpl,#0x0F
0620 120000    1728            lcall   _Volts_at_Pin
0623 AC82      1729            mov     r4,dpl
0625 AD83      1730            mov     r5,dph
0627 AAF0      1731            mov     r2,b
0629 FB        1732            mov     r3,a
062A 742F      1733            mov     a,#0x2F
062C C0E0      1734            push    acc
062E 74E4      1735            mov     a,#0xE4
0630 C0E0      1736            push    acc
0632 74B4      1737            mov     a,#0xB4
0634 C0E0      1738            push    acc
0636 743F      1739            mov     a,#0x3F
0638 C0E0      1740            push    acc
063A 8C82      1741            mov     dpl,r4
063C 8D83      1742            mov     dph,r5
063E 8AF0      1743            mov     b,r2
0640 EB        1744            mov     a,r3
0641 120000    1745            lcall   ___fsdiv
0644 858218    1746            mov     _v1_rms,dpl
0647 858319    1747            mov     (_v1_rms + 1),dph
064A 85F01A    1748            mov     (_v1_rms + 2),b
064D F51B      1749            mov     (_v1_rms + 3),a
064F E581      1750            mov     a,sp
0651 24FC      1751            add     a,#0xfc
0653 F581      1752            mov     sp,a
0655 D001      1753            pop     ar1
0657 D000      1754            pop     ar0
0659 D007      1755            pop     ar7
065B D006      1756            pop     ar6
065D           1757   ;        sourcecode.c:380: while(Volts_at_Pin(QFP32_MUX_P2_1) > 0); //wait for zero cross of other signal
065D           1758   L017023?:
065D 75820E    1759            mov     dpl,#0x0E
0660 C006      1760            push    ar6
0662 C007      1761            push    ar7
0664 C000      1762            push    ar0
0666 C001      1763            push    ar1
0668 120000    1764            lcall   _Volts_at_Pin
066B AA82      1765            mov     r2,dpl
066D AB83      1766            mov     r3,dph
066F ACF0      1767            mov     r4,b
0671 FD        1768            mov     r5,a
0672 E4        1769            clr     a
0673 C0E0      1770            push    acc
0675 C0E0      1771            push    acc
0677 C0E0      1772            push    acc
0679 C0E0      1773            push    acc
067B 8A82      1774            mov     dpl,r2
067D 8B83      1775            mov     dph,r3
067F 8CF0      1776            mov     b,r4
0681 ED        1777            mov     a,r5
0682 120000    1778            lcall   ___fsgt
0685 AA82      1779            mov     r2,dpl
0687 E581      1780            mov     a,sp
0689 24FC      1781            add     a,#0xfc
068B F581      1782            mov     sp,a
068D D001      1783            pop     ar1
068F D000      1784            pop     ar0
0691 D007      1785            pop     ar7
0693 D006      1786            pop     ar6
0695 EA        1787            mov     a,r2
0696 7000      1788            jnz     L017023?
0698           1789   ;        sourcecode.c:381: while(Volts_at_Pin(QFP32_MUX_P2_1) == 0);
0698           1790   L017026?:
0698 75820E    1791            mov     dpl,#0x0E
069B C006      1792            push    ar6
069D C007      1793            push    ar7
069F C000      1794            push    ar0
06A1 C001      1795            push    ar1
06A3 120000    1796            lcall   _Volts_at_Pin
06A6 AA82      1797            mov     r2,dpl
06A8 AB83      1798            mov     r3,dph
06AA ACF0      1799            mov     r4,b
06AC FD        1800            mov     r5,a
06AD D001      1801            pop     ar1
06AF D000      1802            pop     ar0
06B1 D007      1803            pop     ar7
06B3 D006      1804            pop     ar6
06B5 EA        1805            mov     a,r2
06B6 4B        1806            orl     a,r3
06B7 4C        1807            orl     a,r4
06B8 8DF0      1808            mov     b,r5
06BA C2F7      1809            clr     b.7 ; Clear the sign bit
06BC 45F0      1810            orl     a,b
06BE 6000      1811            jz      L017026?
06C0           1812   ;        sourcecode.c:382: waitms(period*1000/4);
06C0 854082    1813            mov     dpl,_main_sloc0_1_0
06C3 854183    1814            mov     dph,(_main_sloc0_1_0 + 1)
06C6 C006      1815            push    ar6
06C8 C007      1816            push    ar7
06CA C000      1817            push    ar0
06CC C001      1818            push    ar1
06CE 120000    1819            lcall   _waitms
06D1           1820   ;        sourcecode.c:383: v2_rms = Volts_at_Pin(QFP32_MUX_P2_1) / 1.41321356237;
06D1 75820E    1821            mov     dpl,#0x0E
06D4 120000    1822            lcall   _Volts_at_Pin
06D7 AA82      1823            mov     r2,dpl
06D9 AB83      1824            mov     r3,dph
06DB ACF0      1825            mov     r4,b
06DD FD        1826            mov     r5,a
06DE 742F      1827            mov     a,#0x2F
06E0 C0E0      1828            push    acc
06E2 74E4      1829            mov     a,#0xE4
06E4 C0E0      1830            push    acc
06E6 74B4      1831            mov     a,#0xB4
06E8 C0E0      1832            push    acc
06EA 743F      1833            mov     a,#0x3F
06EC C0E0      1834            push    acc
06EE 8A82      1835            mov     dpl,r2
06F0 8B83      1836            mov     dph,r3
06F2 8CF0      1837            mov     b,r4
06F4 ED        1838            mov     a,r5
06F5 120000    1839            lcall   ___fsdiv
06F8 8582D8    1840            mov     _v2_rms,dpl
06FB 8583D9    1841            mov     (_v2_rms + 1),dph
06FE 85F0DA    1842            mov     (_v2_rms + 2),b
0701 F5DB      1843            mov     (_v2_rms + 3),a
0703 E581      1844            mov     a,sp
0705 24FC      1845            add     a,#0xfc
0707 F581      1846            mov     sp,a
0709 D001      1847            pop     ar1
070B D000      1848            pop     ar0
070D D007      1849            pop     ar7
070F D006      1850            pop     ar6
0711           1851   ;        sourcecode.c:387: TR0=0; // Stop timer 0
0711 C28C      1852            clr     _TR0
0713           1853   ;        sourcecode.c:388: overflow_count = 0;
0713 75E800    1854            mov     _overflow_count,#0x00
0716           1855   ;        sourcecode.c:389: TH0=0; TL0=0; TF0 = 0;                // Reset the timer
0716 758C00    1856            mov     _TH0,#0x00
0719 758A00    1857            mov     _TL0,#0x00
071C C28D      1858            clr     _TF0
071E           1859   ;        sourcecode.c:391: while (Volts_at_Pin(QFP32_MUX_P2_2) != 0);    
071E           1860   L017029?:
071E 75820F    1861            mov     dpl,#0x0F
0721 C006      1862            push    ar6
0723 C007      1863            push    ar7
0725 C000      1864            push    ar0
0727 C001      1865            push    ar1
0729 120000    1866            lcall   _Volts_at_Pin
072C AA82      1867            mov     r2,dpl
072E AB83      1868            mov     r3,dph
0730 ACF0      1869            mov     r4,b
0732 FD        1870            mov     r5,a
0733 D001      1871            pop     ar1
0735 D000      1872            pop     ar0
0737 D007      1873            pop     ar7
0739 D006      1874            pop     ar6
073B EA        1875            mov     a,r2
073C 4B        1876            orl     a,r3
073D 4C        1877            orl     a,r4
073E 8DF0      1878            mov     b,r5
0740 C2F7      1879            clr     b.7 ; Clear the sign bit
0742 45F0      1880            orl     a,b
0744 7000      1881            jnz     L017029?
0746           1882   ;        sourcecode.c:392: while (Volts_at_Pin(QFP32_MUX_P2_2) == 0);                    // Wait for reference signal to be zero
0746           1883   L017032?:
0746 75820F    1884            mov     dpl,#0x0F
0749 C006      1885            push    ar6
074B C007      1886            push    ar7
074D C000      1887            push    ar0
074F C001      1888            push    ar1
0751 120000    1889            lcall   _Volts_at_Pin
0754 AA82      1890            mov     r2,dpl
0756 AB83      1891            mov     r3,dph
0758 ACF0      1892            mov     r4,b
075A FD        1893            mov     r5,a
075B D001      1894            pop     ar1
075D D000      1895            pop     ar0
075F D007      1896            pop     ar7
0761 D006      1897            pop     ar6
0763 EA        1898            mov     a,r2
0764 4B        1899            orl     a,r3
0765 4C        1900            orl     a,r4
0766 8DF0      1901            mov     b,r5
0768 C2F7      1902            clr     b.7 ; Clear the sign bit
076A 45F0      1903            orl     a,b
076C 6000      1904            jz      L017032?
076E           1905   ;        sourcecode.c:393: TR0=1; // start timer
076E D28C      1906            setb    _TR0
0770           1907   ;        sourcecode.c:394: while (Volts_at_Pin(QFP32_MUX_P2_1) != 0) {
0770           1908   L017037?:
0770 75820E    1909            mov     dpl,#0x0E
0773 C006      1910            push    ar6
0775 C007      1911            push    ar7
0777 C000      1912            push    ar0
0779 C001      1913            push    ar1
077B 120000    1914            lcall   _Volts_at_Pin
077E AA82      1915            mov     r2,dpl
0780 AB83      1916            mov     r3,dph
0782 ACF0      1917            mov     r4,b
0784 FD        1918            mov     r5,a
0785 D001      1919            pop     ar1
0787 D000      1920            pop     ar0
0789 D007      1921            pop     ar7
078B D006      1922            pop     ar6
078D EA        1923            mov     a,r2
078E 4B        1924            orl     a,r3
078F 4C        1925            orl     a,r4
0790 8DF0      1926            mov     b,r5
0792 C2F7      1927            clr     b.7 ; Clear the sign bit
0794 45F0      1928            orl     a,b
0796 6000      1929            jz      L017042?
0798           1930   ;        sourcecode.c:395: if (TF0 == 1) { // Did the 16-bit timer overflow?
0798           1931   ;        sourcecode.c:396: TF0 = 0;
0798 108DC0    1932            jbc     _TF0,L017110?
079B 8000      1933            sjmp    L017037?
079D           1934   L017110?:
079D           1935   ;        sourcecode.c:397: overflow_count++;
079D 05E8      1936            inc     _overflow_count
079F           1937   ;        sourcecode.c:400: while (Volts_at_Pin(QFP32_MUX_P2_1) == 0) { // Wait for test signal to hit zero
079F 8000      1938            sjmp    L017037?
07A1           1939   L017042?:
07A1 75820E    1940            mov     dpl,#0x0E
07A4 C006      1941            push    ar6
07A6 C007      1942            push    ar7
07A8 C000      1943            push    ar0
07AA C001      1944            push    ar1
07AC 120000    1945            lcall   _Volts_at_Pin
07AF AA82      1946            mov     r2,dpl
07B1 AB83      1947            mov     r3,dph
07B3 ACF0      1948            mov     r4,b
07B5 FD        1949            mov     r5,a
07B6 D001      1950            pop     ar1
07B8 D000      1951            pop     ar0
07BA D007      1952            pop     ar7
07BC D006      1953            pop     ar6
07BE EA        1954            mov     a,r2
07BF 4B        1955            orl     a,r3
07C0 4C        1956            orl     a,r4
07C1 8DF0      1957            mov     b,r5
07C3 C2F7      1958            clr     b.7 ; Clear the sign bit
07C5 45F0      1959            orl     a,b
07C7 7000      1960            jnz     L017044?
07C9           1961   ;        sourcecode.c:401: if (TF0 == 1) { // Did the 16-bit timer overflow?
07C9           1962   ;        sourcecode.c:402: TF0 = 0;
07C9 108D40    1963            jbc     _TF0,L017112?
07CC 8000      1964            sjmp    L017042?
07CE           1965   L017112?:
07CE           1966   ;        sourcecode.c:403: overflow_count++;
07CE 05E8      1967            inc     _overflow_count
07D0 8000      1968            sjmp    L017042?
07D2           1969   L017044?:
07D2           1970   ;        sourcecode.c:406: TR0=0; // stop timer
07D2 C28C      1971            clr     _TR0
07D4           1972   ;        sourcecode.c:410: time_difference = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
07D4 85E882    1973            mov     dpl,_overflow_count
07D7 C006      1974            push    ar6
07D9 C007      1975            push    ar7
07DB C000      1976            push    ar0
07DD C001      1977            push    ar1
07DF 120000    1978            lcall   ___uchar2fs
07E2 AA82      1979            mov     r2,dpl
07E4 AB83      1980            mov     r3,dph
07E6 ACF0      1981            mov     r4,b
07E8 FD        1982            mov     r5,a
07E9 C002      1983            push    ar2
07EB C003      1984            push    ar3
07ED C004      1985            push    ar4
07EF C005      1986            push    ar5
07F1 900000    1987            mov     dptr,#0x0000
07F4 75F080    1988            mov     b,#0x80
07F7 7447      1989            mov     a,#0x47
07F9 120000    1990            lcall   ___fsmul
07FC 858280    1991            mov     _main_sloc1_1_0,dpl
07FF 858381    1992            mov     (_main_sloc1_1_0 + 1),dph
0802 85F082    1993            mov     (_main_sloc1_1_0 + 2),b
0805 F583      1994            mov     (_main_sloc1_1_0 + 3),a
0807 E581      1995            mov     a,sp
0809 24FC      1996            add     a,#0xfc
080B F581      1997            mov     sp,a
080D 858C82    1998            mov     dpl,_TH0
0810 120000    1999            lcall   ___uchar2fs
0813 AA82      2000            mov     r2,dpl
0815 AB83      2001            mov     r3,dph
0817 ACF0      2002            mov     r4,b
0819 FD        2003            mov     r5,a
081A C002      2004            push    ar2
081C C003      2005            push    ar3
081E C004      2006            push    ar4
0820 C005      2007            push    ar5
0822 900000    2008            mov     dptr,#0x0000
0825 75F080    2009            mov     b,#0x80
0828 7443      2010            mov     a,#0x43
082A 120000    2011            lcall   ___fsmul
082D AA82      2012            mov     r2,dpl
082F AB83      2013            mov     r3,dph
0831 ACF0      2014            mov     r4,b
0833 FD        2015            mov     r5,a
0834 E581      2016            mov     a,sp
0836 24FC      2017            add     a,#0xfc
0838 F581      2018            mov     sp,a
083A C002      2019            push    ar2
083C C003      2020            push    ar3
083E C004      2021            push    ar4
0840 C005      2022            push    ar5
0842 858082    2023            mov     dpl,_main_sloc1_1_0
0845 858183    2024            mov     dph,(_main_sloc1_1_0 + 1)
0848 8582F0    2025            mov     b,(_main_sloc1_1_0 + 2)
084B E583      2026            mov     a,(_main_sloc1_1_0 + 3)
084D 120000    2027            lcall   ___fsadd
0850 858280    2028            mov     _main_sloc1_1_0,dpl
0853 858381    2029            mov     (_main_sloc1_1_0 + 1),dph
0856 85F082    2030            mov     (_main_sloc1_1_0 + 2),b
0859 F583      2031            mov     (_main_sloc1_1_0 + 3),a
085B E581      2032            mov     a,sp
085D 24FC      2033            add     a,#0xfc
085F F581      2034            mov     sp,a
0861 AA8A      2035            mov     r2,_TL0
0863 7B00      2036            mov     r3,#0x00
0865 8A82      2037            mov     dpl,r2
0867 8B83      2038            mov     dph,r3
0869 120000    2039            lcall   ___sint2fs
086C AA82      2040            mov     r2,dpl
086E AB83      2041            mov     r3,dph
0870 ACF0      2042            mov     r4,b
0872 FD        2043            mov     r5,a
0873 C002      2044            push    ar2
0875 C003      2045            push    ar3
0877 C004      2046            push    ar4
0879 C005      2047            push    ar5
087B 858082    2048            mov     dpl,_main_sloc1_1_0
087E 858183    2049            mov     dph,(_main_sloc1_1_0 + 1)
0881 8582F0    2050            mov     b,(_main_sloc1_1_0 + 2)
0884 E583      2051            mov     a,(_main_sloc1_1_0 + 3)
0886 120000    2052            lcall   ___fsadd
0889 AA82      2053            mov     r2,dpl
088B AB83      2054            mov     r3,dph
088D ACF0      2055            mov     r4,b
088F FD        2056            mov     r5,a
0890 E581      2057            mov     a,sp
0892 24FC      2058            add     a,#0xfc
0894 F581      2059            mov     sp,a
0896 C002      2060            push    ar2
0898 C003      2061            push    ar3
089A C004      2062            push    ar4
089C C005      2063            push    ar5
089E 90F4FC    2064            mov     dptr,#0xF4FC
08A1 75F032    2065            mov     b,#0x32
08A4 7434      2066            mov     a,#0x34
08A6 120000    2067            lcall   ___fsmul
08A9 AA82      2068            mov     r2,dpl
08AB AB83      2069            mov     r3,dph
08AD ACF0      2070            mov     r4,b
08AF FD        2071            mov     r5,a
08B0 E581      2072            mov     a,sp
08B2 24FC      2073            add     a,#0xfc
08B4 F581      2074            mov     sp,a
08B6           2075   ;        sourcecode.c:411: Phase_Shift = (time_difference * 360.0) / period;   // we now have the phase shift   
08B6 C002      2076            push    ar2
08B8 C003      2077            push    ar3
08BA C004      2078            push    ar4
08BC C005      2079            push    ar5
08BE 900000    2080            mov     dptr,#0x0000
08C1 75F0B4    2081            mov     b,#0xB4
08C4 7443      2082            mov     a,#0x43
08C6 120000    2083            lcall   ___fsmul
08C9 AA82      2084            mov     r2,dpl
08CB AB83      2085            mov     r3,dph
08CD ACF0      2086            mov     r4,b
08CF FD        2087            mov     r5,a
08D0 E581      2088            mov     a,sp
08D2 24FC      2089            add     a,#0xfc
08D4 F581      2090            mov     sp,a
08D6 C0E0      2091            push    _main_period_1_76
08D8 C0E1      2092            push    (_main_period_1_76 + 1)
08DA C0E2      2093            push    (_main_period_1_76 + 2)
08DC C0E3      2094            push    (_main_period_1_76 + 3)
08DE 8A82      2095            mov     dpl,r2
08E0 8B83      2096            mov     dph,r3
08E2 8CF0      2097            mov     b,r4
08E4 ED        2098            mov     a,r5
08E5 120000    2099            lcall   ___fsdiv
08E8 858230    2100            mov     _main_Phase_Shift_1_76,dpl
08EB 858331    2101            mov     (_main_Phase_Shift_1_76 + 1),dph
08EE 85F032    2102            mov     (_main_Phase_Shift_1_76 + 2),b
08F1 F533      2103            mov     (_main_Phase_Shift_1_76 + 3),a
08F3 E581      2104            mov     a,sp
08F5 24FC      2105            add     a,#0xfc
08F7 F581      2106            mov     sp,a
08F9 D001      2107            pop     ar1
08FB D000      2108            pop     ar0
08FD D007      2109            pop     ar7
08FF D006      2110            pop     ar6
0901           2111   ;        sourcecode.c:413: printf("T=%fms, Phase: %f, v1_Rms:%f, v2_Rms:%f\r", 
0901 C006      2112            push    ar6
0903 C007      2113            push    ar7
0905 C000      2114            push    ar0
0907 C001      2115            push    ar1
0909 C0D8      2116            push    _v2_rms
090B C0D9      2117            push    (_v2_rms + 1)
090D C0DA      2118            push    (_v2_rms + 2)
090F C0DB      2119            push    (_v2_rms + 3)
0911 C018      2120            push    _v1_rms
0913 C019      2121            push    (_v1_rms + 1)
0915 C01A      2122            push    (_v1_rms + 2)
0917 C01B      2123            push    (_v1_rms + 3)
0919 C030      2124            push    _main_Phase_Shift_1_76
091B C031      2125            push    (_main_Phase_Shift_1_76 + 1)
091D C032      2126            push    (_main_Phase_Shift_1_76 + 2)
091F C033      2127            push    (_main_Phase_Shift_1_76 + 3)
0921 C006      2128            push    ar6
0923 C007      2129            push    ar7
0925 C000      2130            push    ar0
0927 C001      2131            push    ar1
0929 7480      2132            mov     a,#__str_7
092B C0E0      2133            push    acc
092D 74E2      2134            mov     a,#(__str_7 >> 8)
092F C0E0      2135            push    acc
0931 7480      2136            mov     a,#0x80
0933 C0E0      2137            push    acc
0935 120000    2138            lcall   _printf
0938 E581      2139            mov     a,sp
093A 24ED      2140            add     a,#0xed
093C F581      2141            mov     sp,a
093E           2142   ;        sourcecode.c:416: if (Phase_Shift > 180) {
093E E4        2143            clr     a
093F C0E0      2144            push    acc
0941 C0E0      2145            push    acc
0943 7434      2146            mov     a,#0x34
0945 C0E0      2147            push    acc
0947 7443      2148            mov     a,#0x43
0949 C0E0      2149            push    acc
094B 853082    2150            mov     dpl,_main_Phase_Shift_1_76
094E 853183    2151            mov     dph,(_main_Phase_Shift_1_76 + 1)
0951 8532F0    2152            mov     b,(_main_Phase_Shift_1_76 + 2)
0954 E533      2153            mov     a,(_main_Phase_Shift_1_76 + 3)
0956 120000    2154            lcall   ___fsgt
0959 AA82      2155            mov     r2,dpl
095B E581      2156            mov     a,sp
095D 24FC      2157            add     a,#0xfc
095F F581      2158            mov     sp,a
0961 D001      2159            pop     ar1
0963 D000      2160            pop     ar0
0965 D007      2161            pop     ar7
0967 D006      2162            pop     ar6
0969 EA        2163            mov     a,r2
096A 6000      2164            jz      L017046?
096C           2165   ;        sourcecode.c:417: Phase_Shift = 360 - Phase_Shift;
096C C006      2166            push    ar6
096E C007      2167            push    ar7
0970 C000      2168            push    ar0
0972 C001      2169            push    ar1
0974 C030      2170            push    _main_Phase_Shift_1_76
0976 C031      2171            push    (_main_Phase_Shift_1_76 + 1)
0978 C032      2172            push    (_main_Phase_Shift_1_76 + 2)
097A C033      2173            push    (_main_Phase_Shift_1_76 + 3)
097C 900000    2174            mov     dptr,#0x0000
097F 75F0B4    2175            mov     b,#0xB4
0982 7443      2176            mov     a,#0x43
0984 120000    2177            lcall   ___fssub
0987 858230    2178            mov     _main_Phase_Shift_1_76,dpl
098A 858331    2179            mov     (_main_Phase_Shift_1_76 + 1),dph
098D 85F032    2180            mov     (_main_Phase_Shift_1_76 + 2),b
0990 F533      2181            mov     (_main_Phase_Shift_1_76 + 3),a
0992 E581      2182            mov     a,sp
0994 24FC      2183            add     a,#0xfc
0996 F581      2184            mov     sp,a
0998           2185   ;        sourcecode.c:418: LCDprint2("-", 1, 11);
0998 75C801    2186            mov     _LCDprint2_PARM_2,#0x01
099B 75780B    2187            mov     _LCDprint2_PARM_3,#0x0B
099E 90E340    2188            mov     dptr,#__str_8
09A1 75F080    2189            mov     b,#0x80
09A4 120000    2190            lcall   _LCDprint2
09A7 D001      2191            pop     ar1
09A9 D000      2192            pop     ar0
09AB D007      2193            pop     ar7
09AD D006      2194            pop     ar6
09AF 8000      2195            sjmp    L017047?
09B1           2196   L017046?:
09B1           2197   ;        sourcecode.c:421: LCDprint2(" ", 1, 11);
09B1 75C801    2198            mov     _LCDprint2_PARM_2,#0x01
09B4 75780B    2199            mov     _LCDprint2_PARM_3,#0x0B
09B7 90E3C0    2200            mov     dptr,#__str_9
09BA 75F080    2201            mov     b,#0x80
09BD C006      2202            push    ar6
09BF C007      2203            push    ar7
09C1 C000      2204            push    ar0
09C3 C001      2205            push    ar1
09C5 120000    2206            lcall   _LCDprint2
09C8 D001      2207            pop     ar1
09CA D000      2208            pop     ar0
09CC D007      2209            pop     ar7
09CE D006      2210            pop     ar6
09D0           2211   L017047?:
09D0           2212   ;        sourcecode.c:426: if (SWAP_BUTTON == 0) {  // Check if the BOOT button between P3.7 and ground is pressed
09D0 20A500    2213            jb      _P2_5,L017054?
09D3           2214   ;        sourcecode.c:427: waitms(50); // De-bounce
09D3 900032    2215            mov     dptr,#0x0032
09D6 C006      2216            push    ar6
09D8 C007      2217            push    ar7
09DA C000      2218            push    ar0
09DC C001      2219            push    ar1
09DE 120000    2220            lcall   _waitms
09E1 D001      2221            pop     ar1
09E3 D000      2222            pop     ar0
09E5 D007      2223            pop     ar7
09E7 D006      2224            pop     ar6
09E9           2225   ;        sourcecode.c:428: if (SWAP_BUTTON == 0) {
09E9 20A500    2226            jb      _P2_5,L017054?
09EC           2227   ;        sourcecode.c:429: while(SWAP_BUTTON == 0); // Wait for push-button release
09EC           2228   L017048?:
09EC 30A540    2229            jnb     _P2_5,L017048?
09EF           2230   ;        sourcecode.c:430: bonus_counter++;
09EF 0520      2231            inc     _main_bonus_counter_1_76
09F1 E4        2232            clr     a
09F2 B52080    2233            cjne    a,_main_bonus_counter_1_76,L017117?
09F5 0521      2234            inc     (_main_bonus_counter_1_76 + 1)
09F7           2235   L017117?:
09F7           2236   L017054?:
09F7           2237   ;        sourcecode.c:434: if (bonus_counter == 1) {
09F7 7401      2238            mov     a,#0x01
09F9 B520C0    2239            cjne    a,_main_bonus_counter_1_76,L017118?
09FC E4        2240            clr     a
09FD B521C0    2241            cjne    a,(_main_bonus_counter_1_76 + 1),L017118?
0A00 8000      2242            sjmp    L017119?
0A02           2243   L017118?:
0A02 8000      2244            sjmp    L017059?
0A04           2245   L017119?:
0A04           2246   ;        sourcecode.c:435: sprintf(str_period, "%3.1f", period*1000);
0A04 C006      2247            push    ar6
0A06 C007      2248            push    ar7
0A08 C000      2249            push    ar0
0A0A C001      2250            push    ar1
0A0C 7480      2251            mov     a,#__str_10
0A0E C0E0      2252            push    acc
0A10 74E5      2253            mov     a,#(__str_10 >> 8)
0A12 C0E0      2254            push    acc
0A14 7480      2255            mov     a,#0x80
0A16 C0E0      2256            push    acc
0A18 74B0      2257            mov     a,#_main_str_period_1_76
0A1A C0E0      2258            push    acc
0A1C 74CF      2259            mov     a,#(_main_str_period_1_76 >> 8)
0A1E C0E0      2260            push    acc
0A20 7440      2261            mov     a,#0x40
0A22 C0E0      2262            push    acc
0A24 120000    2263            lcall   _sprintf
0A27 E581      2264            mov     a,sp
0A29 24F6      2265            add     a,#0xf6
0A2B F581      2266            mov     sp,a
0A2D           2267   ;        sourcecode.c:436: LCDprint2(str_period, 1, 2); //string, row, column
0A2D 75C801    2268            mov     _LCDprint2_PARM_2,#0x01
0A30 757802    2269            mov     _LCDprint2_PARM_3,#0x02
0A33 90CFB0    2270            mov     dptr,#_main_str_period_1_76
0A36 75F040    2271            mov     b,#0x40
0A39 120000    2272            lcall   _LCDprint2
0A3C           2273   ;        sourcecode.c:437: LCDprint2("T:", 1, 0);
0A3C 75C801    2274            mov     _LCDprint2_PARM_2,#0x01
0A3F 757800    2275            mov     _LCDprint2_PARM_3,#0x00
0A42 90E600    2276            mov     dptr,#__str_11
0A45 75F080    2277            mov     b,#0x80
0A48 120000    2278            lcall   _LCDprint2
0A4B           2279   ;        sourcecode.c:438: LCDprint2("ms", 1, 7);
0A4B 75C801    2280            mov     _LCDprint2_PARM_2,#0x01
0A4E 757807    2281            mov     _LCDprint2_PARM_3,#0x07
0A51 90E640    2282            mov     dptr,#__str_12
0A54 75F080    2283            mov     b,#0x80
0A57 120000    2284            lcall   _LCDprint2
0A5A 020000    2285            ljmp    L017060?
0A5D           2286   L017059?:
0A5D           2287   ;        sourcecode.c:440: else if (bonus_counter == 2) {
0A5D 7402      2288            mov     a,#0x02
0A5F B520C0    2289            cjne    a,_main_bonus_counter_1_76,L017120?
0A62 E4        2290            clr     a
0A63 B521C0    2291            cjne    a,(_main_bonus_counter_1_76 + 1),L017120?
0A66 8000      2292            sjmp    L017121?
0A68           2293   L017120?:
0A68 8000      2294            sjmp    L017056?
0A6A           2295   L017121?:
0A6A           2296   ;        sourcecode.c:441: sprintf(str_angfrequency, "%3.0f", angfrequency);
0A6A C0D0      2297            push    _main_angfrequency_1_76
0A6C C0D1      2298            push    (_main_angfrequency_1_76 + 1)
0A6E C0D2      2299            push    (_main_angfrequency_1_76 + 2)
0A70 C0D3      2300            push    (_main_angfrequency_1_76 + 3)
0A72 7480      2301            mov     a,#__str_13
0A74 C0E0      2302            push    acc
0A76 74E7      2303            mov     a,#(__str_13 >> 8)
0A78 C0E0      2304            push    acc
0A7A 7480      2305            mov     a,#0x80
0A7C C0E0      2306            push    acc
0A7E 7400      2307            mov     a,#_main_str_angfrequency_1_76
0A80 C0E0      2308            push    acc
0A82 74D0      2309            mov     a,#(_main_str_angfrequency_1_76 >> 8)
0A84 C0E0      2310            push    acc
0A86 7440      2311            mov     a,#0x40
0A88 C0E0      2312            push    acc
0A8A 120000    2313            lcall   _sprintf
0A8D E581      2314            mov     a,sp
0A8F 24F6      2315            add     a,#0xf6
0A91 F581      2316            mov     sp,a
0A93           2317   ;        sourcecode.c:442: LCDprint2(str_angfrequency, 1, 2); //string, row, column
0A93 75C801    2318            mov     _LCDprint2_PARM_2,#0x01
0A96 757802    2319            mov     _LCDprint2_PARM_3,#0x02
0A99 90D000    2320            mov     dptr,#_main_str_angfrequency_1_76
0A9C 75F040    2321            mov     b,#0x40
0A9F 120000    2322            lcall   _LCDprint2
0AA2           2323   ;        sourcecode.c:443: LCDprint2("w:", 1, 0);
0AA2 75C801    2324            mov     _LCDprint2_PARM_2,#0x01
0AA5 757800    2325            mov     _LCDprint2_PARM_3,#0x00
0AA8 90E7C0    2326            mov     dptr,#__str_14
0AAB 75F080    2327            mov     b,#0x80
0AAE 120000    2328            lcall   _LCDprint2
0AB1           2329   ;        sourcecode.c:444: LCDprint2("rad ", 1, 5);
0AB1 75C801    2330            mov     _LCDprint2_PARM_2,#0x01
0AB4 757805    2331            mov     _LCDprint2_PARM_3,#0x05
0AB7 90E800    2332            mov     dptr,#__str_15
0ABA 75F080    2333            mov     b,#0x80
0ABD 120000    2334            lcall   _LCDprint2
0AC0 8000      2335            sjmp    L017060?
0AC2           2336   L017056?:
0AC2           2337   ;        sourcecode.c:447: bonus_counter = 0;
0AC2 E4        2338            clr     a
0AC3 F520      2339            mov     _main_bonus_counter_1_76,a
0AC5 F521      2340            mov     (_main_bonus_counter_1_76 + 1),a
0AC7           2341   ;        sourcecode.c:448: sprintf(str_frequency, "%2.0f", frequency);
0AC7 C080      2342            push    _main_frequency_1_76
0AC9 C081      2343            push    (_main_frequency_1_76 + 1)
0ACB C082      2344            push    (_main_frequency_1_76 + 2)
0ACD C083      2345            push    (_main_frequency_1_76 + 3)
0ACF 7440      2346            mov     a,#__str_16
0AD1 C0E0      2347            push    acc
0AD3 74E8      2348            mov     a,#(__str_16 >> 8)
0AD5 C0E0      2349            push    acc
0AD7 7480      2350            mov     a,#0x80
0AD9 C0E0      2351            push    acc
0ADB 7470      2352            mov     a,#_main_str_frequency_1_76
0ADD C0E0      2353            push    acc
0ADF 74CE      2354            mov     a,#(_main_str_frequency_1_76 >> 8)
0AE1 C0E0      2355            push    acc
0AE3 7440      2356            mov     a,#0x40
0AE5 C0E0      2357            push    acc
0AE7 120000    2358            lcall   _sprintf
0AEA E581      2359            mov     a,sp
0AEC 24F6      2360            add     a,#0xf6
0AEE F581      2361            mov     sp,a
0AF0           2362   ;        sourcecode.c:449: LCDprint2(str_frequency, 1, 2); //string, row, column
0AF0 75C801    2363            mov     _LCDprint2_PARM_2,#0x01
0AF3 757802    2364            mov     _LCDprint2_PARM_3,#0x02
0AF6 90CE70    2365            mov     dptr,#_main_str_frequency_1_76
0AF9 75F040    2366            mov     b,#0x40
0AFC 120000    2367            lcall   _LCDprint2
0AFF           2368   ;        sourcecode.c:450: LCDprint2("Hz  ", 1, 4);
0AFF 75C801    2369            mov     _LCDprint2_PARM_2,#0x01
0B02 757804    2370            mov     _LCDprint2_PARM_3,#0x04
0B05 90E880    2371            mov     dptr,#__str_17
0B08 75F080    2372            mov     b,#0x80
0B0B 120000    2373            lcall   _LCDprint2
0B0E           2374   ;        sourcecode.c:451: LCDprint2("F:", 1, 0);
0B0E 75C801    2375            mov     _LCDprint2_PARM_2,#0x01
0B11 757800    2376            mov     _LCDprint2_PARM_3,#0x00
0B14 90E8C0    2377            mov     dptr,#__str_18
0B17 75F080    2378            mov     b,#0x80
0B1A 120000    2379            lcall   _LCDprint2
0B1D           2380   L017060?:
0B1D           2381   ;        sourcecode.c:461: sprintf(str_vref, "%1.2f", v1_rms);   
0B1D C018      2382            push    _v1_rms
0B1F C019      2383            push    (_v1_rms + 1)
0B21 C01A      2384            push    (_v1_rms + 2)
0B23 C01B      2385            push    (_v1_rms + 3)
0B25 7400      2386            mov     a,#__str_19
0B27 C0E0      2387            push    acc
0B29 74E9      2388            mov     a,#(__str_19 >> 8)
0B2B C0E0      2389            push    acc
0B2D 7480      2390            mov     a,#0x80
0B2F C0E0      2391            push    acc
0B31 74C0      2392            mov     a,#_main_str_vref_1_76
0B33 C0E0      2393            push    acc
0B35 74CE      2394            mov     a,#(_main_str_vref_1_76 >> 8)
0B37 C0E0      2395            push    acc
0B39 7440      2396            mov     a,#0x40
0B3B C0E0      2397            push    acc
0B3D 120000    2398            lcall   _sprintf
0B40 E581      2399            mov     a,sp
0B42 24F6      2400            add     a,#0xf6
0B44 F581      2401            mov     sp,a
0B46           2402   ;        sourcecode.c:462: sprintf(str_vtest, "%1.2f", v2_rms); 
0B46 C0D8      2403            push    _v2_rms
0B48 C0D9      2404            push    (_v2_rms + 1)
0B4A C0DA      2405            push    (_v2_rms + 2)
0B4C C0DB      2406            push    (_v2_rms + 3)
0B4E 7400      2407            mov     a,#__str_19
0B50 C0E0      2408            push    acc
0B52 74E9      2409            mov     a,#(__str_19 >> 8)
0B54 C0E0      2410            push    acc
0B56 7480      2411            mov     a,#0x80
0B58 C0E0      2412            push    acc
0B5A 7410      2413            mov     a,#_main_str_vtest_1_76
0B5C C0E0      2414            push    acc
0B5E 74CF      2415            mov     a,#(_main_str_vtest_1_76 >> 8)
0B60 C0E0      2416            push    acc
0B62 7440      2417            mov     a,#0x40
0B64 C0E0      2418            push    acc
0B66 120000    2419            lcall   _sprintf
0B69 E581      2420            mov     a,sp
0B6B 24F6      2421            add     a,#0xf6
0B6D F581      2422            mov     sp,a
0B6F           2423   ;        sourcecode.c:463: sprintf(str_phase, "%3f", Phase_Shift);
0B6F C030      2424            push    _main_Phase_Shift_1_76
0B71 C031      2425            push    (_main_Phase_Shift_1_76 + 1)
0B73 C032      2426            push    (_main_Phase_Shift_1_76 + 2)
0B75 C033      2427            push    (_main_Phase_Shift_1_76 + 3)
0B77 7440      2428            mov     a,#__str_20
0B79 C0E0      2429            push    acc
0B7B 74E9      2430            mov     a,#(__str_20 >> 8)
0B7D C0E0      2431            push    acc
0B7F 7480      2432            mov     a,#0x80
0B81 C0E0      2433            push    acc
0B83 7460      2434            mov     a,#_main_str_phase_1_76
0B85 C0E0      2435            push    acc
0B87 74CF      2436            mov     a,#(_main_str_phase_1_76 >> 8)
0B89 C0E0      2437            push    acc
0B8B 7440      2438            mov     a,#0x40
0B8D C0E0      2439            push    acc
0B8F 120000    2440            lcall   _sprintf
0B92 E581      2441            mov     a,sp
0B94 24F6      2442            add     a,#0xf6
0B96 F581      2443            mov     sp,a
0B98           2444   ;        sourcecode.c:467: LCDprint2(str_phase, 1, 12); //string, row, column
0B98 75C801    2445            mov     _LCDprint2_PARM_2,#0x01
0B9B 75780C    2446            mov     _LCDprint2_PARM_3,#0x0C
0B9E 90CF60    2447            mov     dptr,#_main_str_phase_1_76
0BA1 75F040    2448            mov     b,#0x40
0BA4 120000    2449            lcall   _LCDprint2
0BA7           2450   ;        sourcecode.c:468: LCDprint2(str_vref, 2, 3); //string, row, column
0BA7 75C802    2451            mov     _LCDprint2_PARM_2,#0x02
0BAA 757803    2452            mov     _LCDprint2_PARM_3,#0x03
0BAD 90CEC0    2453            mov     dptr,#_main_str_vref_1_76
0BB0 75F040    2454            mov     b,#0x40
0BB3 120000    2455            lcall   _LCDprint2
0BB6           2456   ;        sourcecode.c:469: LCDprint2(str_vtest, 2, 12); //string, row, column
0BB6 75C802    2457            mov     _LCDprint2_PARM_2,#0x02
0BB9 75780C    2458            mov     _LCDprint2_PARM_3,#0x0C
0BBC 90CF10    2459            mov     dptr,#_main_str_vtest_1_76
0BBF 75F040    2460            mov     b,#0x40
0BC2 120000    2461            lcall   _LCDprint2
0BC5 020000    2462            ljmp    L017062?
0BC8           2463            rseg R_CSEG
0BC8           2464   
0000           2465            rseg R_XINIT
0000           2466   
0000           2467            rseg R_CONST
0000           2468   __str_0:
0000 1B        2469            db 0x1B
0001 5B324A    2470            db '[2J'
0004 00        2471            db 0x00
0005           2472   __str_1:
0005 41444320  2473            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        2474            db 0x0A
0016 46696C65  2475            db 'File: %s'
     3A202573
001E 0A        2476            db 0x0A
001F 436F6D70  2477            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        2478            db 0x0A
0030 0A        2479            db 0x0A
0031 00        2480            db 0x00
0032           2481   __str_2:
0032 736F7572  2482            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        2483            db 0x00
003F           2484   __str_3:
003F 4D617220  2485            db 'Mar  7 2024'
     20372032
     303234
004A 00        2486            db 0x00
004B           2487   __str_4:
004B 30353A34  2488            db '05:40:11'
     303A3131
0053 00        2489            db 0x00
0054           2490   __str_5:
0054 463A5858  2491            db 'F:XXHz   P:  .XXX'
     487A2020
     20503A20
     202E5858
     58
0065 00        2492            db 0x00
0066           2493   __str_6:
0066 56523A58  2494            db 'VR:X.XX  VT:X.XX'
     2E585820
     2056543A
     582E5858
0076 00        2495            db 0x00
0077           2496   __str_7:
0077 543D2566  2497            db 'T=%fms, Phase: %f, v1_Rms:%f, v2_Rms:%f'
     6D732C20
     50686173
     653A2025
     662C2076
     315F526D
     733A2566
     2C207632
     5F526D73
     3A2566
009E 0D        2498            db 0x0D
009F 00        2499            db 0x00
00A0           2500   __str_8:
00A0 2D        2501            db '-'
00A1 00        2502            db 0x00
00A2           2503   __str_9:
00A2 20        2504            db ' '
00A3 00        2505            db 0x00
00A4           2506   __str_10:
00A4 25332E31  2507            db '%3.1f'
     66
00A9 00        2508            db 0x00
00AA           2509   __str_11:
00AA 543A      2510            db 'T:'
00AC 00        2511            db 0x00
00AD           2512   __str_12:
00AD 6D73      2513            db 'ms'
00AF 00        2514            db 0x00
00B0           2515   __str_13:
00B0 25332E30  2516            db '%3.0f'
     66
00B5 00        2517            db 0x00
00B6           2518   __str_14:
00B6 773A      2519            db 'w:'
00B8 00        2520            db 0x00
00B9           2521   __str_15:
00B9 72616420  2522            db 'rad '
00BD 00        2523            db 0x00
00BE           2524   __str_16:
00BE 25322E30  2525            db '%2.0f'
     66
00C3 00        2526            db 0x00
00C4           2527   __str_17:
00C4 487A2020  2528            db 'Hz  '
00C8 00        2529            db 0x00
00C9           2530   __str_18:
00C9 463A      2531            db 'F:'
00CB 00        2532            db 0x00
00CC           2533   __str_19:
00CC 25312E32  2534            db '%1.2f'
     66
00D1 00        2535            db 0x00
00D2           2536   __str_20:
00D2 253366    2537            db '%3f'
00D5 00        2538            db 0x00
00D6           2539   
0003           2540            CSEG
0003           2541   
0003           2542   end
