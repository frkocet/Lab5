0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 06 22:46:25 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _ADC_at_Pin
0000             32            public _InitPinADC
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public _InitADC
0000             36            public __c51_external_startup
0000             37            public _v2
0000             38            public _v1
0000             39            public _v2_max
0000             40            public _v1_max
0000             41            public _overflow_count
0000             42   ;--------------------------------------------------------
0000             43   ; Special Function Registers
0000             44   ;--------------------------------------------------------
0000             45   _ACC            DATA 0xe0
0000             46   _ADC0ASAH       DATA 0xb6
0000             47   _ADC0ASAL       DATA 0xb5
0000             48   _ADC0ASCF       DATA 0xa1
0000             49   _ADC0ASCT       DATA 0xc7
0000             50   _ADC0CF0        DATA 0xbc
0000             51   _ADC0CF1        DATA 0xb9
0000             52   _ADC0CF2        DATA 0xdf
0000             53   _ADC0CN0        DATA 0xe8
0000             54   _ADC0CN1        DATA 0xb2
0000             55   _ADC0CN2        DATA 0xb3
0000             56   _ADC0GTH        DATA 0xc4
0000             57   _ADC0GTL        DATA 0xc3
0000             58   _ADC0H          DATA 0xbe
0000             59   _ADC0L          DATA 0xbd
0000             60   _ADC0LTH        DATA 0xc6
0000             61   _ADC0LTL        DATA 0xc5
0000             62   _ADC0MX         DATA 0xbb
0000             63   _B              DATA 0xf0
0000             64   _CKCON0         DATA 0x8e
0000             65   _CKCON1         DATA 0xa6
0000             66   _CLEN0          DATA 0xc6
0000             67   _CLIE0          DATA 0xc7
0000             68   _CLIF0          DATA 0xe8
0000             69   _CLKSEL         DATA 0xa9
0000             70   _CLOUT0         DATA 0xd1
0000             71   _CLU0CF         DATA 0xb1
0000             72   _CLU0FN         DATA 0xaf
0000             73   _CLU0MX         DATA 0x84
0000             74   _CLU1CF         DATA 0xb3
0000             75   _CLU1FN         DATA 0xb2
0000             76   _CLU1MX         DATA 0x85
0000             77   _CLU2CF         DATA 0xb6
0000             78   _CLU2FN         DATA 0xb5
0000             79   _CLU2MX         DATA 0x91
0000             80   _CLU3CF         DATA 0xbf
0000             81   _CLU3FN         DATA 0xbe
0000             82   _CLU3MX         DATA 0xae
0000             83   _CMP0CN0        DATA 0x9b
0000             84   _CMP0CN1        DATA 0x99
0000             85   _CMP0MD         DATA 0x9d
0000             86   _CMP0MX         DATA 0x9f
0000             87   _CMP1CN0        DATA 0xbf
0000             88   _CMP1CN1        DATA 0xac
0000             89   _CMP1MD         DATA 0xab
0000             90   _CMP1MX         DATA 0xaa
0000             91   _CRC0CN0        DATA 0xce
0000             92   _CRC0CN1        DATA 0x86
0000             93   _CRC0CNT        DATA 0xd3
0000             94   _CRC0DAT        DATA 0xcb
0000             95   _CRC0FLIP       DATA 0xcf
0000             96   _CRC0IN         DATA 0xca
0000             97   _CRC0ST         DATA 0xd2
0000             98   _DAC0CF0        DATA 0x91
0000             99   _DAC0CF1        DATA 0x92
0000            100   _DAC0H          DATA 0x85
0000            101   _DAC0L          DATA 0x84
0000            102   _DAC1CF0        DATA 0x93
0000            103   _DAC1CF1        DATA 0x94
0000            104   _DAC1H          DATA 0x8a
0000            105   _DAC1L          DATA 0x89
0000            106   _DAC2CF0        DATA 0x95
0000            107   _DAC2CF1        DATA 0x96
0000            108   _DAC2H          DATA 0x8c
0000            109   _DAC2L          DATA 0x8b
0000            110   _DAC3CF0        DATA 0x9a
0000            111   _DAC3CF1        DATA 0x9c
0000            112   _DAC3H          DATA 0x8e
0000            113   _DAC3L          DATA 0x8d
0000            114   _DACGCF0        DATA 0x88
0000            115   _DACGCF1        DATA 0x98
0000            116   _DACGCF2        DATA 0xa2
0000            117   _DERIVID        DATA 0xad
0000            118   _DEVICEID       DATA 0xb5
0000            119   _DPH            DATA 0x83
0000            120   _DPL            DATA 0x82
0000            121   _EIE1           DATA 0xe6
0000            122   _EIE2           DATA 0xf3
0000            123   _EIP1           DATA 0xbb
0000            124   _EIP1H          DATA 0xee
0000            125   _EIP2           DATA 0xed
0000            126   _EIP2H          DATA 0xf6
0000            127   _EMI0CN         DATA 0xe7
0000            128   _FLKEY          DATA 0xb7
0000            129   _HFO0CAL        DATA 0xc7
0000            130   _HFO1CAL        DATA 0xd6
0000            131   _HFOCN          DATA 0xef
0000            132   _I2C0ADM        DATA 0xff
0000            133   _I2C0CN0        DATA 0xba
0000            134   _I2C0DIN        DATA 0xbc
0000            135   _I2C0DOUT       DATA 0xbb
0000            136   _I2C0FCN0       DATA 0xad
0000            137   _I2C0FCN1       DATA 0xab
0000            138   _I2C0FCT        DATA 0xf5
0000            139   _I2C0SLAD       DATA 0xbd
0000            140   _I2C0STAT       DATA 0xb9
0000            141   _IE             DATA 0xa8
0000            142   _IP             DATA 0xb8
0000            143   _IPH            DATA 0xf2
0000            144   _IT01CF         DATA 0xe4
0000            145   _LFO0CN         DATA 0xb1
0000            146   _P0             DATA 0x80
0000            147   _P0MASK         DATA 0xfe
0000            148   _P0MAT          DATA 0xfd
0000            149   _P0MDIN         DATA 0xf1
0000            150   _P0MDOUT        DATA 0xa4
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1             DATA 0x90
0000            153   _P1MASK         DATA 0xee
0000            154   _P1MAT          DATA 0xed
0000            155   _P1MDIN         DATA 0xf2
0000            156   _P1MDOUT        DATA 0xa5
0000            157   _P1SKIP         DATA 0xd5
0000            158   _P2             DATA 0xa0
0000            159   _P2MASK         DATA 0xfc
0000            160   _P2MAT          DATA 0xfb
0000            161   _P2MDIN         DATA 0xf3
0000            162   _P2MDOUT        DATA 0xa6
0000            163   _P2SKIP         DATA 0xcc
0000            164   _P3             DATA 0xb0
0000            165   _P3MDIN         DATA 0xf4
0000            166   _P3MDOUT        DATA 0x9c
0000            167   _PCA0CENT       DATA 0x9e
0000            168   _PCA0CLR        DATA 0x9c
0000            169   _PCA0CN0        DATA 0xd8
0000            170   _PCA0CPH0       DATA 0xfc
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPH3       DATA 0xf5
0000            174   _PCA0CPH4       DATA 0x85
0000            175   _PCA0CPH5       DATA 0xde
0000            176   _PCA0CPL0       DATA 0xfb
0000            177   _PCA0CPL1       DATA 0xe9
0000            178   _PCA0CPL2       DATA 0xeb
0000            179   _PCA0CPL3       DATA 0xf4
0000            180   _PCA0CPL4       DATA 0x84
0000            181   _PCA0CPL5       DATA 0xdd
0000            182   _PCA0CPM0       DATA 0xda
0000            183   _PCA0CPM1       DATA 0xdb
0000            184   _PCA0CPM2       DATA 0xdc
0000            185   _PCA0CPM3       DATA 0xae
0000            186   _PCA0CPM4       DATA 0xaf
0000            187   _PCA0CPM5       DATA 0xcc
0000            188   _PCA0H          DATA 0xfa
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0MD         DATA 0xd9
0000            191   _PCA0POL        DATA 0x96
0000            192   _PCA0PWM        DATA 0xf7
0000            193   _PCON0          DATA 0x87
0000            194   _PCON1          DATA 0xcd
0000            195   _PFE0CN         DATA 0xc1
0000            196   _PRTDRV         DATA 0xf6
0000            197   _PSCTL          DATA 0x8f
0000            198   _PSTAT0         DATA 0xaa
0000            199   _PSW            DATA 0xd0
0000            200   _REF0CN         DATA 0xd1
0000            201   _REG0CN         DATA 0xc9
0000            202   _REVID          DATA 0xb6
0000            203   _RSTSRC         DATA 0xef
0000            204   _SBCON1         DATA 0x94
0000            205   _SBRLH1         DATA 0x96
0000            206   _SBRLL1         DATA 0x95
0000            207   _SBUF           DATA 0x99
0000            208   _SBUF0          DATA 0x99
0000            209   _SBUF1          DATA 0x92
0000            210   _SCON           DATA 0x98
0000            211   _SCON0          DATA 0x98
0000            212   _SCON1          DATA 0xc8
0000            213   _SFRPAGE        DATA 0xa7
0000            214   _SFRPGCN        DATA 0xbc
0000            215   _SFRSTACK       DATA 0xd7
0000            216   _SMB0ADM        DATA 0xd6
0000            217   _SMB0ADR        DATA 0xd7
0000            218   _SMB0CF         DATA 0xc1
0000            219   _SMB0CN0        DATA 0xc0
0000            220   _SMB0DAT        DATA 0xc2
0000            221   _SMB0FCN0       DATA 0xc3
0000            222   _SMB0FCN1       DATA 0xc4
0000            223   _SMB0FCT        DATA 0xef
0000            224   _SMB0RXLN       DATA 0xc5
0000            225   _SMB0TC         DATA 0xac
0000            226   _SMOD1          DATA 0x93
0000            227   _SP             DATA 0x81
0000            228   _SPI0CFG        DATA 0xa1
0000            229   _SPI0CKR        DATA 0xa2
0000            230   _SPI0CN0        DATA 0xf8
0000            231   _SPI0DAT        DATA 0xa3
0000            232   _SPI0FCN0       DATA 0x9a
0000            233   _SPI0FCN1       DATA 0x9b
0000            234   _SPI0FCT        DATA 0xf7
0000            235   _SPI0PCF        DATA 0xdf
0000            236   _TCON           DATA 0x88
0000            237   _TH0            DATA 0x8c
0000            238   _TH1            DATA 0x8d
0000            239   _TL0            DATA 0x8a
0000            240   _TL1            DATA 0x8b
0000            241   _TMOD           DATA 0x89
0000            242   _TMR2CN0        DATA 0xc8
0000            243   _TMR2CN1        DATA 0xfd
0000            244   _TMR2H          DATA 0xcf
0000            245   _TMR2L          DATA 0xce
0000            246   _TMR2RLH        DATA 0xcb
0000            247   _TMR2RLL        DATA 0xca
0000            248   _TMR3CN0        DATA 0x91
0000            249   _TMR3CN1        DATA 0xfe
0000            250   _TMR3H          DATA 0x95
0000            251   _TMR3L          DATA 0x94
0000            252   _TMR3RLH        DATA 0x93
0000            253   _TMR3RLL        DATA 0x92
0000            254   _TMR4CN0        DATA 0x98
0000            255   _TMR4CN1        DATA 0xff
0000            256   _TMR4H          DATA 0xa5
0000            257   _TMR4L          DATA 0xa4
0000            258   _TMR4RLH        DATA 0xa3
0000            259   _TMR4RLL        DATA 0xa2
0000            260   _TMR5CN0        DATA 0xc0
0000            261   _TMR5CN1        DATA 0xf1
0000            262   _TMR5H          DATA 0xd5
0000            263   _TMR5L          DATA 0xd4
0000            264   _TMR5RLH        DATA 0xd3
0000            265   _TMR5RLL        DATA 0xd2
0000            266   _UART0PCF       DATA 0xd9
0000            267   _UART1FCN0      DATA 0x9d
0000            268   _UART1FCN1      DATA 0xd8
0000            269   _UART1FCT       DATA 0xfa
0000            270   _UART1LIN       DATA 0x9e
0000            271   _UART1PCF       DATA 0xda
0000            272   _VDM0CN         DATA 0xff
0000            273   _WDTCN          DATA 0x97
0000            274   _XBR0           DATA 0xe1
0000            275   _XBR1           DATA 0xe2
0000            276   _XBR2           DATA 0xe3
0000            277   _XOSC0CN        DATA 0x86
0000            278   _DPTR           DATA 0x8382
0000            279   _TMR2RL         DATA 0xcbca
0000            280   _TMR3RL         DATA 0x9392
0000            281   _TMR4RL         DATA 0xa3a2
0000            282   _TMR5RL         DATA 0xd3d2
0000            283   _TMR0           DATA 0x8c8a
0000            284   _TMR1           DATA 0x8d8b
0000            285   _TMR2           DATA 0xcfce
0000            286   _TMR3           DATA 0x9594
0000            287   _TMR4           DATA 0xa5a4
0000            288   _TMR5           DATA 0xd5d4
0000            289   _SBRL1          DATA 0x9695
0000            290   _PCA0           DATA 0xfaf9
0000            291   _PCA0CP0        DATA 0xfcfb
0000            292   _PCA0CP1        DATA 0xeae9
0000            293   _PCA0CP2        DATA 0xeceb
0000            294   _PCA0CP3        DATA 0xf5f4
0000            295   _PCA0CP4        DATA 0x8584
0000            296   _PCA0CP5        DATA 0xdedd
0000            297   _ADC0ASA        DATA 0xb6b5
0000            298   _ADC0GT         DATA 0xc4c3
0000            299   _ADC0           DATA 0xbebd
0000            300   _ADC0LT         DATA 0xc6c5
0000            301   _DAC0           DATA 0x8584
0000            302   _DAC1           DATA 0x8a89
0000            303   _DAC2           DATA 0x8c8b
0000            304   _DAC3           DATA 0x8e8d
0000            305   ;--------------------------------------------------------
0000            306   ; special function bits
0000            307   ;--------------------------------------------------------
0000            308   _ACC_0          BIT 0xe0
0000            309   _ACC_1          BIT 0xe1
0000            310   _ACC_2          BIT 0xe2
0000            311   _ACC_3          BIT 0xe3
0000            312   _ACC_4          BIT 0xe4
0000            313   _ACC_5          BIT 0xe5
0000            314   _ACC_6          BIT 0xe6
0000            315   _ACC_7          BIT 0xe7
0000            316   _TEMPE          BIT 0xe8
0000            317   _ADGN0          BIT 0xe9
0000            318   _ADGN1          BIT 0xea
0000            319   _ADWINT         BIT 0xeb
0000            320   _ADBUSY         BIT 0xec
0000            321   _ADINT          BIT 0xed
0000            322   _IPOEN          BIT 0xee
0000            323   _ADEN           BIT 0xef
0000            324   _B_0            BIT 0xf0
0000            325   _B_1            BIT 0xf1
0000            326   _B_2            BIT 0xf2
0000            327   _B_3            BIT 0xf3
0000            328   _B_4            BIT 0xf4
0000            329   _B_5            BIT 0xf5
0000            330   _B_6            BIT 0xf6
0000            331   _B_7            BIT 0xf7
0000            332   _C0FIF          BIT 0xe8
0000            333   _C0RIF          BIT 0xe9
0000            334   _C1FIF          BIT 0xea
0000            335   _C1RIF          BIT 0xeb
0000            336   _C2FIF          BIT 0xec
0000            337   _C2RIF          BIT 0xed
0000            338   _C3FIF          BIT 0xee
0000            339   _C3RIF          BIT 0xef
0000            340   _D1SRC0         BIT 0x88
0000            341   _D1SRC1         BIT 0x89
0000            342   _D1AMEN         BIT 0x8a
0000            343   _D01REFSL       BIT 0x8b
0000            344   _D3SRC0         BIT 0x8c
0000            345   _D3SRC1         BIT 0x8d
0000            346   _D3AMEN         BIT 0x8e
0000            347   _D23REFSL       BIT 0x8f
0000            348   _D0UDIS         BIT 0x98
0000            349   _D1UDIS         BIT 0x99
0000            350   _D2UDIS         BIT 0x9a
0000            351   _D3UDIS         BIT 0x9b
0000            352   _EX0            BIT 0xa8
0000            353   _ET0            BIT 0xa9
0000            354   _EX1            BIT 0xaa
0000            355   _ET1            BIT 0xab
0000            356   _ES0            BIT 0xac
0000            357   _ET2            BIT 0xad
0000            358   _ESPI0          BIT 0xae
0000            359   _EA             BIT 0xaf
0000            360   _PX0            BIT 0xb8
0000            361   _PT0            BIT 0xb9
0000            362   _PX1            BIT 0xba
0000            363   _PT1            BIT 0xbb
0000            364   _PS0            BIT 0xbc
0000            365   _PT2            BIT 0xbd
0000            366   _PSPI0          BIT 0xbe
0000            367   _P0_0           BIT 0x80
0000            368   _P0_1           BIT 0x81
0000            369   _P0_2           BIT 0x82
0000            370   _P0_3           BIT 0x83
0000            371   _P0_4           BIT 0x84
0000            372   _P0_5           BIT 0x85
0000            373   _P0_6           BIT 0x86
0000            374   _P0_7           BIT 0x87
0000            375   _P1_0           BIT 0x90
0000            376   _P1_1           BIT 0x91
0000            377   _P1_2           BIT 0x92
0000            378   _P1_3           BIT 0x93
0000            379   _P1_4           BIT 0x94
0000            380   _P1_5           BIT 0x95
0000            381   _P1_6           BIT 0x96
0000            382   _P1_7           BIT 0x97
0000            383   _P2_0           BIT 0xa0
0000            384   _P2_1           BIT 0xa1
0000            385   _P2_2           BIT 0xa2
0000            386   _P2_3           BIT 0xa3
0000            387   _P2_4           BIT 0xa4
0000            388   _P2_5           BIT 0xa5
0000            389   _P2_6           BIT 0xa6
0000            390   _P3_0           BIT 0xb0
0000            391   _P3_1           BIT 0xb1
0000            392   _P3_2           BIT 0xb2
0000            393   _P3_3           BIT 0xb3
0000            394   _P3_4           BIT 0xb4
0000            395   _P3_7           BIT 0xb7
0000            396   _CCF0           BIT 0xd8
0000            397   _CCF1           BIT 0xd9
0000            398   _CCF2           BIT 0xda
0000            399   _CCF3           BIT 0xdb
0000            400   _CCF4           BIT 0xdc
0000            401   _CCF5           BIT 0xdd
0000            402   _CR             BIT 0xde
0000            403   _CF             BIT 0xdf
0000            404   _PARITY         BIT 0xd0
0000            405   _F1             BIT 0xd1
0000            406   _OV             BIT 0xd2
0000            407   _RS0            BIT 0xd3
0000            408   _RS1            BIT 0xd4
0000            409   _F0             BIT 0xd5
0000            410   _AC             BIT 0xd6
0000            411   _CY             BIT 0xd7
0000            412   _RI             BIT 0x98
0000            413   _TI             BIT 0x99
0000            414   _RB8            BIT 0x9a
0000            415   _TB8            BIT 0x9b
0000            416   _REN            BIT 0x9c
0000            417   _CE             BIT 0x9d
0000            418   _SMODE          BIT 0x9e
0000            419   _RI1            BIT 0xc8
0000            420   _TI1            BIT 0xc9
0000            421   _RBX1           BIT 0xca
0000            422   _TBX1           BIT 0xcb
0000            423   _REN1           BIT 0xcc
0000            424   _PERR1          BIT 0xcd
0000            425   _OVR1           BIT 0xce
0000            426   _SI             BIT 0xc0
0000            427   _ACK            BIT 0xc1
0000            428   _ARBLOST        BIT 0xc2
0000            429   _ACKRQ          BIT 0xc3
0000            430   _STO            BIT 0xc4
0000            431   _STA            BIT 0xc5
0000            432   _TXMODE         BIT 0xc6
0000            433   _MASTER         BIT 0xc7
0000            434   _SPIEN          BIT 0xf8
0000            435   _TXNF           BIT 0xf9
0000            436   _NSSMD0         BIT 0xfa
0000            437   _NSSMD1         BIT 0xfb
0000            438   _RXOVRN         BIT 0xfc
0000            439   _MODF           BIT 0xfd
0000            440   _WCOL           BIT 0xfe
0000            441   _SPIF           BIT 0xff
0000            442   _IT0            BIT 0x88
0000            443   _IE0            BIT 0x89
0000            444   _IT1            BIT 0x8a
0000            445   _IE1            BIT 0x8b
0000            446   _TR0            BIT 0x8c
0000            447   _TF0            BIT 0x8d
0000            448   _TR1            BIT 0x8e
0000            449   _TF1            BIT 0x8f
0000            450   _T2XCLK0        BIT 0xc8
0000            451   _T2XCLK1        BIT 0xc9
0000            452   _TR2            BIT 0xca
0000            453   _T2SPLIT        BIT 0xcb
0000            454   _TF2CEN         BIT 0xcc
0000            455   _TF2LEN         BIT 0xcd
0000            456   _TF2L           BIT 0xce
0000            457   _TF2H           BIT 0xcf
0000            458   _T4XCLK0        BIT 0x98
0000            459   _T4XCLK1        BIT 0x99
0000            460   _TR4            BIT 0x9a
0000            461   _T4SPLIT        BIT 0x9b
0000            462   _TF4CEN         BIT 0x9c
0000            463   _TF4LEN         BIT 0x9d
0000            464   _TF4L           BIT 0x9e
0000            465   _TF4H           BIT 0x9f
0000            466   _T5XCLK0        BIT 0xc0
0000            467   _T5XCLK1        BIT 0xc1
0000            468   _TR5            BIT 0xc2
0000            469   _T5SPLIT        BIT 0xc3
0000            470   _TF5CEN         BIT 0xc4
0000            471   _TF5LEN         BIT 0xc5
0000            472   _TF5L           BIT 0xc6
0000            473   _TF5H           BIT 0xc7
0000            474   _RIE            BIT 0xd8
0000            475   _RXTO0          BIT 0xd9
0000            476   _RXTO1          BIT 0xda
0000            477   _RFRQ           BIT 0xdb
0000            478   _TIE            BIT 0xdc
0000            479   _TXHOLD         BIT 0xdd
0000            480   _TXNF1          BIT 0xde
0000            481   _TFRQ           BIT 0xdf
0000            482   ;--------------------------------------------------------
0000            483   ; overlayable register banks
0000            484   ;--------------------------------------------------------
0000            485            rbank0 segment data overlay
0000            486   ;--------------------------------------------------------
0000            487   ; internal ram data
0000            488   ;--------------------------------------------------------
0000            489            rseg R_DSEG
0000            490   _overflow_count:
0000            491            ds 1
0001            492   _v1_max:
0001            493            ds 4
0005            494   _v2_max:
0005            495            ds 4
0009            496   _v1:
0009            497            ds 4
000D            498   _v2:
000D            499            ds 4
0011            500   _main_period_1_61:
0011            501            ds 4
0015            502   _main_sloc0_1_0:
0015            503            ds 2
0017            504   _main_sloc1_1_0:
0017            505            ds 4
001B            506   ;--------------------------------------------------------
001B            507   ; overlayable items in internal ram 
001B            508   ;--------------------------------------------------------
0000            509            rseg    R_OSEG
0000            510            rseg    R_OSEG
0000            511   _InitPinADC_PARM_2:
0000            512            ds 1
0001            513            rseg    R_OSEG
0001            514   ;--------------------------------------------------------
0001            515   ; indirectly addressable internal ram data
0001            516   ;--------------------------------------------------------
0000            517            rseg R_ISEG
0000            518   ;--------------------------------------------------------
0000            519   ; absolute internal ram data
0000            520   ;--------------------------------------------------------
0000            521            DSEG
0000            522   ;--------------------------------------------------------
0000            523   ; bit data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_BSEG
0000            526   ;--------------------------------------------------------
0000            527   ; paged external ram data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_PSEG
0000            530   ;--------------------------------------------------------
0000            531   ; external ram data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_XSEG
0000            534   ;--------------------------------------------------------
0000            535   ; absolute external ram data
0000            536   ;--------------------------------------------------------
0000            537            XSEG
0000            538   ;--------------------------------------------------------
0000            539   ; external initialized ram data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_IXSEG
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_CSEG
0000            545   ;--------------------------------------------------------
0000            546   ; Reset entry point and interrupt vectors
0000            547   ;--------------------------------------------------------
0000            548            CSEG at 0x0000
0000 020000     549            ljmp    _crt0
0003            550   ;--------------------------------------------------------
0003            551   ; global & static initialisations
0003            552   ;--------------------------------------------------------
0000            553            rseg R_HOME
0000            554            rseg R_GSINIT
0000            555            rseg R_GSINIT
0000            556   ;--------------------------------------------------------
0000            557   ; data variables initialization
0000            558   ;--------------------------------------------------------
0000            559            rseg R_DINIT
0000            560   ;        sourcecode.c:15: float v1_max = 0; float v2_max = 0;
0000 751800     561            mov     _v1_max,#0x00
0003 751900     562            mov     (_v1_max + 1),#0x00
0006 751A00     563            mov     (_v1_max + 2),#0x00
0009 751B00     564            mov     (_v1_max + 3),#0x00
000C            565   ;        sourcecode.c:15: float v1 = 0; float v2 = 0;
000C 75D800     566            mov     _v2_max,#0x00
000F 75D900     567            mov     (_v2_max + 1),#0x00
0012 75DA00     568            mov     (_v2_max + 2),#0x00
0015 75DB00     569            mov     (_v2_max + 3),#0x00
0018            570   ;        sourcecode.c:16: 
0018 759800     571            mov     _v1,#0x00
001B 759900     572            mov     (_v1 + 1),#0x00
001E 759A00     573            mov     (_v1 + 2),#0x00
0021 759B00     574            mov     (_v1 + 3),#0x00
0024            575   ;        sourcecode.c:16: float v1 = 0; float v2 = 0;
0024 755800     576            mov     _v2,#0x00
0027 755900     577            mov     (_v2 + 1),#0x00
002A 755A00     578            mov     (_v2 + 2),#0x00
002D 755B00     579            mov     (_v2 + 3),#0x00
0030            580            ; The linker places a 'ret' at the end of segment R_DINIT.
0030            581   ;--------------------------------------------------------
0030            582   ; code
0030            583   ;--------------------------------------------------------
0000            584            rseg R_CSEG
0000            585   ;------------------------------------------------------------
0000            586   ;Allocation info for local variables in function '_c51_external_startup'
0000            587   ;------------------------------------------------------------
0000            588   ;------------------------------------------------------------
0000            589   ;        sourcecode.c:18: char _c51_external_startup (void)
0000            590   ;        -----------------------------------------
0000            591   ;         function _c51_external_startup
0000            592   ;        -----------------------------------------
0000            593   __c51_external_startup:
0000            594            using   0
0000            595   ;        sourcecode.c:21: SFRPAGE = 0x00;
0000 75A700     596            mov     _SFRPAGE,#0x00
0003            597   ;        sourcecode.c:22: WDTCN = 0xDE; //First key
0003 7597DE     598            mov     _WDTCN,#0xDE
0006            599   ;        sourcecode.c:23: WDTCN = 0xAD; //Second key
0006 7597AD     600            mov     _WDTCN,#0xAD
0009            601   ;        sourcecode.c:25: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     602            mov     _VDM0CN,#0x80
000C            603   ;        sourcecode.c:26: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     604            mov     _RSTSRC,#0x06
000F            605   ;        sourcecode.c:33: SFRPAGE = 0x10;
000F 75A710     606            mov     _SFRPAGE,#0x10
0012            607   ;        sourcecode.c:34: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     608            mov     _PFE0CN,#0x20
0015            609   ;        sourcecode.c:35: SFRPAGE = 0x00;
0015 75A700     610            mov     _SFRPAGE,#0x00
0018            611   ;        sourcecode.c:56: CLKSEL = 0x00;
0018 75A900     612            mov     _CLKSEL,#0x00
001B            613   ;        sourcecode.c:57: CLKSEL = 0x00;
001B 75A900     614            mov     _CLKSEL,#0x00
001E            615   ;        sourcecode.c:58: while ((CLKSEL & 0x80) == 0);
001E            616   L002001?:
001E E5A9       617            mov     a,_CLKSEL
0020 30E7E0     618            jnb     acc.7,L002001?
0023            619   ;        sourcecode.c:59: CLKSEL = 0x03;
0023 75A903     620            mov     _CLKSEL,#0x03
0026            621   ;        sourcecode.c:60: CLKSEL = 0x03;
0026 75A903     622            mov     _CLKSEL,#0x03
0029            623   ;        sourcecode.c:61: while ((CLKSEL & 0x80) == 0);
0029            624   L002004?:
0029 E5A9       625            mov     a,_CLKSEL
002B 30E760     626            jnb     acc.7,L002004?
002E            627   ;        sourcecode.c:66: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     628            orl     _P0MDOUT,#0x10
0031            629   ;        sourcecode.c:67: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     630            mov     _XBR0,#0x01
0034            631   ;        sourcecode.c:68: XBR1     = 0X00;
0034 75E200     632            mov     _XBR1,#0x00
0037            633   ;        sourcecode.c:69: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     634            mov     _XBR2,#0x40
003A            635   ;        sourcecode.c:75: SCON0 = 0x10;
003A 759810     636            mov     _SCON0,#0x10
003D            637   ;        sourcecode.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     638            mov     _TH1,#0xE6
0040            639   ;        sourcecode.c:77: TL1 = TH1;      // Init Timer1
0040 858D8B     640            mov     _TL1,_TH1
0043            641   ;        sourcecode.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     642            anl     _TMOD,#0x0F
0046            643   ;        sourcecode.c:79: TMOD |=  0x20;                       
0046 438920     644            orl     _TMOD,#0x20
0049            645   ;        sourcecode.c:80: TR1 = 1; // START Timer1
0049 D28E       646            setb    _TR1
004B            647   ;        sourcecode.c:81: TI = 1;  // Indicate TX0 ready
004B D299       648            setb    _TI
004D            649   ;        sourcecode.c:83: return 0;
004D 758200     650            mov     dpl,#0x00
0050 22         651            ret
0051            652   ;------------------------------------------------------------
0051            653   ;Allocation info for local variables in function 'InitADC'
0051            654   ;------------------------------------------------------------
0051            655   ;------------------------------------------------------------
0051            656   ;        sourcecode.c:86: void InitADC (void)
0051            657   ;        -----------------------------------------
0051            658   ;         function InitADC
0051            659   ;        -----------------------------------------
0051            660   _InitADC:
0051            661   ;        sourcecode.c:88: SFRPAGE = 0x00;
0051 75A700     662            mov     _SFRPAGE,#0x00
0054            663   ;        sourcecode.c:89: ADEN=0; // Disable ADC
0054 C2EF       664            clr     _ADEN
0056            665   ;        sourcecode.c:94: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     666            mov     _ADC0CN1,#0x80
0059            667   ;        sourcecode.c:98: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     668            mov     _ADC0CF0,#0x20
005C            669   ;        sourcecode.c:102: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     670            mov     _ADC0CF1,#0x1E
005F            671   ;        sourcecode.c:111: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     672            mov     _ADC0CN0,#0x00
0062            673   ;        sourcecode.c:116: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     674            mov     _ADC0CF2,#0x3F
0065            675   ;        sourcecode.c:120: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     676            mov     _ADC0CN2,#0x00
0068            677   ;        sourcecode.c:122: ADEN=1; // Enable ADC
0068 D2EF       678            setb    _ADEN
006A 22         679            ret
006B            680   ;------------------------------------------------------------
006B            681   ;Allocation info for local variables in function 'Timer3us'
006B            682   ;------------------------------------------------------------
006B            683   ;us                        Allocated to registers r2 
006B            684   ;i                         Allocated to registers r3 
006B            685   ;------------------------------------------------------------
006B            686   ;        sourcecode.c:126: void Timer3us(unsigned char us)
006B            687   ;        -----------------------------------------
006B            688   ;         function Timer3us
006B            689   ;        -----------------------------------------
006B            690   _Timer3us:
006B AA82       691            mov     r2,dpl
006D            692   ;        sourcecode.c:131: CKCON0|=0b_0100_0000;
006D 438E40     693            orl     _CKCON0,#0x40
0070            694   ;        sourcecode.c:133: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     695            mov     _TMR3RL,#0xB8
0073 7593FF     696            mov     (_TMR3RL >> 8),#0xFF
0076            697   ;        sourcecode.c:134: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     698            mov     _TMR3,_TMR3RL
0079 859395     699            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            700   ;        sourcecode.c:136: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     701            mov     _TMR3CN0,#0x04
007F            702   ;        sourcecode.c:137: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       703            mov     r3,#0x00
0081            704   L004004?:
0081 C3         705            clr     c
0082 EB         706            mov     a,r3
0083 9A         707            subb    a,r2
0084 5000       708            jnc     L004007?
0086            709   ;        sourcecode.c:139: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            710   L004001?:
0086 E591       711            mov     a,_TMR3CN0
0088 30E760     712            jnb     acc.7,L004001?
008B            713   ;        sourcecode.c:140: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     714            anl     _TMR3CN0,#0x7F
008E            715   ;        sourcecode.c:137: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         716            inc     r3
008F 8000       717            sjmp    L004004?
0091            718   L004007?:
0091            719   ;        sourcecode.c:142: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     720            mov     _TMR3CN0,#0x00
0094 22         721            ret
0095            722   ;------------------------------------------------------------
0095            723   ;Allocation info for local variables in function 'waitms'
0095            724   ;------------------------------------------------------------
0095            725   ;ms                        Allocated to registers r2 r3 
0095            726   ;j                         Allocated to registers r4 r5 
0095            727   ;k                         Allocated to registers r6 
0095            728   ;------------------------------------------------------------
0095            729   ;        sourcecode.c:145: void waitms (unsigned int ms)
0095            730   ;        -----------------------------------------
0095            731   ;         function waitms
0095            732   ;        -----------------------------------------
0095            733   _waitms:
0095 AA82       734            mov     r2,dpl
0097 AB83       735            mov     r3,dph
0099            736   ;        sourcecode.c:149: for(j=0; j<ms; j++)
0099 7C00       737            mov     r4,#0x00
009B 7D00       738            mov     r5,#0x00
009D            739   L005005?:
009D C3         740            clr     c
009E EC         741            mov     a,r4
009F 9A         742            subb    a,r2
00A0 ED         743            mov     a,r5
00A1 9B         744            subb    a,r3
00A2 5000       745            jnc     L005009?
00A4            746   ;        sourcecode.c:150: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       747            mov     r6,#0x00
00A6            748   L005001?:
00A6 BE04A0     749            cjne    r6,#0x04,L005018?
00A9            750   L005018?:
00A9 5000       751            jnc     L005007?
00AB 7582FA     752            mov     dpl,#0xFA
00AE C002       753            push    ar2
00B0 C003       754            push    ar3
00B2 C004       755            push    ar4
00B4 C005       756            push    ar5
00B6 C006       757            push    ar6
00B8 120000     758            lcall   _Timer3us
00BB D006       759            pop     ar6
00BD D005       760            pop     ar5
00BF D004       761            pop     ar4
00C1 D003       762            pop     ar3
00C3 D002       763            pop     ar2
00C5 0E         764            inc     r6
00C6 8000       765            sjmp    L005001?
00C8            766   L005007?:
00C8            767   ;        sourcecode.c:149: for(j=0; j<ms; j++)
00C8 0C         768            inc     r4
00C9 BC00E0     769            cjne    r4,#0x00,L005005?
00CC 0D         770            inc     r5
00CD 8000       771            sjmp    L005005?
00CF            772   L005009?:
00CF 22         773            ret
00D0            774   ;------------------------------------------------------------
00D0            775   ;Allocation info for local variables in function 'InitPinADC'
00D0            776   ;------------------------------------------------------------
00D0            777   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            778   ;portno                    Allocated to registers r2 
00D0            779   ;mask                      Allocated to registers r3 
00D0            780   ;------------------------------------------------------------
00D0            781   ;        sourcecode.c:155: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            782   ;        -----------------------------------------
00D0            783   ;         function InitPinADC
00D0            784   ;        -----------------------------------------
00D0            785   _InitPinADC:
00D0 AA82       786            mov     r2,dpl
00D2            787   ;        sourcecode.c:159: mask=1<<pinno;
00D2 85C8F0     788            mov     b,_InitPinADC_PARM_2
00D5 05F0       789            inc     b
00D7 7401       790            mov     a,#0x01
00D9 8000       791            sjmp    L006013?
00DB            792   L006011?:
00DB 25E0       793            add     a,acc
00DD            794   L006013?:
00DD D5F0A0     795            djnz    b,L006011?
00E0 FB         796            mov     r3,a
00E1            797   ;        sourcecode.c:161: SFRPAGE = 0x20;
00E1 75A720     798            mov     _SFRPAGE,#0x20
00E4            799   ;        sourcecode.c:162: switch (portno)
00E4 BA00E0     800            cjne    r2,#0x00,L006014?
00E7 8000       801            sjmp    L006001?
00E9            802   L006014?:
00E9 BA0160     803            cjne    r2,#0x01,L006015?
00EC 8000       804            sjmp    L006002?
00EE            805   L006015?:
00EE            806   ;        sourcecode.c:164: case 0:
00EE BA02E8     807            cjne    r2,#0x02,L006005?
00F1 8000       808            sjmp    L006003?
00F3            809   L006001?:
00F3            810   ;        sourcecode.c:165: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         811            mov     a,r3
00F4 F4         812            cpl     a
00F5 FA         813            mov     r2,a
00F6 52F1       814            anl     _P0MDIN,a
00F8            815   ;        sourcecode.c:166: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         816            mov     a,r3
00F9 42D4       817            orl     _P0SKIP,a
00FB            818   ;        sourcecode.c:167: break;
00FB            819   ;        sourcecode.c:168: case 1:
00FB 8000       820            sjmp    L006005?
00FD            821   L006002?:
00FD            822   ;        sourcecode.c:169: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         823            mov     a,r3
00FE F4         824            cpl     a
00FF FA         825            mov     r2,a
0100 52F2       826            anl     _P1MDIN,a
0102            827   ;        sourcecode.c:170: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         828            mov     a,r3
0103 42D5       829            orl     _P1SKIP,a
0105            830   ;        sourcecode.c:171: break;
0105            831   ;        sourcecode.c:172: case 2:
0105 8000       832            sjmp    L006005?
0107            833   L006003?:
0107            834   ;        sourcecode.c:173: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         835            mov     a,r3
0108 F4         836            cpl     a
0109 FA         837            mov     r2,a
010A 52F3       838            anl     _P2MDIN,a
010C            839   ;        sourcecode.c:174: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         840            mov     a,r3
010D 42CC       841            orl     _P2SKIP,a
010F            842   ;        sourcecode.c:178: }
010F            843   L006005?:
010F            844   ;        sourcecode.c:179: SFRPAGE = 0x00;
010F 75A700     845            mov     _SFRPAGE,#0x00
0112 22         846            ret
0113            847   ;------------------------------------------------------------
0113            848   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            849   ;------------------------------------------------------------
0113            850   ;pin                       Allocated to registers 
0113            851   ;------------------------------------------------------------
0113            852   ;        sourcecode.c:182: unsigned int ADC_at_Pin(unsigned char pin)
0113            853   ;        -----------------------------------------
0113            854   ;         function ADC_at_Pin
0113            855   ;        -----------------------------------------
0113            856   _ADC_at_Pin:
0113 8582BB     857            mov     _ADC0MX,dpl
0116            858   ;        sourcecode.c:185: ADINT = 0;
0116 C2ED       859            clr     _ADINT
0118            860   ;        sourcecode.c:186: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       861            setb    _ADBUSY
011A            862   ;        sourcecode.c:187: while (!ADINT); // Wait for conversion to complete
011A            863   L007001?:
011A 30ED68     864            jnb     _ADINT,L007001?
011D            865   ;        sourcecode.c:188: return (ADC0);
011D 85BD82     866            mov     dpl,_ADC0
0120 85BE83     867            mov     dph,(_ADC0 >> 8)
0123 22         868            ret
0124            869   ;------------------------------------------------------------
0124            870   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            871   ;------------------------------------------------------------
0124            872   ;pin                       Allocated to registers r2 
0124            873   ;------------------------------------------------------------
0124            874   ;        sourcecode.c:199: float Volts_at_Pin(unsigned char pin)
0124            875   ;        -----------------------------------------
0124            876   ;         function Volts_at_Pin
0124            877   ;        -----------------------------------------
0124            878   _Volts_at_Pin:
0124            879   ;        sourcecode.c:201: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     880            lcall   _ADC_at_Pin
0127 120000     881            lcall   ___uint2fs
012A AA82       882            mov     r2,dpl
012C AB83       883            mov     r3,dph
012E ACF0       884            mov     r4,b
0130 FD         885            mov     r5,a
0131 C002       886            push    ar2
0133 C003       887            push    ar3
0135 C004       888            push    ar4
0137 C005       889            push    ar5
0139 90923A     890            mov     dptr,#0x923A
013C 75F053     891            mov     b,#0x53
013F 7440       892            mov     a,#0x40
0141 120000     893            lcall   ___fsmul
0144 AA82       894            mov     r2,dpl
0146 AB83       895            mov     r3,dph
0148 ACF0       896            mov     r4,b
014A FD         897            mov     r5,a
014B E581       898            mov     a,sp
014D 24FC       899            add     a,#0xfc
014F F581       900            mov     sp,a
0151 E4         901            clr     a
0152 C0E0       902            push    acc
0154 74FC       903            mov     a,#0xFC
0156 C0E0       904            push    acc
0158 747F       905            mov     a,#0x7F
015A C0E0       906            push    acc
015C 7446       907            mov     a,#0x46
015E C0E0       908            push    acc
0160 8A82       909            mov     dpl,r2
0162 8B83       910            mov     dph,r3
0164 8CF0       911            mov     b,r4
0166 ED         912            mov     a,r5
0167 120000     913            lcall   ___fsdiv
016A AA82       914            mov     r2,dpl
016C AB83       915            mov     r3,dph
016E ACF0       916            mov     r4,b
0170 FD         917            mov     r5,a
0171 E581       918            mov     a,sp
0173 24FC       919            add     a,#0xfc
0175 F581       920            mov     sp,a
0177 8A82       921            mov     dpl,r2
0179 8B83       922            mov     dph,r3
017B 8CF0       923            mov     b,r4
017D ED         924            mov     a,r5
017E 22         925            ret
017F            926   ;------------------------------------------------------------
017F            927   ;Allocation info for local variables in function 'TIMER0_Init'
017F            928   ;------------------------------------------------------------
017F            929   ;------------------------------------------------------------
017F            930   ;        sourcecode.c:204: void TIMER0_Init(void)
017F            931   ;        -----------------------------------------
017F            932   ;         function TIMER0_Init
017F            933   ;        -----------------------------------------
017F            934   _TIMER0_Init:
017F            935   ;        sourcecode.c:206: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
017F 5389F0     936            anl     _TMOD,#0xF0
0182            937   ;        sourcecode.c:207: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0182 438901     938            orl     _TMOD,#0x01
0185            939   ;        sourcecode.c:208: TR0=0; // Stop Timer/Counter 0
0185 C28C       940            clr     _TR0
0187 22         941            ret
0188            942   ;------------------------------------------------------------
0188            943   ;Allocation info for local variables in function 'main'
0188            944   ;------------------------------------------------------------
0188            945   ;period                    Allocated with name '_main_period_1_61'
0188            946   ;Phase_Shift               Allocated to registers r2 r3 r4 r5 
0188            947   ;time_difference           Allocated to registers r2 r3 r4 r5 
0188            948   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0188            949   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0188            950   ;------------------------------------------------------------
0188            951   ;        sourcecode.c:217: void main (void)
0188            952   ;        -----------------------------------------
0188            953   ;         function main
0188            954   ;        -----------------------------------------
0188            955   _main:
0188            956   ;        sourcecode.c:223: TIMER0_Init();
0188 120000     957            lcall   _TIMER0_Init
018B            958   ;        sourcecode.c:225: waitms(500); // Give PuTTy a chance to start before sending
018B 9001F4     959            mov     dptr,#0x01F4
018E 120000     960            lcall   _waitms
0191            961   ;        sourcecode.c:226: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 74A8       962            mov     a,#__str_0
0193 C0E0       963            push    acc
0195 74D1       964            mov     a,#(__str_0 >> 8)
0197 C0E0       965            push    acc
0199 7480       966            mov     a,#0x80
019B C0E0       967            push    acc
019D 120000     968            lcall   _printf
01A0 1581       969            dec     sp
01A2 1581       970            dec     sp
01A4 1581       971            dec     sp
01A6            972   ;        sourcecode.c:231: __FILE__, __DATE__, __TIME__);
01A6            973   ;        sourcecode.c:230: "Compiled: %s, %s\n\n",
01A6 7428       974            mov     a,#__str_4
01A8 C0E0       975            push    acc
01AA 74D2       976            mov     a,#(__str_4 >> 8)
01AC C0E0       977            push    acc
01AE 7480       978            mov     a,#0x80
01B0 C0E0       979            push    acc
01B2 7468       980            mov     a,#__str_3
01B4 C0E0       981            push    acc
01B6 74D2       982            mov     a,#(__str_3 >> 8)
01B8 C0E0       983            push    acc
01BA 7480       984            mov     a,#0x80
01BC C0E0       985            push    acc
01BE 74A8       986            mov     a,#__str_2
01C0 C0E0       987            push    acc
01C2 74D2       988            mov     a,#(__str_2 >> 8)
01C4 C0E0       989            push    acc
01C6 7480       990            mov     a,#0x80
01C8 C0E0       991            push    acc
01CA 74E8       992            mov     a,#__str_1
01CC C0E0       993            push    acc
01CE 74D2       994            mov     a,#(__str_1 >> 8)
01D0 C0E0       995            push    acc
01D2 7480       996            mov     a,#0x80
01D4 C0E0       997            push    acc
01D6 120000     998            lcall   _printf
01D9 E581       999            mov     a,sp
01DB 24F4      1000            add     a,#0xf4
01DD F581      1001            mov     sp,a
01DF           1002   ;        sourcecode.c:233: InitPinADC(2, 1); // Configure P2.1 as analog input
01DF 75C801    1003            mov     _InitPinADC_PARM_2,#0x01
01E2 758202    1004            mov     dpl,#0x02
01E5 120000    1005            lcall   _InitPinADC
01E8           1006   ;        sourcecode.c:234: InitPinADC(2, 2); // Configure P2.2 as analog input
01E8 75C802    1007            mov     _InitPinADC_PARM_2,#0x02
01EB 758202    1008            mov     dpl,#0x02
01EE 120000    1009            lcall   _InitPinADC
01F1           1010   ;        sourcecode.c:236: InitADC();
01F1 120000    1011            lcall   _InitADC
01F4           1012   ;        sourcecode.c:238: while(1)
01F4           1013   L010038?:
01F4           1014   ;        sourcecode.c:241: TL0 = 0; 
01F4 758A00    1015            mov     _TL0,#0x00
01F7           1016   ;        sourcecode.c:242: TH0 = 0;
01F7 758C00    1017            mov     _TH0,#0x00
01FA           1018   ;        sourcecode.c:243: TF0 = 0;
01FA C28D      1019            clr     _TF0
01FC           1020   ;        sourcecode.c:244: overflow_count = 0;
01FC 755800    1021            mov     _overflow_count,#0x00
01FF           1022   ;        sourcecode.c:246: while(Volts_at_Pin(QFP32_MUX_P2_2) > 0); // Wait for the signal to be zero
01FF           1023   L010001?:
01FF 75820F    1024            mov     dpl,#0x0F
0202 120000    1025            lcall   _Volts_at_Pin
0205 AA82      1026            mov     r2,dpl
0207 AB83      1027            mov     r3,dph
0209 ACF0      1028            mov     r4,b
020B FD        1029            mov     r5,a
020C E4        1030            clr     a
020D C0E0      1031            push    acc
020F C0E0      1032            push    acc
0211 C0E0      1033            push    acc
0213 C0E0      1034            push    acc
0215 8A82      1035            mov     dpl,r2
0217 8B83      1036            mov     dph,r3
0219 8CF0      1037            mov     b,r4
021B ED        1038            mov     a,r5
021C 120000    1039            lcall   ___fsgt
021F AA82      1040            mov     r2,dpl
0221 E581      1041            mov     a,sp
0223 24FC      1042            add     a,#0xfc
0225 F581      1043            mov     sp,a
0227 EA        1044            mov     a,r2
0228 7000      1045            jnz     L010001?
022A           1046   ;        sourcecode.c:247: while(Volts_at_Pin(QFP32_MUX_P2_2) == 0); // Wait for the signal to be one
022A           1047   L010004?:
022A 75820F    1048            mov     dpl,#0x0F
022D 120000    1049            lcall   _Volts_at_Pin
0230 AA82      1050            mov     r2,dpl
0232 AB83      1051            mov     r3,dph
0234 ACF0      1052            mov     r4,b
0236 FD        1053            mov     r5,a
0237 EA        1054            mov     a,r2
0238 4B        1055            orl     a,r3
0239 4C        1056            orl     a,r4
023A 8DF0      1057            mov     b,r5
023C C2F7      1058            clr     b.7 ; Clear the sign bit
023E 45F0      1059            orl     a,b
0240 6000      1060            jz      L010004?
0242           1061   ;        sourcecode.c:248: TR0 = 1; // Start the timer
0242 D28C      1062            setb    _TR0
0244           1063   ;        sourcecode.c:249: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0) { // Wait for the signal to be zero
0244           1064   L010009?:
0244 75820F    1065            mov     dpl,#0x0F
0247 120000    1066            lcall   _Volts_at_Pin
024A AA82      1067            mov     r2,dpl
024C AB83      1068            mov     r3,dph
024E ACF0      1069            mov     r4,b
0250 FD        1070            mov     r5,a
0251 E4        1071            clr     a
0252 C0E0      1072            push    acc
0254 C0E0      1073            push    acc
0256 C0E0      1074            push    acc
0258 C0E0      1075            push    acc
025A 8A82      1076            mov     dpl,r2
025C 8B83      1077            mov     dph,r3
025E 8CF0      1078            mov     b,r4
0260 ED        1079            mov     a,r5
0261 120000    1080            lcall   ___fsgt
0264 AA82      1081            mov     r2,dpl
0266 E581      1082            mov     a,sp
0268 24FC      1083            add     a,#0xfc
026A F581      1084            mov     sp,a
026C EA        1085            mov     a,r2
026D 6000      1086            jz      L010014?
026F           1087   ;        sourcecode.c:250: if (TF0 == 1) { // Did the 16-bit timer overflow?
026F           1088   ;        sourcecode.c:251: TF0 = 0;
026F 108DA8    1089            jbc     _TF0,L010066?
0272 8000      1090            sjmp    L010009?
0274           1091   L010066?:
0274           1092   ;        sourcecode.c:252: overflow_count++;
0274 0558      1093            inc     _overflow_count
0276           1094   ;        sourcecode.c:255: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0) { // Wait for the signal to be one
0276 8000      1095            sjmp    L010009?
0278           1096   L010014?:
0278 75820F    1097            mov     dpl,#0x0F
027B 120000    1098            lcall   _Volts_at_Pin
027E AA82      1099            mov     r2,dpl
0280 AB83      1100            mov     r3,dph
0282 ACF0      1101            mov     r4,b
0284 FD        1102            mov     r5,a
0285 E4        1103            clr     a
0286 C0E0      1104            push    acc
0288 C0E0      1105            push    acc
028A C0E0      1106            push    acc
028C C0E0      1107            push    acc
028E 8A82      1108            mov     dpl,r2
0290 8B83      1109            mov     dph,r3
0292 8CF0      1110            mov     b,r4
0294 ED        1111            mov     a,r5
0295 120000    1112            lcall   ___fsgt
0298 AA82      1113            mov     r2,dpl
029A E581      1114            mov     a,sp
029C 24FC      1115            add     a,#0xfc
029E F581      1116            mov     sp,a
02A0 EA        1117            mov     a,r2
02A1 6000      1118            jz      L010016?
02A3           1119   ;        sourcecode.c:256: if (TF0 == 1) { // Did the 16-bit timer overflow?
02A3           1120   ;        sourcecode.c:257: TF0 = 0;
02A3 108D28    1121            jbc     _TF0,L010068?
02A6 8000      1122            sjmp    L010014?
02A8           1123   L010068?:
02A8           1124   ;        sourcecode.c:258: overflow_count++;
02A8 0558      1125            inc     _overflow_count
02AA 8000      1126            sjmp    L010014?
02AC           1127   L010016?:
02AC           1128   ;        sourcecode.c:261: TR0 = 0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
02AC C28C      1129            clr     _TR0
02AE           1130   ;        sourcecode.c:262: period = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
02AE 855882    1131            mov     dpl,_overflow_count
02B1 120000    1132            lcall   ___uchar2fs
02B4 AA82      1133            mov     r2,dpl
02B6 AB83      1134            mov     r3,dph
02B8 ACF0      1135            mov     r4,b
02BA FD        1136            mov     r5,a
02BB C002      1137            push    ar2
02BD C003      1138            push    ar3
02BF C004      1139            push    ar4
02C1 C005      1140            push    ar5
02C3 900000    1141            mov     dptr,#0x0000
02C6 75F080    1142            mov     b,#0x80
02C9 7447      1143            mov     a,#0x47
02CB 120000    1144            lcall   ___fsmul
02CE AA82      1145            mov     r2,dpl
02D0 AB83      1146            mov     r3,dph
02D2 ACF0      1147            mov     r4,b
02D4 FD        1148            mov     r5,a
02D5 E581      1149            mov     a,sp
02D7 24FC      1150            add     a,#0xfc
02D9 F581      1151            mov     sp,a
02DB 858C82    1152            mov     dpl,_TH0
02DE C002      1153            push    ar2
02E0 C003      1154            push    ar3
02E2 C004      1155            push    ar4
02E4 C005      1156            push    ar5
02E6 120000    1157            lcall   ___uchar2fs
02E9 AE82      1158            mov     r6,dpl
02EB AF83      1159            mov     r7,dph
02ED A8F0      1160            mov     r0,b
02EF F9        1161            mov     r1,a
02F0 C006      1162            push    ar6
02F2 C007      1163            push    ar7
02F4 C000      1164            push    ar0
02F6 C001      1165            push    ar1
02F8 900000    1166            mov     dptr,#0x0000
02FB 75F080    1167            mov     b,#0x80
02FE 7443      1168            mov     a,#0x43
0300 120000    1169            lcall   ___fsmul
0303 AE82      1170            mov     r6,dpl
0305 AF83      1171            mov     r7,dph
0307 A8F0      1172            mov     r0,b
0309 F9        1173            mov     r1,a
030A E581      1174            mov     a,sp
030C 24FC      1175            add     a,#0xfc
030E F581      1176            mov     sp,a
0310 D005      1177            pop     ar5
0312 D004      1178            pop     ar4
0314 D003      1179            pop     ar3
0316 D002      1180            pop     ar2
0318 C006      1181            push    ar6
031A C007      1182            push    ar7
031C C000      1183            push    ar0
031E C001      1184            push    ar1
0320 8A82      1185            mov     dpl,r2
0322 8B83      1186            mov     dph,r3
0324 8CF0      1187            mov     b,r4
0326 ED        1188            mov     a,r5
0327 120000    1189            lcall   ___fsadd
032A AA82      1190            mov     r2,dpl
032C AB83      1191            mov     r3,dph
032E ACF0      1192            mov     r4,b
0330 FD        1193            mov     r5,a
0331 E581      1194            mov     a,sp
0333 24FC      1195            add     a,#0xfc
0335 F581      1196            mov     sp,a
0337 AE8A      1197            mov     r6,_TL0
0339 7F00      1198            mov     r7,#0x00
033B 8E82      1199            mov     dpl,r6
033D 8F83      1200            mov     dph,r7
033F C002      1201            push    ar2
0341 C003      1202            push    ar3
0343 C004      1203            push    ar4
0345 C005      1204            push    ar5
0347 120000    1205            lcall   ___sint2fs
034A AE82      1206            mov     r6,dpl
034C AF83      1207            mov     r7,dph
034E A8F0      1208            mov     r0,b
0350 F9        1209            mov     r1,a
0351 D005      1210            pop     ar5
0353 D004      1211            pop     ar4
0355 D003      1212            pop     ar3
0357 D002      1213            pop     ar2
0359 C006      1214            push    ar6
035B C007      1215            push    ar7
035D C000      1216            push    ar0
035F C001      1217            push    ar1
0361 8A82      1218            mov     dpl,r2
0363 8B83      1219            mov     dph,r3
0365 8CF0      1220            mov     b,r4
0367 ED        1221            mov     a,r5
0368 120000    1222            lcall   ___fsadd
036B AA82      1223            mov     r2,dpl
036D AB83      1224            mov     r3,dph
036F ACF0      1225            mov     r4,b
0371 FD        1226            mov     r5,a
0372 E581      1227            mov     a,sp
0374 24FC      1228            add     a,#0xfc
0376 F581      1229            mov     sp,a
0378 C002      1230            push    ar2
037A C003      1231            push    ar3
037C C004      1232            push    ar4
037E C005      1233            push    ar5
0380 90F4FC    1234            mov     dptr,#0xF4FC
0383 75F032    1235            mov     b,#0x32
0386 7434      1236            mov     a,#0x34
0388 120000    1237            lcall   ___fsmul
038B 8582E0    1238            mov     _main_period_1_61,dpl
038E 8583E1    1239            mov     (_main_period_1_61 + 1),dph
0391 85F0E2    1240            mov     (_main_period_1_61 + 2),b
0394 F5E3      1241            mov     (_main_period_1_61 + 3),a
0396 E581      1242            mov     a,sp
0398 24FC      1243            add     a,#0xfc
039A F581      1244            mov     sp,a
039C           1245   ;        sourcecode.c:265: while(Volts_at_Pin(QFP32_MUX_P2_2) > 0);
039C           1246   L010017?:
039C 75820F    1247            mov     dpl,#0x0F
039F 120000    1248            lcall   _Volts_at_Pin
03A2 AE82      1249            mov     r6,dpl
03A4 AF83      1250            mov     r7,dph
03A6 A8F0      1251            mov     r0,b
03A8 F9        1252            mov     r1,a
03A9 E4        1253            clr     a
03AA C0E0      1254            push    acc
03AC C0E0      1255            push    acc
03AE C0E0      1256            push    acc
03B0 C0E0      1257            push    acc
03B2 8E82      1258            mov     dpl,r6
03B4 8F83      1259            mov     dph,r7
03B6 88F0      1260            mov     b,r0
03B8 E9        1261            mov     a,r1
03B9 120000    1262            lcall   ___fsgt
03BC AE82      1263            mov     r6,dpl
03BE E581      1264            mov     a,sp
03C0 24FC      1265            add     a,#0xfc
03C2 F581      1266            mov     sp,a
03C4 EE        1267            mov     a,r6
03C5 7000      1268            jnz     L010017?
03C7           1269   ;        sourcecode.c:266: while(Volts_at_Pin(QFP32_MUX_P2_2) == 0);
03C7           1270   L010020?:
03C7 75820F    1271            mov     dpl,#0x0F
03CA 120000    1272            lcall   _Volts_at_Pin
03CD AE82      1273            mov     r6,dpl
03CF AF83      1274            mov     r7,dph
03D1 A8F0      1275            mov     r0,b
03D3 F9        1276            mov     r1,a
03D4 EE        1277            mov     a,r6
03D5 4F        1278            orl     a,r7
03D6 48        1279            orl     a,r0
03D7 89F0      1280            mov     b,r1
03D9 C2F7      1281            clr     b.7 ; Clear the sign bit
03DB 45F0      1282            orl     a,b
03DD 6000      1283            jz      L010020?
03DF           1284   ;        sourcecode.c:267: waitms(period*1000/4);
03DF C0E0      1285            push    _main_period_1_61
03E1 C0E1      1286            push    (_main_period_1_61 + 1)
03E3 C0E2      1287            push    (_main_period_1_61 + 2)
03E5 C0E3      1288            push    (_main_period_1_61 + 3)
03E7 900000    1289            mov     dptr,#0x0000
03EA 75F07A    1290            mov     b,#0x7A
03ED 7444      1291            mov     a,#0x44
03EF 120000    1292            lcall   ___fsmul
03F2 AE82      1293            mov     r6,dpl
03F4 AF83      1294            mov     r7,dph
03F6 A8F0      1295            mov     r0,b
03F8 F9        1296            mov     r1,a
03F9 E581      1297            mov     a,sp
03FB 24FC      1298            add     a,#0xfc
03FD F581      1299            mov     sp,a
03FF C006      1300            push    ar6
0401 C007      1301            push    ar7
0403 C000      1302            push    ar0
0405 C001      1303            push    ar1
0407 E4        1304            clr     a
0408 C0E0      1305            push    acc
040A C0E0      1306            push    acc
040C 7480      1307            mov     a,#0x80
040E C0E0      1308            push    acc
0410 7440      1309            mov     a,#0x40
0412 C0E0      1310            push    acc
0414 8E82      1311            mov     dpl,r6
0416 8F83      1312            mov     dph,r7
0418 88F0      1313            mov     b,r0
041A E9        1314            mov     a,r1
041B 120000    1315            lcall   ___fsdiv
041E AA82      1316            mov     r2,dpl
0420 AB83      1317            mov     r3,dph
0422 ACF0      1318            mov     r4,b
0424 FD        1319            mov     r5,a
0425 E581      1320            mov     a,sp
0427 24FC      1321            add     a,#0xfc
0429 F581      1322            mov     sp,a
042B 8A82      1323            mov     dpl,r2
042D 8B83      1324            mov     dph,r3
042F 8CF0      1325            mov     b,r4
0431 ED        1326            mov     a,r5
0432 120000    1327            lcall   ___fs2uint
0435 858220    1328            mov     _main_sloc0_1_0,dpl
0438 858321    1329            mov  (_main_sloc0_1_0 + 1),dph
043B 120000    1330            lcall   _waitms
043E           1331   ;        sourcecode.c:268: v1_max = Volts_at_Pin(QFP32_MUX_P2_2) / 1.41621356237;
043E 75820F    1332            mov     dpl,#0x0F
0441 120000    1333            lcall   _Volts_at_Pin
0444 AC82      1334            mov     r4,dpl
0446 AD83      1335            mov     r5,dph
0448 AAF0      1336            mov     r2,b
044A FB        1337            mov     r3,a
044B 747C      1338            mov     a,#0x7C
044D C0E0      1339            push    acc
044F 7446      1340            mov     a,#0x46
0451 C0E0      1341            push    acc
0453 74B5      1342            mov     a,#0xB5
0455 C0E0      1343            push    acc
0457 743F      1344            mov     a,#0x3F
0459 C0E0      1345            push    acc
045B 8C82      1346            mov     dpl,r4
045D 8D83      1347            mov     dph,r5
045F 8AF0      1348            mov     b,r2
0461 EB        1349            mov     a,r3
0462 120000    1350            lcall   ___fsdiv
0465 858218    1351            mov     _v1_max,dpl
0468 858319    1352            mov     (_v1_max + 1),dph
046B 85F01A    1353            mov     (_v1_max + 2),b
046E F51B      1354            mov     (_v1_max + 3),a
0470 E581      1355            mov     a,sp
0472 24FC      1356            add     a,#0xfc
0474 F581      1357            mov     sp,a
0476 D001      1358            pop     ar1
0478 D000      1359            pop     ar0
047A D007      1360            pop     ar7
047C D006      1361            pop     ar6
047E           1362   ;        sourcecode.c:270: while(Volts_at_Pin(QFP32_MUX_P2_1) > 0); //wait for zero cross of other signal
047E           1363   L010023?:
047E 75820E    1364            mov     dpl,#0x0E
0481 C006      1365            push    ar6
0483 C007      1366            push    ar7
0485 C000      1367            push    ar0
0487 C001      1368            push    ar1
0489 120000    1369            lcall   _Volts_at_Pin
048C AA82      1370            mov     r2,dpl
048E AB83      1371            mov     r3,dph
0490 ACF0      1372            mov     r4,b
0492 FD        1373            mov     r5,a
0493 E4        1374            clr     a
0494 C0E0      1375            push    acc
0496 C0E0      1376            push    acc
0498 C0E0      1377            push    acc
049A C0E0      1378            push    acc
049C 8A82      1379            mov     dpl,r2
049E 8B83      1380            mov     dph,r3
04A0 8CF0      1381            mov     b,r4
04A2 ED        1382            mov     a,r5
04A3 120000    1383            lcall   ___fsgt
04A6 AA82      1384            mov     r2,dpl
04A8 E581      1385            mov     a,sp
04AA 24FC      1386            add     a,#0xfc
04AC F581      1387            mov     sp,a
04AE D001      1388            pop     ar1
04B0 D000      1389            pop     ar0
04B2 D007      1390            pop     ar7
04B4 D006      1391            pop     ar6
04B6 EA        1392            mov     a,r2
04B7 7000      1393            jnz     L010023?
04B9           1394   ;        sourcecode.c:271: while(Volts_at_Pin(QFP32_MUX_P2_1) == 0);
04B9           1395   L010026?:
04B9 75820E    1396            mov     dpl,#0x0E
04BC C006      1397            push    ar6
04BE C007      1398            push    ar7
04C0 C000      1399            push    ar0
04C2 C001      1400            push    ar1
04C4 120000    1401            lcall   _Volts_at_Pin
04C7 AA82      1402            mov     r2,dpl
04C9 AB83      1403            mov     r3,dph
04CB ACF0      1404            mov     r4,b
04CD FD        1405            mov     r5,a
04CE D001      1406            pop     ar1
04D0 D000      1407            pop     ar0
04D2 D007      1408            pop     ar7
04D4 D006      1409            pop     ar6
04D6 EA        1410            mov     a,r2
04D7 4B        1411            orl     a,r3
04D8 4C        1412            orl     a,r4
04D9 8DF0      1413            mov     b,r5
04DB C2F7      1414            clr     b.7 ; Clear the sign bit
04DD 45F0      1415            orl     a,b
04DF 6000      1416            jz      L010026?
04E1           1417   ;        sourcecode.c:272: waitms(period*1000/4);
04E1 852082    1418            mov     dpl,_main_sloc0_1_0
04E4 852183    1419            mov     dph,(_main_sloc0_1_0 + 1)
04E7 C006      1420            push    ar6
04E9 C007      1421            push    ar7
04EB C000      1422            push    ar0
04ED C001      1423            push    ar1
04EF 120000    1424            lcall   _waitms
04F2           1425   ;        sourcecode.c:273: v2_max = Volts_at_Pin(QFP32_MUX_P2_1) / 1.41621356237;
04F2 75820E    1426            mov     dpl,#0x0E
04F5 120000    1427            lcall   _Volts_at_Pin
04F8 AA82      1428            mov     r2,dpl
04FA AB83      1429            mov     r3,dph
04FC ACF0      1430            mov     r4,b
04FE FD        1431            mov     r5,a
04FF 747C      1432            mov     a,#0x7C
0501 C0E0      1433            push    acc
0503 7446      1434            mov     a,#0x46
0505 C0E0      1435            push    acc
0507 74B5      1436            mov     a,#0xB5
0509 C0E0      1437            push    acc
050B 743F      1438            mov     a,#0x3F
050D C0E0      1439            push    acc
050F 8A82      1440            mov     dpl,r2
0511 8B83      1441            mov     dph,r3
0513 8CF0      1442            mov     b,r4
0515 ED        1443            mov     a,r5
0516 120000    1444            lcall   ___fsdiv
0519 8582D8    1445            mov     _v2_max,dpl
051C 8583D9    1446            mov     (_v2_max + 1),dph
051F 85F0DA    1447            mov     (_v2_max + 2),b
0522 F5DB      1448            mov     (_v2_max + 3),a
0524 E581      1449            mov     a,sp
0526 24FC      1450            add     a,#0xfc
0528 F581      1451            mov     sp,a
052A D001      1452            pop     ar1
052C D000      1453            pop     ar0
052E D007      1454            pop     ar7
0530 D006      1455            pop     ar6
0532           1456   ;        sourcecode.c:277: TR0=0; // Stop timer 0
0532 C28C      1457            clr     _TR0
0534           1458   ;        sourcecode.c:278: overflow_count = 0;
0534 755800    1459            mov     _overflow_count,#0x00
0537           1460   ;        sourcecode.c:279: TH0=0; TL0=0; TF0 = 0;                // Reset the timer
0537 758C00    1461            mov     _TH0,#0x00
053A 758A00    1462            mov     _TL0,#0x00
053D C28D      1463            clr     _TF0
053F           1464   ;        sourcecode.c:282: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0);                     // Wait for reference signal to be zero
053F           1465   L010029?:
053F 75820F    1466            mov     dpl,#0x0F
0542 C006      1467            push    ar6
0544 C007      1468            push    ar7
0546 C000      1469            push    ar0
0548 C001      1470            push    ar1
054A 120000    1471            lcall   _Volts_at_Pin
054D AA82      1472            mov     r2,dpl
054F AB83      1473            mov     r3,dph
0551 ACF0      1474            mov     r4,b
0553 FD        1475            mov     r5,a
0554 E4        1476            clr     a
0555 C0E0      1477            push    acc
0557 C0E0      1478            push    acc
0559 C0E0      1479            push    acc
055B C0E0      1480            push    acc
055D 8A82      1481            mov     dpl,r2
055F 8B83      1482            mov     dph,r3
0561 8CF0      1483            mov     b,r4
0563 ED        1484            mov     a,r5
0564 120000    1485            lcall   ___fsgt
0567 AA82      1486            mov     r2,dpl
0569 E581      1487            mov     a,sp
056B 24FC      1488            add     a,#0xfc
056D F581      1489            mov     sp,a
056F D001      1490            pop     ar1
0571 D000      1491            pop     ar0
0573 D007      1492            pop     ar7
0575 D006      1493            pop     ar6
0577 EA        1494            mov     a,r2
0578 7000      1495            jnz     L010029?
057A           1496   ;        sourcecode.c:283: TR0=1; // start timer
057A D28C      1497            setb    _TR0
057C           1498   ;        sourcecode.c:285: while (Volts_at_Pin(QFP32_MUX_P2_1) > 0) { // Wait for test signal to hit zero
057C           1499   L010034?:
057C 75820E    1500            mov     dpl,#0x0E
057F C006      1501            push    ar6
0581 C007      1502            push    ar7
0583 C000      1503            push    ar0
0585 C001      1504            push    ar1
0587 120000    1505            lcall   _Volts_at_Pin
058A AA82      1506            mov     r2,dpl
058C AB83      1507            mov     r3,dph
058E ACF0      1508            mov     r4,b
0590 FD        1509            mov     r5,a
0591 E4        1510            clr     a
0592 C0E0      1511            push    acc
0594 C0E0      1512            push    acc
0596 C0E0      1513            push    acc
0598 C0E0      1514            push    acc
059A 8A82      1515            mov     dpl,r2
059C 8B83      1516            mov     dph,r3
059E 8CF0      1517            mov     b,r4
05A0 ED        1518            mov     a,r5
05A1 120000    1519            lcall   ___fsgt
05A4 AA82      1520            mov     r2,dpl
05A6 E581      1521            mov     a,sp
05A8 24FC      1522            add     a,#0xfc
05AA F581      1523            mov     sp,a
05AC D001      1524            pop     ar1
05AE D000      1525            pop     ar0
05B0 D007      1526            pop     ar7
05B2 D006      1527            pop     ar6
05B4 EA        1528            mov     a,r2
05B5 6000      1529            jz      L010036?
05B7           1530   ;        sourcecode.c:286: if (TF0 == 1) { // Did the 16-bit timer overflow?
05B7           1531   ;        sourcecode.c:287: TF0 = 0;
05B7 108D28    1532            jbc     _TF0,L010075?
05BA 8000      1533            sjmp    L010034?
05BC           1534   L010075?:
05BC           1535   ;        sourcecode.c:288: overflow_count++;
05BC 0558      1536            inc     _overflow_count
05BE 8000      1537            sjmp    L010034?
05C0           1538   L010036?:
05C0           1539   ;        sourcecode.c:291: TR0=0; // stop timer
05C0 C28C      1540            clr     _TR0
05C2           1541   ;        sourcecode.c:296: time_difference = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
05C2 855882    1542            mov     dpl,_overflow_count
05C5 C006      1543            push    ar6
05C7 C007      1544            push    ar7
05C9 C000      1545            push    ar0
05CB C001      1546            push    ar1
05CD 120000    1547            lcall   ___uchar2fs
05D0 AA82      1548            mov     r2,dpl
05D2 AB83      1549            mov     r3,dph
05D4 ACF0      1550            mov     r4,b
05D6 FD        1551            mov     r5,a
05D7 C002      1552            push    ar2
05D9 C003      1553            push    ar3
05DB C004      1554            push    ar4
05DD C005      1555            push    ar5
05DF 900000    1556            mov     dptr,#0x0000
05E2 75F080    1557            mov     b,#0x80
05E5 7447      1558            mov     a,#0x47
05E7 120000    1559            lcall   ___fsmul
05EA 858260    1560            mov     _main_sloc1_1_0,dpl
05ED 858361    1561            mov     (_main_sloc1_1_0 + 1),dph
05F0 85F062    1562            mov     (_main_sloc1_1_0 + 2),b
05F3 F563      1563            mov     (_main_sloc1_1_0 + 3),a
05F5 E581      1564            mov     a,sp
05F7 24FC      1565            add     a,#0xfc
05F9 F581      1566            mov     sp,a
05FB 858C82    1567            mov     dpl,_TH0
05FE 120000    1568            lcall   ___uchar2fs
0601 AA82      1569            mov     r2,dpl
0603 AB83      1570            mov     r3,dph
0605 ACF0      1571            mov     r4,b
0607 FD        1572            mov     r5,a
0608 C002      1573            push    ar2
060A C003      1574            push    ar3
060C C004      1575            push    ar4
060E C005      1576            push    ar5
0610 900000    1577            mov     dptr,#0x0000
0613 75F080    1578            mov     b,#0x80
0616 7443      1579            mov     a,#0x43
0618 120000    1580            lcall   ___fsmul
061B AA82      1581            mov     r2,dpl
061D AB83      1582            mov     r3,dph
061F ACF0      1583            mov     r4,b
0621 FD        1584            mov     r5,a
0622 E581      1585            mov     a,sp
0624 24FC      1586            add     a,#0xfc
0626 F581      1587            mov     sp,a
0628 C002      1588            push    ar2
062A C003      1589            push    ar3
062C C004      1590            push    ar4
062E C005      1591            push    ar5
0630 856082    1592            mov     dpl,_main_sloc1_1_0
0633 856183    1593            mov     dph,(_main_sloc1_1_0 + 1)
0636 8562F0    1594            mov     b,(_main_sloc1_1_0 + 2)
0639 E563      1595            mov     a,(_main_sloc1_1_0 + 3)
063B 120000    1596            lcall   ___fsadd
063E 858260    1597            mov     _main_sloc1_1_0,dpl
0641 858361    1598            mov     (_main_sloc1_1_0 + 1),dph
0644 85F062    1599            mov     (_main_sloc1_1_0 + 2),b
0647 F563      1600            mov     (_main_sloc1_1_0 + 3),a
0649 E581      1601            mov     a,sp
064B 24FC      1602            add     a,#0xfc
064D F581      1603            mov     sp,a
064F AA8A      1604            mov     r2,_TL0
0651 7B00      1605            mov     r3,#0x00
0653 8A82      1606            mov     dpl,r2
0655 8B83      1607            mov     dph,r3
0657 120000    1608            lcall   ___sint2fs
065A AA82      1609            mov     r2,dpl
065C AB83      1610            mov     r3,dph
065E ACF0      1611            mov     r4,b
0660 FD        1612            mov     r5,a
0661 C002      1613            push    ar2
0663 C003      1614            push    ar3
0665 C004      1615            push    ar4
0667 C005      1616            push    ar5
0669 856082    1617            mov     dpl,_main_sloc1_1_0
066C 856183    1618            mov     dph,(_main_sloc1_1_0 + 1)
066F 8562F0    1619            mov     b,(_main_sloc1_1_0 + 2)
0672 E563      1620            mov     a,(_main_sloc1_1_0 + 3)
0674 120000    1621            lcall   ___fsadd
0677 AA82      1622            mov     r2,dpl
0679 AB83      1623            mov     r3,dph
067B ACF0      1624            mov     r4,b
067D FD        1625            mov     r5,a
067E E581      1626            mov     a,sp
0680 24FC      1627            add     a,#0xfc
0682 F581      1628            mov     sp,a
0684 C002      1629            push    ar2
0686 C003      1630            push    ar3
0688 C004      1631            push    ar4
068A C005      1632            push    ar5
068C 90F4FC    1633            mov     dptr,#0xF4FC
068F 75F032    1634            mov     b,#0x32
0692 7434      1635            mov     a,#0x34
0694 120000    1636            lcall   ___fsmul
0697 AA82      1637            mov     r2,dpl
0699 AB83      1638            mov     r3,dph
069B ACF0      1639            mov     r4,b
069D FD        1640            mov     r5,a
069E E581      1641            mov     a,sp
06A0 24FC      1642            add     a,#0xfc
06A2 F581      1643            mov     sp,a
06A4           1644   ;        sourcecode.c:297: Phase_Shift = (time_difference * 360.0) / period;   // we now have the phase shift   
06A4 C002      1645            push    ar2
06A6 C003      1646            push    ar3
06A8 C004      1647            push    ar4
06AA C005      1648            push    ar5
06AC 900000    1649            mov     dptr,#0x0000
06AF 75F0B4    1650            mov     b,#0xB4
06B2 7443      1651            mov     a,#0x43
06B4 120000    1652            lcall   ___fsmul
06B7 AA82      1653            mov     r2,dpl
06B9 AB83      1654            mov     r3,dph
06BB ACF0      1655            mov     r4,b
06BD FD        1656            mov     r5,a
06BE E581      1657            mov     a,sp
06C0 24FC      1658            add     a,#0xfc
06C2 F581      1659            mov     sp,a
06C4 C0E0      1660            push    _main_period_1_61
06C6 C0E1      1661            push    (_main_period_1_61 + 1)
06C8 C0E2      1662            push    (_main_period_1_61 + 2)
06CA C0E3      1663            push    (_main_period_1_61 + 3)
06CC 8A82      1664            mov     dpl,r2
06CE 8B83      1665            mov     dph,r3
06D0 8CF0      1666            mov     b,r4
06D2 ED        1667            mov     a,r5
06D3 120000    1668            lcall   ___fsdiv
06D6 AA82      1669            mov     r2,dpl
06D8 AB83      1670            mov     r3,dph
06DA ACF0      1671            mov     r4,b
06DC FD        1672            mov     r5,a
06DD E581      1673            mov     a,sp
06DF 24FC      1674            add     a,#0xfc
06E1 F581      1675            mov     sp,a
06E3 D001      1676            pop     ar1
06E5 D000      1677            pop     ar0
06E7 D007      1678            pop     ar7
06E9 D006      1679            pop     ar6
06EB           1680   ;        sourcecode.c:299: printf("T=%fms, Phase: %f, v1_Max:%f, v2_Max:%f\r", 
06EB C0D8      1681            push    _v2_max
06ED C0D9      1682            push    (_v2_max + 1)
06EF C0DA      1683            push    (_v2_max + 2)
06F1 C0DB      1684            push    (_v2_max + 3)
06F3 C018      1685            push    _v1_max
06F5 C019      1686            push    (_v1_max + 1)
06F7 C01A      1687            push    (_v1_max + 2)
06F9 C01B      1688            push    (_v1_max + 3)
06FB C002      1689            push    ar2
06FD C003      1690            push    ar3
06FF C004      1691            push    ar4
0701 C005      1692            push    ar5
0703 C006      1693            push    ar6
0705 C007      1694            push    ar7
0707 C000      1695            push    ar0
0709 C001      1696            push    ar1
070B 7468      1697            mov     a,#__str_5
070D C0E0      1698            push    acc
070F 74D8      1699            mov     a,#(__str_5 >> 8)
0711 C0E0      1700            push    acc
0713 7480      1701            mov     a,#0x80
0715 C0E0      1702            push    acc
0717 120000    1703            lcall   _printf
071A E581      1704            mov     a,sp
071C 24ED      1705            add     a,#0xed
071E F581      1706            mov     sp,a
0720 020000    1707            ljmp    L010038?
0723           1708            rseg R_CSEG
0723           1709   
0000           1710            rseg R_XINIT
0000           1711   
0000           1712            rseg R_CONST
0000           1713   __str_0:
0000 1B        1714            db 0x1B
0001 5B324A    1715            db '[2J'
0004 00        1716            db 0x00
0005           1717   __str_1:
0005 41444320  1718            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1719            db 0x0A
0016 46696C65  1720            db 'File: %s'
     3A202573
001E 0A        1721            db 0x0A
001F 436F6D70  1722            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1723            db 0x0A
0030 0A        1724            db 0x0A
0031 00        1725            db 0x00
0032           1726   __str_2:
0032 736F7572  1727            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1728            db 0x00
003F           1729   __str_3:
003F 4D617220  1730            db 'Mar  6 2024'
     20362032
     303234
004A 00        1731            db 0x00
004B           1732   __str_4:
004B 32323A34  1733            db '22:46:24'
     363A3234
0053 00        1734            db 0x00
0054           1735   __str_5:
0054 543D2566  1736            db 'T=%fms, Phase: %f, v1_Max:%f, v2_Max:%f'
     6D732C20
     50686173
     653A2025
     662C2076
     315F4D61
     783A2566
     2C207632
     5F4D6178
     3A2566
007B 0D        1737            db 0x0D
007C 00        1738            db 0x00
007D           1739   
0003           1740            CSEG
0003           1741   
0003           1742   end
