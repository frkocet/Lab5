0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 05 10:52:46 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _Get_ADC
0000             32            public _ADC_at_Pin
0000             33            public _InitPinADC
0000             34            public _waitms
0000             35            public _Timer3us
0000             36            public _InitADC
0000             37            public __c51_external_startup
0000             38            public _v2
0000             39            public _v1
0000             40            public _v2_max
0000             41            public _v1_max
0000             42            public _v2_last
0000             43            public _v1_last
0000             44            public _Period
0000             45            public _F
0000             46            public _count
0000             47            public _overflow_count
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _overflow_count:
0000            497            ds 1
0001            498   _count:
0001            499            ds 2
0003            500   _F:
0003            501            ds 4
0007            502   _Period:
0007            503            ds 4
000B            504   _v1_last:
000B            505            ds 4
000F            506   _v2_last:
000F            507            ds 4
0013            508   _v1_max:
0013            509            ds 4
0017            510   _v2_max:
0017            511            ds 4
001B            512   _v1:
001B            513            ds 4
001F            514   _v2:
001F            515            ds 4
0023            516   ;--------------------------------------------------------
0023            517   ; overlayable items in internal ram 
0023            518   ;--------------------------------------------------------
0000            519            rseg    R_OSEG
0000            520            rseg    R_OSEG
0000            521   _InitPinADC_PARM_2:
0000            522            ds 1
0001            523            rseg    R_OSEG
0001            524   ;--------------------------------------------------------
0001            525   ; indirectly addressable internal ram data
0001            526   ;--------------------------------------------------------
0000            527            rseg R_ISEG
0000            528   ;--------------------------------------------------------
0000            529   ; absolute internal ram data
0000            530   ;--------------------------------------------------------
0000            531            DSEG
0000            532   ;--------------------------------------------------------
0000            533   ; bit data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_BSEG
0000            536   ;--------------------------------------------------------
0000            537   ; paged external ram data
0000            538   ;--------------------------------------------------------
0000            539            rseg R_PSEG
0000            540   ;--------------------------------------------------------
0000            541   ; external ram data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_XSEG
0000            544   ;--------------------------------------------------------
0000            545   ; absolute external ram data
0000            546   ;--------------------------------------------------------
0000            547            XSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external initialized ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_IXSEG
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_CSEG
0000            555   ;--------------------------------------------------------
0000            556   ; Reset entry point and interrupt vectors
0000            557   ;--------------------------------------------------------
0000            558            CSEG at 0x0000
0000 020000     559            ljmp    _crt0
0003            560   ;--------------------------------------------------------
0003            561   ; global & static initialisations
0003            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570   ;        sourcecode.c:18: float v1_last = 0; float v2_last = 0; float v1_max = 0; float v2_max = 0;
0000 759800     571            mov     _v1_last,#0x00
0003 759900     572            mov     (_v1_last + 1),#0x00
0006 759A00     573            mov     (_v1_last + 2),#0x00
0009 759B00     574            mov     (_v1_last + 3),#0x00
000C            575   ;        sourcecode.c:18: float v1 = 0; float v2 = 0;
000C 755800     576            mov     _v2_last,#0x00
000F 755900     577            mov     (_v2_last + 1),#0x00
0012 755A00     578            mov     (_v2_last + 2),#0x00
0015 755B00     579            mov     (_v2_last + 3),#0x00
0018            580   ;        sourcecode.c:18: float v1_last = 0; float v2_last = 0; float v1_max = 0; float v2_max = 0;
0018 751800     581            mov     _v1_max,#0x00
001B 751900     582            mov     (_v1_max + 1),#0x00
001E 751A00     583            mov     (_v1_max + 2),#0x00
0021 751B00     584            mov     (_v1_max + 3),#0x00
0024            585   ;        sourcecode.c:18: float v1 = 0; float v2 = 0;
0024 75D800     586            mov     _v2_max,#0x00
0027 75D900     587            mov     (_v2_max + 1),#0x00
002A 75DA00     588            mov     (_v2_max + 2),#0x00
002D 75DB00     589            mov     (_v2_max + 3),#0x00
0030            590   ;        sourcecode.c:19: 
0030 759800     591            mov     _v1,#0x00
0033 759900     592            mov     (_v1 + 1),#0x00
0036 759A00     593            mov     (_v1 + 2),#0x00
0039 759B00     594            mov     (_v1 + 3),#0x00
003C            595   ;        sourcecode.c:19: float v1 = 0; float v2 = 0;
003C 755800     596            mov     _v2,#0x00
003F 755900     597            mov     (_v2 + 1),#0x00
0042 755A00     598            mov     (_v2 + 2),#0x00
0045 755B00     599            mov     (_v2 + 3),#0x00
0048            600            ; The linker places a 'ret' at the end of segment R_DINIT.
0048            601   ;--------------------------------------------------------
0048            602   ; code
0048            603   ;--------------------------------------------------------
0000            604            rseg R_CSEG
0000            605   ;------------------------------------------------------------
0000            606   ;Allocation info for local variables in function '_c51_external_startup'
0000            607   ;------------------------------------------------------------
0000            608   ;------------------------------------------------------------
0000            609   ;        sourcecode.c:21: char _c51_external_startup (void)
0000            610   ;        -----------------------------------------
0000            611   ;         function _c51_external_startup
0000            612   ;        -----------------------------------------
0000            613   __c51_external_startup:
0000            614            using   0
0000            615   ;        sourcecode.c:24: SFRPAGE = 0x00;
0000 75A700     616            mov     _SFRPAGE,#0x00
0003            617   ;        sourcecode.c:25: WDTCN = 0xDE; //First key
0003 7597DE     618            mov     _WDTCN,#0xDE
0006            619   ;        sourcecode.c:26: WDTCN = 0xAD; //Second key
0006 7597AD     620            mov     _WDTCN,#0xAD
0009            621   ;        sourcecode.c:28: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     622            mov     _VDM0CN,#0x80
000C            623   ;        sourcecode.c:29: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     624            mov     _RSTSRC,#0x06
000F            625   ;        sourcecode.c:36: SFRPAGE = 0x10;
000F 75A710     626            mov     _SFRPAGE,#0x10
0012            627   ;        sourcecode.c:37: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     628            mov     _PFE0CN,#0x20
0015            629   ;        sourcecode.c:38: SFRPAGE = 0x00;
0015 75A700     630            mov     _SFRPAGE,#0x00
0018            631   ;        sourcecode.c:59: CLKSEL = 0x00;
0018 75A900     632            mov     _CLKSEL,#0x00
001B            633   ;        sourcecode.c:60: CLKSEL = 0x00;
001B 75A900     634            mov     _CLKSEL,#0x00
001E            635   ;        sourcecode.c:61: while ((CLKSEL & 0x80) == 0);
001E            636   L002001?:
001E E5A9       637            mov     a,_CLKSEL
0020 30E768     638            jnb     acc.7,L002001?
0023            639   ;        sourcecode.c:62: CLKSEL = 0x03;
0023 75A903     640            mov     _CLKSEL,#0x03
0026            641   ;        sourcecode.c:63: CLKSEL = 0x03;
0026 75A903     642            mov     _CLKSEL,#0x03
0029            643   ;        sourcecode.c:64: while ((CLKSEL & 0x80) == 0);
0029            644   L002004?:
0029 E5A9       645            mov     a,_CLKSEL
002B 30E7E8     646            jnb     acc.7,L002004?
002E            647   ;        sourcecode.c:69: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     648            orl     _P0MDOUT,#0x10
0031            649   ;        sourcecode.c:70: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     650            mov     _XBR0,#0x01
0034            651   ;        sourcecode.c:71: XBR1     = 0X00;
0034 75E200     652            mov     _XBR1,#0x00
0037            653   ;        sourcecode.c:72: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     654            mov     _XBR2,#0x40
003A            655   ;        sourcecode.c:78: SCON0 = 0x10;
003A 759810     656            mov     _SCON0,#0x10
003D            657   ;        sourcecode.c:79: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     658            mov     _TH1,#0xE6
0040            659   ;        sourcecode.c:80: TL1 = TH1;      // Init Timer1
0040 858D8B     660            mov     _TL1,_TH1
0043            661   ;        sourcecode.c:81: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     662            anl     _TMOD,#0x0F
0046            663   ;        sourcecode.c:82: TMOD |=  0x20;                       
0046 438920     664            orl     _TMOD,#0x20
0049            665   ;        sourcecode.c:83: TR1 = 1; // START Timer1
0049 D28E       666            setb    _TR1
004B            667   ;        sourcecode.c:84: TI = 1;  // Indicate TX0 ready
004B D299       668            setb    _TI
004D            669   ;        sourcecode.c:86: return 0;
004D 758200     670            mov     dpl,#0x00
0050 22         671            ret
0051            672   ;------------------------------------------------------------
0051            673   ;Allocation info for local variables in function 'InitADC'
0051            674   ;------------------------------------------------------------
0051            675   ;------------------------------------------------------------
0051            676   ;        sourcecode.c:89: void InitADC (void)
0051            677   ;        -----------------------------------------
0051            678   ;         function InitADC
0051            679   ;        -----------------------------------------
0051            680   _InitADC:
0051            681   ;        sourcecode.c:91: SFRPAGE = 0x00;
0051 75A700     682            mov     _SFRPAGE,#0x00
0054            683   ;        sourcecode.c:92: ADEN=0; // Disable ADC
0054 C2EF       684            clr     _ADEN
0056            685   ;        sourcecode.c:97: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     686            mov     _ADC0CN1,#0x80
0059            687   ;        sourcecode.c:101: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     688            mov     _ADC0CF0,#0x20
005C            689   ;        sourcecode.c:105: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     690            mov     _ADC0CF1,#0x1E
005F            691   ;        sourcecode.c:114: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     692            mov     _ADC0CN0,#0x00
0062            693   ;        sourcecode.c:119: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     694            mov     _ADC0CF2,#0x3F
0065            695   ;        sourcecode.c:123: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     696            mov     _ADC0CN2,#0x00
0068            697   ;        sourcecode.c:125: ADEN=1; // Enable ADC
0068 D2EF       698            setb    _ADEN
006A 22         699            ret
006B            700   ;------------------------------------------------------------
006B            701   ;Allocation info for local variables in function 'Timer3us'
006B            702   ;------------------------------------------------------------
006B            703   ;us                        Allocated to registers r2 
006B            704   ;i                         Allocated to registers r3 
006B            705   ;------------------------------------------------------------
006B            706   ;        sourcecode.c:129: void Timer3us(unsigned char us)
006B            707   ;        -----------------------------------------
006B            708   ;         function Timer3us
006B            709   ;        -----------------------------------------
006B            710   _Timer3us:
006B AA82       711            mov     r2,dpl
006D            712   ;        sourcecode.c:134: CKCON0|=0b_0100_0000;
006D 438E40     713            orl     _CKCON0,#0x40
0070            714   ;        sourcecode.c:136: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     715            mov     _TMR3RL,#0xB8
0073 7593FF     716            mov     (_TMR3RL >> 8),#0xFF
0076            717   ;        sourcecode.c:137: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     718            mov     _TMR3,_TMR3RL
0079 859395     719            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            720   ;        sourcecode.c:139: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     721            mov     _TMR3CN0,#0x04
007F            722   ;        sourcecode.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       723            mov     r3,#0x00
0081            724   L004004?:
0081 C3         725            clr     c
0082 EB         726            mov     a,r3
0083 9A         727            subb    a,r2
0084 5000       728            jnc     L004007?
0086            729   ;        sourcecode.c:142: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            730   L004001?:
0086 E591       731            mov     a,_TMR3CN0
0088 30E7E8     732            jnb     acc.7,L004001?
008B            733   ;        sourcecode.c:143: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     734            anl     _TMR3CN0,#0x7F
008E            735   ;        sourcecode.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         736            inc     r3
008F 8000       737            sjmp    L004004?
0091            738   L004007?:
0091            739   ;        sourcecode.c:145: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     740            mov     _TMR3CN0,#0x00
0094 22         741            ret
0095            742   ;------------------------------------------------------------
0095            743   ;Allocation info for local variables in function 'waitms'
0095            744   ;------------------------------------------------------------
0095            745   ;ms                        Allocated to registers r2 r3 
0095            746   ;j                         Allocated to registers r4 r5 
0095            747   ;k                         Allocated to registers r6 
0095            748   ;------------------------------------------------------------
0095            749   ;        sourcecode.c:148: void waitms (unsigned int ms)
0095            750   ;        -----------------------------------------
0095            751   ;         function waitms
0095            752   ;        -----------------------------------------
0095            753   _waitms:
0095 AA82       754            mov     r2,dpl
0097 AB83       755            mov     r3,dph
0099            756   ;        sourcecode.c:152: for(j=0; j<ms; j++)
0099 7C00       757            mov     r4,#0x00
009B 7D00       758            mov     r5,#0x00
009D            759   L005005?:
009D C3         760            clr     c
009E EC         761            mov     a,r4
009F 9A         762            subb    a,r2
00A0 ED         763            mov     a,r5
00A1 9B         764            subb    a,r3
00A2 5000       765            jnc     L005009?
00A4            766   ;        sourcecode.c:153: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       767            mov     r6,#0x00
00A6            768   L005001?:
00A6 BE0428     769            cjne    r6,#0x04,L005018?
00A9            770   L005018?:
00A9 5000       771            jnc     L005007?
00AB 7582FA     772            mov     dpl,#0xFA
00AE C002       773            push    ar2
00B0 C003       774            push    ar3
00B2 C004       775            push    ar4
00B4 C005       776            push    ar5
00B6 C006       777            push    ar6
00B8 120000     778            lcall   _Timer3us
00BB D006       779            pop     ar6
00BD D005       780            pop     ar5
00BF D004       781            pop     ar4
00C1 D003       782            pop     ar3
00C3 D002       783            pop     ar2
00C5 0E         784            inc     r6
00C6 8000       785            sjmp    L005001?
00C8            786   L005007?:
00C8            787   ;        sourcecode.c:152: for(j=0; j<ms; j++)
00C8 0C         788            inc     r4
00C9 BC0068     789            cjne    r4,#0x00,L005005?
00CC 0D         790            inc     r5
00CD 8000       791            sjmp    L005005?
00CF            792   L005009?:
00CF 22         793            ret
00D0            794   ;------------------------------------------------------------
00D0            795   ;Allocation info for local variables in function 'InitPinADC'
00D0            796   ;------------------------------------------------------------
00D0            797   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            798   ;portno                    Allocated to registers r2 
00D0            799   ;mask                      Allocated to registers r3 
00D0            800   ;------------------------------------------------------------
00D0            801   ;        sourcecode.c:158: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            802   ;        -----------------------------------------
00D0            803   ;         function InitPinADC
00D0            804   ;        -----------------------------------------
00D0            805   _InitPinADC:
00D0 AA82       806            mov     r2,dpl
00D2            807   ;        sourcecode.c:162: mask=1<<pinno;
00D2 8588F0     808            mov     b,_InitPinADC_PARM_2
00D5 05F0       809            inc     b
00D7 7401       810            mov     a,#0x01
00D9 8000       811            sjmp    L006013?
00DB            812   L006011?:
00DB 25E0       813            add     a,acc
00DD            814   L006013?:
00DD D5F028     815            djnz    b,L006011?
00E0 FB         816            mov     r3,a
00E1            817   ;        sourcecode.c:164: SFRPAGE = 0x20;
00E1 75A720     818            mov     _SFRPAGE,#0x20
00E4            819   ;        sourcecode.c:165: switch (portno)
00E4 BA0068     820            cjne    r2,#0x00,L006014?
00E7 8000       821            sjmp    L006001?
00E9            822   L006014?:
00E9 BA01E8     823            cjne    r2,#0x01,L006015?
00EC 8000       824            sjmp    L006002?
00EE            825   L006015?:
00EE            826   ;        sourcecode.c:167: case 0:
00EE BA0268     827            cjne    r2,#0x02,L006005?
00F1 8000       828            sjmp    L006003?
00F3            829   L006001?:
00F3            830   ;        sourcecode.c:168: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         831            mov     a,r3
00F4 F4         832            cpl     a
00F5 FA         833            mov     r2,a
00F6 52F1       834            anl     _P0MDIN,a
00F8            835   ;        sourcecode.c:169: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         836            mov     a,r3
00F9 42D4       837            orl     _P0SKIP,a
00FB            838   ;        sourcecode.c:170: break;
00FB            839   ;        sourcecode.c:171: case 1:
00FB 8000       840            sjmp    L006005?
00FD            841   L006002?:
00FD            842   ;        sourcecode.c:172: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         843            mov     a,r3
00FE F4         844            cpl     a
00FF FA         845            mov     r2,a
0100 52F2       846            anl     _P1MDIN,a
0102            847   ;        sourcecode.c:173: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         848            mov     a,r3
0103 42D5       849            orl     _P1SKIP,a
0105            850   ;        sourcecode.c:174: break;
0105            851   ;        sourcecode.c:175: case 2:
0105 8000       852            sjmp    L006005?
0107            853   L006003?:
0107            854   ;        sourcecode.c:176: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         855            mov     a,r3
0108 F4         856            cpl     a
0109 FA         857            mov     r2,a
010A 52F3       858            anl     _P2MDIN,a
010C            859   ;        sourcecode.c:177: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         860            mov     a,r3
010D 42CC       861            orl     _P2SKIP,a
010F            862   ;        sourcecode.c:181: }
010F            863   L006005?:
010F            864   ;        sourcecode.c:182: SFRPAGE = 0x00;
010F 75A700     865            mov     _SFRPAGE,#0x00
0112 22         866            ret
0113            867   ;------------------------------------------------------------
0113            868   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            869   ;------------------------------------------------------------
0113            870   ;pin                       Allocated to registers 
0113            871   ;------------------------------------------------------------
0113            872   ;        sourcecode.c:185: unsigned int ADC_at_Pin(unsigned char pin)
0113            873   ;        -----------------------------------------
0113            874   ;         function ADC_at_Pin
0113            875   ;        -----------------------------------------
0113            876   _ADC_at_Pin:
0113 8582BB     877            mov     _ADC0MX,dpl
0116            878   ;        sourcecode.c:188: ADINT = 0;
0116 C2ED       879            clr     _ADINT
0118            880   ;        sourcecode.c:189: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       881            setb    _ADBUSY
011A            882   ;        sourcecode.c:190: while (!ADINT); // Wait for conversion to complete
011A            883   L007001?:
011A 30EDE8     884            jnb     _ADINT,L007001?
011D            885   ;        sourcecode.c:191: return (ADC0);
011D 85BD82     886            mov     dpl,_ADC0
0120 85BE83     887            mov     dph,(_ADC0 >> 8)
0123 22         888            ret
0124            889   ;------------------------------------------------------------
0124            890   ;Allocation info for local variables in function 'Get_ADC'
0124            891   ;------------------------------------------------------------
0124            892   ;------------------------------------------------------------
0124            893   ;        sourcecode.c:194: unsigned int Get_ADC (void)
0124            894   ;        -----------------------------------------
0124            895   ;         function Get_ADC
0124            896   ;        -----------------------------------------
0124            897   _Get_ADC:
0124            898   ;        sourcecode.c:196: ADINT = 0;
0124 C2ED       899            clr     _ADINT
0126            900   ;        sourcecode.c:197: ADBUSY = 1;
0126 D2EC       901            setb    _ADBUSY
0128            902   ;        sourcecode.c:198: while (!ADINT); // Wait for conversion to complete
0128            903   L008001?:
0128 30ED28     904            jnb     _ADINT,L008001?
012B            905   ;        sourcecode.c:199: return (ADC0);
012B 85BD82     906            mov     dpl,_ADC0
012E 85BE83     907            mov     dph,(_ADC0 >> 8)
0131 22         908            ret
0132            909   ;------------------------------------------------------------
0132            910   ;Allocation info for local variables in function 'Volts_at_Pin'
0132            911   ;------------------------------------------------------------
0132            912   ;pin                       Allocated to registers r2 
0132            913   ;------------------------------------------------------------
0132            914   ;        sourcecode.c:202: float Volts_at_Pin(unsigned char pin)
0132            915   ;        -----------------------------------------
0132            916   ;         function Volts_at_Pin
0132            917   ;        -----------------------------------------
0132            918   _Volts_at_Pin:
0132            919   ;        sourcecode.c:204: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0132 120000     920            lcall   _ADC_at_Pin
0135 120000     921            lcall   ___uint2fs
0138 AA82       922            mov     r2,dpl
013A AB83       923            mov     r3,dph
013C ACF0       924            mov     r4,b
013E FD         925            mov     r5,a
013F C002       926            push    ar2
0141 C003       927            push    ar3
0143 C004       928            push    ar4
0145 C005       929            push    ar5
0147 90923A     930            mov     dptr,#0x923A
014A 75F053     931            mov     b,#0x53
014D 7440       932            mov     a,#0x40
014F 120000     933            lcall   ___fsmul
0152 AA82       934            mov     r2,dpl
0154 AB83       935            mov     r3,dph
0156 ACF0       936            mov     r4,b
0158 FD         937            mov     r5,a
0159 E581       938            mov     a,sp
015B 24FC       939            add     a,#0xfc
015D F581       940            mov     sp,a
015F E4         941            clr     a
0160 C0E0       942            push    acc
0162 74FC       943            mov     a,#0xFC
0164 C0E0       944            push    acc
0166 747F       945            mov     a,#0x7F
0168 C0E0       946            push    acc
016A 7446       947            mov     a,#0x46
016C C0E0       948            push    acc
016E 8A82       949            mov     dpl,r2
0170 8B83       950            mov     dph,r3
0172 8CF0       951            mov     b,r4
0174 ED         952            mov     a,r5
0175 120000     953            lcall   ___fsdiv
0178 AA82       954            mov     r2,dpl
017A AB83       955            mov     r3,dph
017C ACF0       956            mov     r4,b
017E FD         957            mov     r5,a
017F E581       958            mov     a,sp
0181 24FC       959            add     a,#0xfc
0183 F581       960            mov     sp,a
0185 8A82       961            mov     dpl,r2
0187 8B83       962            mov     dph,r3
0189 8CF0       963            mov     b,r4
018B ED         964            mov     a,r5
018C 22         965            ret
018D            966   ;------------------------------------------------------------
018D            967   ;Allocation info for local variables in function 'TIMER0_Init'
018D            968   ;------------------------------------------------------------
018D            969   ;------------------------------------------------------------
018D            970   ;        sourcecode.c:207: void TIMER0_Init(void)
018D            971   ;        -----------------------------------------
018D            972   ;         function TIMER0_Init
018D            973   ;        -----------------------------------------
018D            974   _TIMER0_Init:
018D            975   ;        sourcecode.c:209: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
018D 5389F0     976            anl     _TMOD,#0xF0
0190            977   ;        sourcecode.c:210: TMOD|=0b_0000_0101; // Timer/Counter 0 used as a 16-bit counter
0190 438905     978            orl     _TMOD,#0x05
0193            979   ;        sourcecode.c:211: TR0=0; // Stop Timer/Counter 0
0193 C28C       980            clr     _TR0
0195 22         981            ret
0196            982   ;------------------------------------------------------------
0196            983   ;Allocation info for local variables in function 'main'
0196            984   ;------------------------------------------------------------
0196            985   ;------------------------------------------------------------
0196            986   ;        sourcecode.c:220: void main (void)
0196            987   ;        -----------------------------------------
0196            988   ;         function main
0196            989   ;        -----------------------------------------
0196            990   _main:
0196            991   ;        sourcecode.c:223: TIMER0_Init();
0196 120000     992            lcall   _TIMER0_Init
0199            993   ;        sourcecode.c:225: waitms(500); // Give PuTTy a chance to start before sending
0199 9001F4     994            mov     dptr,#0x01F4
019C 120000     995            lcall   _waitms
019F            996   ;        sourcecode.c:226: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
019F 7468       997            mov     a,#__str_0
01A1 C0E0       998            push    acc
01A3 74C0       999            mov     a,#(__str_0 >> 8)
01A5 C0E0      1000            push    acc
01A7 7480      1001            mov     a,#0x80
01A9 C0E0      1002            push    acc
01AB 120000    1003            lcall   _printf
01AE 1581      1004            dec     sp
01B0 1581      1005            dec     sp
01B2 1581      1006            dec     sp
01B4           1007   ;        sourcecode.c:231: __FILE__, __DATE__, __TIME__);
01B4           1008   ;        sourcecode.c:230: "Compiled: %s, %s\n\n",
01B4 74E8      1009            mov     a,#__str_4
01B6 C0E0      1010            push    acc
01B8 74C0      1011            mov     a,#(__str_4 >> 8)
01BA C0E0      1012            push    acc
01BC 7480      1013            mov     a,#0x80
01BE C0E0      1014            push    acc
01C0 7428      1015            mov     a,#__str_3
01C2 C0E0      1016            push    acc
01C4 74C1      1017            mov     a,#(__str_3 >> 8)
01C6 C0E0      1018            push    acc
01C8 7480      1019            mov     a,#0x80
01CA C0E0      1020            push    acc
01CC 7468      1021            mov     a,#__str_2
01CE C0E0      1022            push    acc
01D0 74C1      1023            mov     a,#(__str_2 >> 8)
01D2 C0E0      1024            push    acc
01D4 7480      1025            mov     a,#0x80
01D6 C0E0      1026            push    acc
01D8 74A8      1027            mov     a,#__str_1
01DA C0E0      1028            push    acc
01DC 74C1      1029            mov     a,#(__str_1 >> 8)
01DE C0E0      1030            push    acc
01E0 7480      1031            mov     a,#0x80
01E2 C0E0      1032            push    acc
01E4 120000    1033            lcall   _printf
01E7 E581      1034            mov     a,sp
01E9 24F4      1035            add     a,#0xf4
01EB F581      1036            mov     sp,a
01ED           1037   ;        sourcecode.c:233: InitPinADC(2, 1); // Configure P2.1 as analog input
01ED 758801    1038            mov     _InitPinADC_PARM_2,#0x01
01F0 758202    1039            mov     dpl,#0x02
01F3 120000    1040            lcall   _InitPinADC
01F6           1041   ;        sourcecode.c:234: InitPinADC(2, 2); // Configure P2.2 as analog input
01F6 758802    1042            mov     _InitPinADC_PARM_2,#0x02
01F9 758202    1043            mov     dpl,#0x02
01FC 120000    1044            lcall   _InitPinADC
01FF           1045   ;        sourcecode.c:236: InitADC();
01FF 120000    1046            lcall   _InitADC
0202           1047   ;        sourcecode.c:238: while(1)
0202           1048   L011006?:
0202           1049   ;        sourcecode.c:277: v1 = Volts_at_Pin(QFP32_MUX_P2_1);                            // gets the amplitude at pin 2.1
0202 75820E    1050            mov     dpl,#0x0E
0205 120000    1051            lcall   _Volts_at_Pin
0208 858298    1052            mov     _v1,dpl
020B 858399    1053            mov     (_v1 + 1),dph
020E 85F09A    1054            mov     (_v1 + 2),b
0211 F59B      1055            mov     (_v1 + 3),a
0213           1056   ;        sourcecode.c:278: if (v1 > v1_last){    // if the value higher that last time
0213 C098      1057            push    _v1_last
0215 C099      1058            push    (_v1_last + 1)
0217 C09A      1059            push    (_v1_last + 2)
0219 C09B      1060            push    (_v1_last + 3)
021B 859882    1061            mov     dpl,_v1
021E 859983    1062            mov     dph,(_v1 + 1)
0221 859AF0    1063            mov     b,(_v1 + 2)
0224 E59B      1064            mov     a,(_v1 + 3)
0226 120000    1065            lcall   ___fsgt
0229 AA82      1066            mov     r2,dpl
022B E581      1067            mov     a,sp
022D 24FC      1068            add     a,#0xfc
022F F581      1069            mov     sp,a
0231 EA        1070            mov     a,r2
0232 6000      1071            jz      L011002?
0234           1072   ;        sourcecode.c:279: v1_max = v1;
0234 859818    1073            mov     _v1_max,_v1
0237 859919    1074            mov     (_v1_max + 1),(_v1 + 1)
023A 859A1A    1075            mov     (_v1_max + 2),(_v1 + 2)
023D 859B1B    1076            mov     (_v1_max + 3),(_v1 + 3)
0240           1077   L011002?:
0240           1078   ;        sourcecode.c:281: v1_last = v1;
0240 859898    1079            mov     _v1_last,_v1
0243 859999    1080            mov     (_v1_last + 1),(_v1 + 1)
0246 859A9A    1081            mov     (_v1_last + 2),(_v1 + 2)
0249 859B9B    1082            mov     (_v1_last + 3),(_v1 + 3)
024C           1083   ;        sourcecode.c:283: v2 = Volts_at_Pin(QFP32_MUX_P2_2);                            // gets the amplitude at pin 2.2
024C 75820F    1084            mov     dpl,#0x0F
024F 120000    1085            lcall   _Volts_at_Pin
0252 858258    1086            mov     _v2,dpl
0255 858359    1087            mov     (_v2 + 1),dph
0258 85F05A    1088            mov     (_v2 + 2),b
025B F55B      1089            mov     (_v2 + 3),a
025D           1090   ;        sourcecode.c:284: if (v2 > v2_last){
025D C058      1091            push    _v2_last
025F C059      1092            push    (_v2_last + 1)
0261 C05A      1093            push    (_v2_last + 2)
0263 C05B      1094            push    (_v2_last + 3)
0265 855882    1095            mov     dpl,_v2
0268 855983    1096            mov     dph,(_v2 + 1)
026B 855AF0    1097            mov     b,(_v2 + 2)
026E E55B      1098            mov     a,(_v2 + 3)
0270 120000    1099            lcall   ___fsgt
0273 AA82      1100            mov     r2,dpl
0275 E581      1101            mov     a,sp
0277 24FC      1102            add     a,#0xfc
0279 F581      1103            mov     sp,a
027B EA        1104            mov     a,r2
027C 6000      1105            jz      L011004?
027E           1106   ;        sourcecode.c:285: v2_max = v2;
027E 8558D8    1107            mov     _v2_max,_v2
0281 8559D9    1108            mov     (_v2_max + 1),(_v2 + 1)
0284 855ADA    1109            mov     (_v2_max + 2),(_v2 + 2)
0287 855BDB    1110            mov     (_v2_max + 3),(_v2 + 3)
028A           1111   L011004?:
028A           1112   ;        sourcecode.c:287: v2_last = v2;
028A 855858    1113            mov     _v2_last,_v2
028D 855959    1114            mov     (_v2_last + 1),(_v2 + 1)
0290 855A5A    1115            mov     (_v2_last + 2),(_v2 + 2)
0293 855B5B    1116            mov     (_v2_last + 3),(_v2 + 3)
0296           1117   ;        sourcecode.c:308: count += 1;
0296 0558      1118            inc     _count
0298 E4        1119            clr     a
0299 B558E8    1120            cjne    a,_count,L011015?
029C 0559      1121            inc     (_count + 1)
029E           1122   L011015?:
029E           1123   ;        sourcecode.c:309: printf ("Max Amp @p2.1=%7.5fV, Max Amp @p2.2=%7.5fV,\r", v1_max, v2_max); //print the two values for max amplitude
029E C0D8      1124            push    _v2_max
02A0 C0D9      1125            push    (_v2_max + 1)
02A2 C0DA      1126            push    (_v2_max + 2)
02A4 C0DB      1127            push    (_v2_max + 3)
02A6 C018      1128            push    _v1_max
02A8 C019      1129            push    (_v1_max + 1)
02AA C01A      1130            push    (_v1_max + 2)
02AC C01B      1131            push    (_v1_max + 3)
02AE 7428      1132            mov     a,#__str_5
02B0 C0E0      1133            push    acc
02B2 74C3      1134            mov     a,#(__str_5 >> 8)
02B4 C0E0      1135            push    acc
02B6 7480      1136            mov     a,#0x80
02B8 C0E0      1137            push    acc
02BA 120000    1138            lcall   _printf
02BD E581      1139            mov     a,sp
02BF 24F5      1140            add     a,#0xf5
02C1 F581      1141            mov     sp,a
02C3 020000    1142            ljmp    L011006?
02C6           1143            rseg R_CSEG
02C6           1144   
0000           1145            rseg R_XINIT
0000           1146   
0000           1147            rseg R_CONST
0000           1148   __str_0:
0000 1B        1149            db 0x1B
0001 5B324A    1150            db '[2J'
0004 00        1151            db 0x00
0005           1152   __str_1:
0005 41444320  1153            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1154            db 0x0A
0016 46696C65  1155            db 'File: %s'
     3A202573
001E 0A        1156            db 0x0A
001F 436F6D70  1157            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1158            db 0x0A
0030 0A        1159            db 0x0A
0031 00        1160            db 0x00
0032           1161   __str_2:
0032 736F7572  1162            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1163            db 0x00
003F           1164   __str_3:
003F 4D617220  1165            db 'Mar  5 2024'
     20352032
     303234
004A 00        1166            db 0x00
004B           1167   __str_4:
004B 31303A35  1168            db '10:52:46'
     323A3436
0053 00        1169            db 0x00
0054           1170   __str_5:
0054 4D617820  1171            db 'Max Amp @p2.1=%7.5fV, Max Amp @p2.2=%7.5fV,'
     416D7020
     4070322E
     313D2537
     2E356656
     2C204D61
     7820416D
     70204070
     322E323D
     25372E35
     66562C
007F 0D        1172            db 0x0D
0080 00        1173            db 0x00
0081           1174   
0003           1175            CSEG
0003           1176   
0003           1177   end
