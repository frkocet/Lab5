0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 06 22:10:10 2024
0000              5   ;--------------------------------------------------------
                  5   $name sourcecode
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Volts_at_Pin
0000             31            public _ADC_at_Pin
0000             32            public _InitPinADC
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public _InitADC
0000             36            public __c51_external_startup
0000             37            public _v2
0000             38            public _v1
0000             39            public _v2_max
0000             40            public _v1_max
0000             41            public _overflow_count
0000             42   ;--------------------------------------------------------
0000             43   ; Special Function Registers
0000             44   ;--------------------------------------------------------
0000             45   _ACC            DATA 0xe0
0000             46   _ADC0ASAH       DATA 0xb6
0000             47   _ADC0ASAL       DATA 0xb5
0000             48   _ADC0ASCF       DATA 0xa1
0000             49   _ADC0ASCT       DATA 0xc7
0000             50   _ADC0CF0        DATA 0xbc
0000             51   _ADC0CF1        DATA 0xb9
0000             52   _ADC0CF2        DATA 0xdf
0000             53   _ADC0CN0        DATA 0xe8
0000             54   _ADC0CN1        DATA 0xb2
0000             55   _ADC0CN2        DATA 0xb3
0000             56   _ADC0GTH        DATA 0xc4
0000             57   _ADC0GTL        DATA 0xc3
0000             58   _ADC0H          DATA 0xbe
0000             59   _ADC0L          DATA 0xbd
0000             60   _ADC0LTH        DATA 0xc6
0000             61   _ADC0LTL        DATA 0xc5
0000             62   _ADC0MX         DATA 0xbb
0000             63   _B              DATA 0xf0
0000             64   _CKCON0         DATA 0x8e
0000             65   _CKCON1         DATA 0xa6
0000             66   _CLEN0          DATA 0xc6
0000             67   _CLIE0          DATA 0xc7
0000             68   _CLIF0          DATA 0xe8
0000             69   _CLKSEL         DATA 0xa9
0000             70   _CLOUT0         DATA 0xd1
0000             71   _CLU0CF         DATA 0xb1
0000             72   _CLU0FN         DATA 0xaf
0000             73   _CLU0MX         DATA 0x84
0000             74   _CLU1CF         DATA 0xb3
0000             75   _CLU1FN         DATA 0xb2
0000             76   _CLU1MX         DATA 0x85
0000             77   _CLU2CF         DATA 0xb6
0000             78   _CLU2FN         DATA 0xb5
0000             79   _CLU2MX         DATA 0x91
0000             80   _CLU3CF         DATA 0xbf
0000             81   _CLU3FN         DATA 0xbe
0000             82   _CLU3MX         DATA 0xae
0000             83   _CMP0CN0        DATA 0x9b
0000             84   _CMP0CN1        DATA 0x99
0000             85   _CMP0MD         DATA 0x9d
0000             86   _CMP0MX         DATA 0x9f
0000             87   _CMP1CN0        DATA 0xbf
0000             88   _CMP1CN1        DATA 0xac
0000             89   _CMP1MD         DATA 0xab
0000             90   _CMP1MX         DATA 0xaa
0000             91   _CRC0CN0        DATA 0xce
0000             92   _CRC0CN1        DATA 0x86
0000             93   _CRC0CNT        DATA 0xd3
0000             94   _CRC0DAT        DATA 0xcb
0000             95   _CRC0FLIP       DATA 0xcf
0000             96   _CRC0IN         DATA 0xca
0000             97   _CRC0ST         DATA 0xd2
0000             98   _DAC0CF0        DATA 0x91
0000             99   _DAC0CF1        DATA 0x92
0000            100   _DAC0H          DATA 0x85
0000            101   _DAC0L          DATA 0x84
0000            102   _DAC1CF0        DATA 0x93
0000            103   _DAC1CF1        DATA 0x94
0000            104   _DAC1H          DATA 0x8a
0000            105   _DAC1L          DATA 0x89
0000            106   _DAC2CF0        DATA 0x95
0000            107   _DAC2CF1        DATA 0x96
0000            108   _DAC2H          DATA 0x8c
0000            109   _DAC2L          DATA 0x8b
0000            110   _DAC3CF0        DATA 0x9a
0000            111   _DAC3CF1        DATA 0x9c
0000            112   _DAC3H          DATA 0x8e
0000            113   _DAC3L          DATA 0x8d
0000            114   _DACGCF0        DATA 0x88
0000            115   _DACGCF1        DATA 0x98
0000            116   _DACGCF2        DATA 0xa2
0000            117   _DERIVID        DATA 0xad
0000            118   _DEVICEID       DATA 0xb5
0000            119   _DPH            DATA 0x83
0000            120   _DPL            DATA 0x82
0000            121   _EIE1           DATA 0xe6
0000            122   _EIE2           DATA 0xf3
0000            123   _EIP1           DATA 0xbb
0000            124   _EIP1H          DATA 0xee
0000            125   _EIP2           DATA 0xed
0000            126   _EIP2H          DATA 0xf6
0000            127   _EMI0CN         DATA 0xe7
0000            128   _FLKEY          DATA 0xb7
0000            129   _HFO0CAL        DATA 0xc7
0000            130   _HFO1CAL        DATA 0xd6
0000            131   _HFOCN          DATA 0xef
0000            132   _I2C0ADM        DATA 0xff
0000            133   _I2C0CN0        DATA 0xba
0000            134   _I2C0DIN        DATA 0xbc
0000            135   _I2C0DOUT       DATA 0xbb
0000            136   _I2C0FCN0       DATA 0xad
0000            137   _I2C0FCN1       DATA 0xab
0000            138   _I2C0FCT        DATA 0xf5
0000            139   _I2C0SLAD       DATA 0xbd
0000            140   _I2C0STAT       DATA 0xb9
0000            141   _IE             DATA 0xa8
0000            142   _IP             DATA 0xb8
0000            143   _IPH            DATA 0xf2
0000            144   _IT01CF         DATA 0xe4
0000            145   _LFO0CN         DATA 0xb1
0000            146   _P0             DATA 0x80
0000            147   _P0MASK         DATA 0xfe
0000            148   _P0MAT          DATA 0xfd
0000            149   _P0MDIN         DATA 0xf1
0000            150   _P0MDOUT        DATA 0xa4
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1             DATA 0x90
0000            153   _P1MASK         DATA 0xee
0000            154   _P1MAT          DATA 0xed
0000            155   _P1MDIN         DATA 0xf2
0000            156   _P1MDOUT        DATA 0xa5
0000            157   _P1SKIP         DATA 0xd5
0000            158   _P2             DATA 0xa0
0000            159   _P2MASK         DATA 0xfc
0000            160   _P2MAT          DATA 0xfb
0000            161   _P2MDIN         DATA 0xf3
0000            162   _P2MDOUT        DATA 0xa6
0000            163   _P2SKIP         DATA 0xcc
0000            164   _P3             DATA 0xb0
0000            165   _P3MDIN         DATA 0xf4
0000            166   _P3MDOUT        DATA 0x9c
0000            167   _PCA0CENT       DATA 0x9e
0000            168   _PCA0CLR        DATA 0x9c
0000            169   _PCA0CN0        DATA 0xd8
0000            170   _PCA0CPH0       DATA 0xfc
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPH3       DATA 0xf5
0000            174   _PCA0CPH4       DATA 0x85
0000            175   _PCA0CPH5       DATA 0xde
0000            176   _PCA0CPL0       DATA 0xfb
0000            177   _PCA0CPL1       DATA 0xe9
0000            178   _PCA0CPL2       DATA 0xeb
0000            179   _PCA0CPL3       DATA 0xf4
0000            180   _PCA0CPL4       DATA 0x84
0000            181   _PCA0CPL5       DATA 0xdd
0000            182   _PCA0CPM0       DATA 0xda
0000            183   _PCA0CPM1       DATA 0xdb
0000            184   _PCA0CPM2       DATA 0xdc
0000            185   _PCA0CPM3       DATA 0xae
0000            186   _PCA0CPM4       DATA 0xaf
0000            187   _PCA0CPM5       DATA 0xcc
0000            188   _PCA0H          DATA 0xfa
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0MD         DATA 0xd9
0000            191   _PCA0POL        DATA 0x96
0000            192   _PCA0PWM        DATA 0xf7
0000            193   _PCON0          DATA 0x87
0000            194   _PCON1          DATA 0xcd
0000            195   _PFE0CN         DATA 0xc1
0000            196   _PRTDRV         DATA 0xf6
0000            197   _PSCTL          DATA 0x8f
0000            198   _PSTAT0         DATA 0xaa
0000            199   _PSW            DATA 0xd0
0000            200   _REF0CN         DATA 0xd1
0000            201   _REG0CN         DATA 0xc9
0000            202   _REVID          DATA 0xb6
0000            203   _RSTSRC         DATA 0xef
0000            204   _SBCON1         DATA 0x94
0000            205   _SBRLH1         DATA 0x96
0000            206   _SBRLL1         DATA 0x95
0000            207   _SBUF           DATA 0x99
0000            208   _SBUF0          DATA 0x99
0000            209   _SBUF1          DATA 0x92
0000            210   _SCON           DATA 0x98
0000            211   _SCON0          DATA 0x98
0000            212   _SCON1          DATA 0xc8
0000            213   _SFRPAGE        DATA 0xa7
0000            214   _SFRPGCN        DATA 0xbc
0000            215   _SFRSTACK       DATA 0xd7
0000            216   _SMB0ADM        DATA 0xd6
0000            217   _SMB0ADR        DATA 0xd7
0000            218   _SMB0CF         DATA 0xc1
0000            219   _SMB0CN0        DATA 0xc0
0000            220   _SMB0DAT        DATA 0xc2
0000            221   _SMB0FCN0       DATA 0xc3
0000            222   _SMB0FCN1       DATA 0xc4
0000            223   _SMB0FCT        DATA 0xef
0000            224   _SMB0RXLN       DATA 0xc5
0000            225   _SMB0TC         DATA 0xac
0000            226   _SMOD1          DATA 0x93
0000            227   _SP             DATA 0x81
0000            228   _SPI0CFG        DATA 0xa1
0000            229   _SPI0CKR        DATA 0xa2
0000            230   _SPI0CN0        DATA 0xf8
0000            231   _SPI0DAT        DATA 0xa3
0000            232   _SPI0FCN0       DATA 0x9a
0000            233   _SPI0FCN1       DATA 0x9b
0000            234   _SPI0FCT        DATA 0xf7
0000            235   _SPI0PCF        DATA 0xdf
0000            236   _TCON           DATA 0x88
0000            237   _TH0            DATA 0x8c
0000            238   _TH1            DATA 0x8d
0000            239   _TL0            DATA 0x8a
0000            240   _TL1            DATA 0x8b
0000            241   _TMOD           DATA 0x89
0000            242   _TMR2CN0        DATA 0xc8
0000            243   _TMR2CN1        DATA 0xfd
0000            244   _TMR2H          DATA 0xcf
0000            245   _TMR2L          DATA 0xce
0000            246   _TMR2RLH        DATA 0xcb
0000            247   _TMR2RLL        DATA 0xca
0000            248   _TMR3CN0        DATA 0x91
0000            249   _TMR3CN1        DATA 0xfe
0000            250   _TMR3H          DATA 0x95
0000            251   _TMR3L          DATA 0x94
0000            252   _TMR3RLH        DATA 0x93
0000            253   _TMR3RLL        DATA 0x92
0000            254   _TMR4CN0        DATA 0x98
0000            255   _TMR4CN1        DATA 0xff
0000            256   _TMR4H          DATA 0xa5
0000            257   _TMR4L          DATA 0xa4
0000            258   _TMR4RLH        DATA 0xa3
0000            259   _TMR4RLL        DATA 0xa2
0000            260   _TMR5CN0        DATA 0xc0
0000            261   _TMR5CN1        DATA 0xf1
0000            262   _TMR5H          DATA 0xd5
0000            263   _TMR5L          DATA 0xd4
0000            264   _TMR5RLH        DATA 0xd3
0000            265   _TMR5RLL        DATA 0xd2
0000            266   _UART0PCF       DATA 0xd9
0000            267   _UART1FCN0      DATA 0x9d
0000            268   _UART1FCN1      DATA 0xd8
0000            269   _UART1FCT       DATA 0xfa
0000            270   _UART1LIN       DATA 0x9e
0000            271   _UART1PCF       DATA 0xda
0000            272   _VDM0CN         DATA 0xff
0000            273   _WDTCN          DATA 0x97
0000            274   _XBR0           DATA 0xe1
0000            275   _XBR1           DATA 0xe2
0000            276   _XBR2           DATA 0xe3
0000            277   _XOSC0CN        DATA 0x86
0000            278   _DPTR           DATA 0x8382
0000            279   _TMR2RL         DATA 0xcbca
0000            280   _TMR3RL         DATA 0x9392
0000            281   _TMR4RL         DATA 0xa3a2
0000            282   _TMR5RL         DATA 0xd3d2
0000            283   _TMR0           DATA 0x8c8a
0000            284   _TMR1           DATA 0x8d8b
0000            285   _TMR2           DATA 0xcfce
0000            286   _TMR3           DATA 0x9594
0000            287   _TMR4           DATA 0xa5a4
0000            288   _TMR5           DATA 0xd5d4
0000            289   _SBRL1          DATA 0x9695
0000            290   _PCA0           DATA 0xfaf9
0000            291   _PCA0CP0        DATA 0xfcfb
0000            292   _PCA0CP1        DATA 0xeae9
0000            293   _PCA0CP2        DATA 0xeceb
0000            294   _PCA0CP3        DATA 0xf5f4
0000            295   _PCA0CP4        DATA 0x8584
0000            296   _PCA0CP5        DATA 0xdedd
0000            297   _ADC0ASA        DATA 0xb6b5
0000            298   _ADC0GT         DATA 0xc4c3
0000            299   _ADC0           DATA 0xbebd
0000            300   _ADC0LT         DATA 0xc6c5
0000            301   _DAC0           DATA 0x8584
0000            302   _DAC1           DATA 0x8a89
0000            303   _DAC2           DATA 0x8c8b
0000            304   _DAC3           DATA 0x8e8d
0000            305   ;--------------------------------------------------------
0000            306   ; special function bits
0000            307   ;--------------------------------------------------------
0000            308   _ACC_0          BIT 0xe0
0000            309   _ACC_1          BIT 0xe1
0000            310   _ACC_2          BIT 0xe2
0000            311   _ACC_3          BIT 0xe3
0000            312   _ACC_4          BIT 0xe4
0000            313   _ACC_5          BIT 0xe5
0000            314   _ACC_6          BIT 0xe6
0000            315   _ACC_7          BIT 0xe7
0000            316   _TEMPE          BIT 0xe8
0000            317   _ADGN0          BIT 0xe9
0000            318   _ADGN1          BIT 0xea
0000            319   _ADWINT         BIT 0xeb
0000            320   _ADBUSY         BIT 0xec
0000            321   _ADINT          BIT 0xed
0000            322   _IPOEN          BIT 0xee
0000            323   _ADEN           BIT 0xef
0000            324   _B_0            BIT 0xf0
0000            325   _B_1            BIT 0xf1
0000            326   _B_2            BIT 0xf2
0000            327   _B_3            BIT 0xf3
0000            328   _B_4            BIT 0xf4
0000            329   _B_5            BIT 0xf5
0000            330   _B_6            BIT 0xf6
0000            331   _B_7            BIT 0xf7
0000            332   _C0FIF          BIT 0xe8
0000            333   _C0RIF          BIT 0xe9
0000            334   _C1FIF          BIT 0xea
0000            335   _C1RIF          BIT 0xeb
0000            336   _C2FIF          BIT 0xec
0000            337   _C2RIF          BIT 0xed
0000            338   _C3FIF          BIT 0xee
0000            339   _C3RIF          BIT 0xef
0000            340   _D1SRC0         BIT 0x88
0000            341   _D1SRC1         BIT 0x89
0000            342   _D1AMEN         BIT 0x8a
0000            343   _D01REFSL       BIT 0x8b
0000            344   _D3SRC0         BIT 0x8c
0000            345   _D3SRC1         BIT 0x8d
0000            346   _D3AMEN         BIT 0x8e
0000            347   _D23REFSL       BIT 0x8f
0000            348   _D0UDIS         BIT 0x98
0000            349   _D1UDIS         BIT 0x99
0000            350   _D2UDIS         BIT 0x9a
0000            351   _D3UDIS         BIT 0x9b
0000            352   _EX0            BIT 0xa8
0000            353   _ET0            BIT 0xa9
0000            354   _EX1            BIT 0xaa
0000            355   _ET1            BIT 0xab
0000            356   _ES0            BIT 0xac
0000            357   _ET2            BIT 0xad
0000            358   _ESPI0          BIT 0xae
0000            359   _EA             BIT 0xaf
0000            360   _PX0            BIT 0xb8
0000            361   _PT0            BIT 0xb9
0000            362   _PX1            BIT 0xba
0000            363   _PT1            BIT 0xbb
0000            364   _PS0            BIT 0xbc
0000            365   _PT2            BIT 0xbd
0000            366   _PSPI0          BIT 0xbe
0000            367   _P0_0           BIT 0x80
0000            368   _P0_1           BIT 0x81
0000            369   _P0_2           BIT 0x82
0000            370   _P0_3           BIT 0x83
0000            371   _P0_4           BIT 0x84
0000            372   _P0_5           BIT 0x85
0000            373   _P0_6           BIT 0x86
0000            374   _P0_7           BIT 0x87
0000            375   _P1_0           BIT 0x90
0000            376   _P1_1           BIT 0x91
0000            377   _P1_2           BIT 0x92
0000            378   _P1_3           BIT 0x93
0000            379   _P1_4           BIT 0x94
0000            380   _P1_5           BIT 0x95
0000            381   _P1_6           BIT 0x96
0000            382   _P1_7           BIT 0x97
0000            383   _P2_0           BIT 0xa0
0000            384   _P2_1           BIT 0xa1
0000            385   _P2_2           BIT 0xa2
0000            386   _P2_3           BIT 0xa3
0000            387   _P2_4           BIT 0xa4
0000            388   _P2_5           BIT 0xa5
0000            389   _P2_6           BIT 0xa6
0000            390   _P3_0           BIT 0xb0
0000            391   _P3_1           BIT 0xb1
0000            392   _P3_2           BIT 0xb2
0000            393   _P3_3           BIT 0xb3
0000            394   _P3_4           BIT 0xb4
0000            395   _P3_7           BIT 0xb7
0000            396   _CCF0           BIT 0xd8
0000            397   _CCF1           BIT 0xd9
0000            398   _CCF2           BIT 0xda
0000            399   _CCF3           BIT 0xdb
0000            400   _CCF4           BIT 0xdc
0000            401   _CCF5           BIT 0xdd
0000            402   _CR             BIT 0xde
0000            403   _CF             BIT 0xdf
0000            404   _PARITY         BIT 0xd0
0000            405   _F1             BIT 0xd1
0000            406   _OV             BIT 0xd2
0000            407   _RS0            BIT 0xd3
0000            408   _RS1            BIT 0xd4
0000            409   _F0             BIT 0xd5
0000            410   _AC             BIT 0xd6
0000            411   _CY             BIT 0xd7
0000            412   _RI             BIT 0x98
0000            413   _TI             BIT 0x99
0000            414   _RB8            BIT 0x9a
0000            415   _TB8            BIT 0x9b
0000            416   _REN            BIT 0x9c
0000            417   _CE             BIT 0x9d
0000            418   _SMODE          BIT 0x9e
0000            419   _RI1            BIT 0xc8
0000            420   _TI1            BIT 0xc9
0000            421   _RBX1           BIT 0xca
0000            422   _TBX1           BIT 0xcb
0000            423   _REN1           BIT 0xcc
0000            424   _PERR1          BIT 0xcd
0000            425   _OVR1           BIT 0xce
0000            426   _SI             BIT 0xc0
0000            427   _ACK            BIT 0xc1
0000            428   _ARBLOST        BIT 0xc2
0000            429   _ACKRQ          BIT 0xc3
0000            430   _STO            BIT 0xc4
0000            431   _STA            BIT 0xc5
0000            432   _TXMODE         BIT 0xc6
0000            433   _MASTER         BIT 0xc7
0000            434   _SPIEN          BIT 0xf8
0000            435   _TXNF           BIT 0xf9
0000            436   _NSSMD0         BIT 0xfa
0000            437   _NSSMD1         BIT 0xfb
0000            438   _RXOVRN         BIT 0xfc
0000            439   _MODF           BIT 0xfd
0000            440   _WCOL           BIT 0xfe
0000            441   _SPIF           BIT 0xff
0000            442   _IT0            BIT 0x88
0000            443   _IE0            BIT 0x89
0000            444   _IT1            BIT 0x8a
0000            445   _IE1            BIT 0x8b
0000            446   _TR0            BIT 0x8c
0000            447   _TF0            BIT 0x8d
0000            448   _TR1            BIT 0x8e
0000            449   _TF1            BIT 0x8f
0000            450   _T2XCLK0        BIT 0xc8
0000            451   _T2XCLK1        BIT 0xc9
0000            452   _TR2            BIT 0xca
0000            453   _T2SPLIT        BIT 0xcb
0000            454   _TF2CEN         BIT 0xcc
0000            455   _TF2LEN         BIT 0xcd
0000            456   _TF2L           BIT 0xce
0000            457   _TF2H           BIT 0xcf
0000            458   _T4XCLK0        BIT 0x98
0000            459   _T4XCLK1        BIT 0x99
0000            460   _TR4            BIT 0x9a
0000            461   _T4SPLIT        BIT 0x9b
0000            462   _TF4CEN         BIT 0x9c
0000            463   _TF4LEN         BIT 0x9d
0000            464   _TF4L           BIT 0x9e
0000            465   _TF4H           BIT 0x9f
0000            466   _T5XCLK0        BIT 0xc0
0000            467   _T5XCLK1        BIT 0xc1
0000            468   _TR5            BIT 0xc2
0000            469   _T5SPLIT        BIT 0xc3
0000            470   _TF5CEN         BIT 0xc4
0000            471   _TF5LEN         BIT 0xc5
0000            472   _TF5L           BIT 0xc6
0000            473   _TF5H           BIT 0xc7
0000            474   _RIE            BIT 0xd8
0000            475   _RXTO0          BIT 0xd9
0000            476   _RXTO1          BIT 0xda
0000            477   _RFRQ           BIT 0xdb
0000            478   _TIE            BIT 0xdc
0000            479   _TXHOLD         BIT 0xdd
0000            480   _TXNF1          BIT 0xde
0000            481   _TFRQ           BIT 0xdf
0000            482   ;--------------------------------------------------------
0000            483   ; overlayable register banks
0000            484   ;--------------------------------------------------------
0000            485            rbank0 segment data overlay
0000            486   ;--------------------------------------------------------
0000            487   ; internal ram data
0000            488   ;--------------------------------------------------------
0000            489            rseg R_DSEG
0000            490   _overflow_count:
0000            491            ds 1
0001            492   _v1_max:
0001            493            ds 4
0005            494   _v2_max:
0005            495            ds 4
0009            496   _v1:
0009            497            ds 4
000D            498   _v2:
000D            499            ds 4
0011            500   _main_period_1_61:
0011            501            ds 4
0015            502   ;--------------------------------------------------------
0015            503   ; overlayable items in internal ram 
0015            504   ;--------------------------------------------------------
0000            505            rseg    R_OSEG
0000            506            rseg    R_OSEG
0000            507   _InitPinADC_PARM_2:
0000            508            ds 1
0001            509            rseg    R_OSEG
0001            510   ;--------------------------------------------------------
0001            511   ; indirectly addressable internal ram data
0001            512   ;--------------------------------------------------------
0000            513            rseg R_ISEG
0000            514   ;--------------------------------------------------------
0000            515   ; absolute internal ram data
0000            516   ;--------------------------------------------------------
0000            517            DSEG
0000            518   ;--------------------------------------------------------
0000            519   ; bit data
0000            520   ;--------------------------------------------------------
0000            521            rseg R_BSEG
0000            522   ;--------------------------------------------------------
0000            523   ; paged external ram data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_PSEG
0000            526   ;--------------------------------------------------------
0000            527   ; external ram data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_XSEG
0000            530   ;--------------------------------------------------------
0000            531   ; absolute external ram data
0000            532   ;--------------------------------------------------------
0000            533            XSEG
0000            534   ;--------------------------------------------------------
0000            535   ; external initialized ram data
0000            536   ;--------------------------------------------------------
0000            537            rseg R_IXSEG
0000            538            rseg R_HOME
0000            539            rseg R_GSINIT
0000            540            rseg R_CSEG
0000            541   ;--------------------------------------------------------
0000            542   ; Reset entry point and interrupt vectors
0000            543   ;--------------------------------------------------------
0000            544            CSEG at 0x0000
0000 020000     545            ljmp    _crt0
0003            546   ;--------------------------------------------------------
0003            547   ; global & static initialisations
0003            548   ;--------------------------------------------------------
0000            549            rseg R_HOME
0000            550            rseg R_GSINIT
0000            551            rseg R_GSINIT
0000            552   ;--------------------------------------------------------
0000            553   ; data variables initialization
0000            554   ;--------------------------------------------------------
0000            555            rseg R_DINIT
0000            556   ;        sourcecode.c:15: float v1_max = 0; float v2_max = 0;
0000 751800     557            mov     _v1_max,#0x00
0003 751900     558            mov     (_v1_max + 1),#0x00
0006 751A00     559            mov     (_v1_max + 2),#0x00
0009 751B00     560            mov     (_v1_max + 3),#0x00
000C            561   ;        sourcecode.c:15: float v1 = 0; float v2 = 0;
000C 75D800     562            mov     _v2_max,#0x00
000F 75D900     563            mov     (_v2_max + 1),#0x00
0012 75DA00     564            mov     (_v2_max + 2),#0x00
0015 75DB00     565            mov     (_v2_max + 3),#0x00
0018            566   ;        sourcecode.c:16: 
0018 759800     567            mov     _v1,#0x00
001B 759900     568            mov     (_v1 + 1),#0x00
001E 759A00     569            mov     (_v1 + 2),#0x00
0021 759B00     570            mov     (_v1 + 3),#0x00
0024            571   ;        sourcecode.c:16: float v1 = 0; float v2 = 0;
0024 755800     572            mov     _v2,#0x00
0027 755900     573            mov     (_v2 + 1),#0x00
002A 755A00     574            mov     (_v2 + 2),#0x00
002D 755B00     575            mov     (_v2 + 3),#0x00
0030            576            ; The linker places a 'ret' at the end of segment R_DINIT.
0030            577   ;--------------------------------------------------------
0030            578   ; code
0030            579   ;--------------------------------------------------------
0000            580            rseg R_CSEG
0000            581   ;------------------------------------------------------------
0000            582   ;Allocation info for local variables in function '_c51_external_startup'
0000            583   ;------------------------------------------------------------
0000            584   ;------------------------------------------------------------
0000            585   ;        sourcecode.c:18: char _c51_external_startup (void)
0000            586   ;        -----------------------------------------
0000            587   ;         function _c51_external_startup
0000            588   ;        -----------------------------------------
0000            589   __c51_external_startup:
0000            590            using   0
0000            591   ;        sourcecode.c:21: SFRPAGE = 0x00;
0000 75A700     592            mov     _SFRPAGE,#0x00
0003            593   ;        sourcecode.c:22: WDTCN = 0xDE; //First key
0003 7597DE     594            mov     _WDTCN,#0xDE
0006            595   ;        sourcecode.c:23: WDTCN = 0xAD; //Second key
0006 7597AD     596            mov     _WDTCN,#0xAD
0009            597   ;        sourcecode.c:25: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     598            mov     _VDM0CN,#0x80
000C            599   ;        sourcecode.c:26: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     600            mov     _RSTSRC,#0x06
000F            601   ;        sourcecode.c:33: SFRPAGE = 0x10;
000F 75A710     602            mov     _SFRPAGE,#0x10
0012            603   ;        sourcecode.c:34: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     604            mov     _PFE0CN,#0x20
0015            605   ;        sourcecode.c:35: SFRPAGE = 0x00;
0015 75A700     606            mov     _SFRPAGE,#0x00
0018            607   ;        sourcecode.c:56: CLKSEL = 0x00;
0018 75A900     608            mov     _CLKSEL,#0x00
001B            609   ;        sourcecode.c:57: CLKSEL = 0x00;
001B 75A900     610            mov     _CLKSEL,#0x00
001E            611   ;        sourcecode.c:58: while ((CLKSEL & 0x80) == 0);
001E            612   L002001?:
001E E5A9       613            mov     a,_CLKSEL
0020 30E760     614            jnb     acc.7,L002001?
0023            615   ;        sourcecode.c:59: CLKSEL = 0x03;
0023 75A903     616            mov     _CLKSEL,#0x03
0026            617   ;        sourcecode.c:60: CLKSEL = 0x03;
0026 75A903     618            mov     _CLKSEL,#0x03
0029            619   ;        sourcecode.c:61: while ((CLKSEL & 0x80) == 0);
0029            620   L002004?:
0029 E5A9       621            mov     a,_CLKSEL
002B 30E7E0     622            jnb     acc.7,L002004?
002E            623   ;        sourcecode.c:66: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     624            orl     _P0MDOUT,#0x10
0031            625   ;        sourcecode.c:67: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     626            mov     _XBR0,#0x01
0034            627   ;        sourcecode.c:68: XBR1     = 0X00;
0034 75E200     628            mov     _XBR1,#0x00
0037            629   ;        sourcecode.c:69: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     630            mov     _XBR2,#0x40
003A            631   ;        sourcecode.c:75: SCON0 = 0x10;
003A 759810     632            mov     _SCON0,#0x10
003D            633   ;        sourcecode.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     634            mov     _TH1,#0xE6
0040            635   ;        sourcecode.c:77: TL1 = TH1;      // Init Timer1
0040 858D8B     636            mov     _TL1,_TH1
0043            637   ;        sourcecode.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     638            anl     _TMOD,#0x0F
0046            639   ;        sourcecode.c:79: TMOD |=  0x20;                       
0046 438920     640            orl     _TMOD,#0x20
0049            641   ;        sourcecode.c:80: TR1 = 1; // START Timer1
0049 D28E       642            setb    _TR1
004B            643   ;        sourcecode.c:81: TI = 1;  // Indicate TX0 ready
004B D299       644            setb    _TI
004D            645   ;        sourcecode.c:83: return 0;
004D 758200     646            mov     dpl,#0x00
0050 22         647            ret
0051            648   ;------------------------------------------------------------
0051            649   ;Allocation info for local variables in function 'InitADC'
0051            650   ;------------------------------------------------------------
0051            651   ;------------------------------------------------------------
0051            652   ;        sourcecode.c:86: void InitADC (void)
0051            653   ;        -----------------------------------------
0051            654   ;         function InitADC
0051            655   ;        -----------------------------------------
0051            656   _InitADC:
0051            657   ;        sourcecode.c:88: SFRPAGE = 0x00;
0051 75A700     658            mov     _SFRPAGE,#0x00
0054            659   ;        sourcecode.c:89: ADEN=0; // Disable ADC
0054 C2EF       660            clr     _ADEN
0056            661   ;        sourcecode.c:94: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     662            mov     _ADC0CN1,#0x80
0059            663   ;        sourcecode.c:98: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     664            mov     _ADC0CF0,#0x20
005C            665   ;        sourcecode.c:102: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     666            mov     _ADC0CF1,#0x1E
005F            667   ;        sourcecode.c:111: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     668            mov     _ADC0CN0,#0x00
0062            669   ;        sourcecode.c:116: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     670            mov     _ADC0CF2,#0x3F
0065            671   ;        sourcecode.c:120: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     672            mov     _ADC0CN2,#0x00
0068            673   ;        sourcecode.c:122: ADEN=1; // Enable ADC
0068 D2EF       674            setb    _ADEN
006A 22         675            ret
006B            676   ;------------------------------------------------------------
006B            677   ;Allocation info for local variables in function 'Timer3us'
006B            678   ;------------------------------------------------------------
006B            679   ;us                        Allocated to registers r2 
006B            680   ;i                         Allocated to registers r3 
006B            681   ;------------------------------------------------------------
006B            682   ;        sourcecode.c:126: void Timer3us(unsigned char us)
006B            683   ;        -----------------------------------------
006B            684   ;         function Timer3us
006B            685   ;        -----------------------------------------
006B            686   _Timer3us:
006B AA82       687            mov     r2,dpl
006D            688   ;        sourcecode.c:131: CKCON0|=0b_0100_0000;
006D 438E40     689            orl     _CKCON0,#0x40
0070            690   ;        sourcecode.c:133: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     691            mov     _TMR3RL,#0xB8
0073 7593FF     692            mov     (_TMR3RL >> 8),#0xFF
0076            693   ;        sourcecode.c:134: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     694            mov     _TMR3,_TMR3RL
0079 859395     695            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            696   ;        sourcecode.c:136: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     697            mov     _TMR3CN0,#0x04
007F            698   ;        sourcecode.c:137: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       699            mov     r3,#0x00
0081            700   L004004?:
0081 C3         701            clr     c
0082 EB         702            mov     a,r3
0083 9A         703            subb    a,r2
0084 5000       704            jnc     L004007?
0086            705   ;        sourcecode.c:139: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            706   L004001?:
0086 E591       707            mov     a,_TMR3CN0
0088 30E7E0     708            jnb     acc.7,L004001?
008B            709   ;        sourcecode.c:140: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     710            anl     _TMR3CN0,#0x7F
008E            711   ;        sourcecode.c:137: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         712            inc     r3
008F 8000       713            sjmp    L004004?
0091            714   L004007?:
0091            715   ;        sourcecode.c:142: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     716            mov     _TMR3CN0,#0x00
0094 22         717            ret
0095            718   ;------------------------------------------------------------
0095            719   ;Allocation info for local variables in function 'waitms'
0095            720   ;------------------------------------------------------------
0095            721   ;ms                        Allocated to registers r2 r3 
0095            722   ;j                         Allocated to registers r4 r5 
0095            723   ;k                         Allocated to registers r6 
0095            724   ;------------------------------------------------------------
0095            725   ;        sourcecode.c:145: void waitms (unsigned int ms)
0095            726   ;        -----------------------------------------
0095            727   ;         function waitms
0095            728   ;        -----------------------------------------
0095            729   _waitms:
0095 AA82       730            mov     r2,dpl
0097 AB83       731            mov     r3,dph
0099            732   ;        sourcecode.c:149: for(j=0; j<ms; j++)
0099 7C00       733            mov     r4,#0x00
009B 7D00       734            mov     r5,#0x00
009D            735   L005005?:
009D C3         736            clr     c
009E EC         737            mov     a,r4
009F 9A         738            subb    a,r2
00A0 ED         739            mov     a,r5
00A1 9B         740            subb    a,r3
00A2 5000       741            jnc     L005009?
00A4            742   ;        sourcecode.c:150: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       743            mov     r6,#0x00
00A6            744   L005001?:
00A6 BE0420     745            cjne    r6,#0x04,L005018?
00A9            746   L005018?:
00A9 5000       747            jnc     L005007?
00AB 7582FA     748            mov     dpl,#0xFA
00AE C002       749            push    ar2
00B0 C003       750            push    ar3
00B2 C004       751            push    ar4
00B4 C005       752            push    ar5
00B6 C006       753            push    ar6
00B8 120000     754            lcall   _Timer3us
00BB D006       755            pop     ar6
00BD D005       756            pop     ar5
00BF D004       757            pop     ar4
00C1 D003       758            pop     ar3
00C3 D002       759            pop     ar2
00C5 0E         760            inc     r6
00C6 8000       761            sjmp    L005001?
00C8            762   L005007?:
00C8            763   ;        sourcecode.c:149: for(j=0; j<ms; j++)
00C8 0C         764            inc     r4
00C9 BC0060     765            cjne    r4,#0x00,L005005?
00CC 0D         766            inc     r5
00CD 8000       767            sjmp    L005005?
00CF            768   L005009?:
00CF 22         769            ret
00D0            770   ;------------------------------------------------------------
00D0            771   ;Allocation info for local variables in function 'InitPinADC'
00D0            772   ;------------------------------------------------------------
00D0            773   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            774   ;portno                    Allocated to registers r2 
00D0            775   ;mask                      Allocated to registers r3 
00D0            776   ;------------------------------------------------------------
00D0            777   ;        sourcecode.c:155: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            778   ;        -----------------------------------------
00D0            779   ;         function InitPinADC
00D0            780   ;        -----------------------------------------
00D0            781   _InitPinADC:
00D0 AA82       782            mov     r2,dpl
00D2            783   ;        sourcecode.c:159: mask=1<<pinno;
00D2 85C8F0     784            mov     b,_InitPinADC_PARM_2
00D5 05F0       785            inc     b
00D7 7401       786            mov     a,#0x01
00D9 8000       787            sjmp    L006013?
00DB            788   L006011?:
00DB 25E0       789            add     a,acc
00DD            790   L006013?:
00DD D5F020     791            djnz    b,L006011?
00E0 FB         792            mov     r3,a
00E1            793   ;        sourcecode.c:161: SFRPAGE = 0x20;
00E1 75A720     794            mov     _SFRPAGE,#0x20
00E4            795   ;        sourcecode.c:162: switch (portno)
00E4 BA0060     796            cjne    r2,#0x00,L006014?
00E7 8000       797            sjmp    L006001?
00E9            798   L006014?:
00E9 BA01E0     799            cjne    r2,#0x01,L006015?
00EC 8000       800            sjmp    L006002?
00EE            801   L006015?:
00EE            802   ;        sourcecode.c:164: case 0:
00EE BA0260     803            cjne    r2,#0x02,L006005?
00F1 8000       804            sjmp    L006003?
00F3            805   L006001?:
00F3            806   ;        sourcecode.c:165: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         807            mov     a,r3
00F4 F4         808            cpl     a
00F5 FA         809            mov     r2,a
00F6 52F1       810            anl     _P0MDIN,a
00F8            811   ;        sourcecode.c:166: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         812            mov     a,r3
00F9 42D4       813            orl     _P0SKIP,a
00FB            814   ;        sourcecode.c:167: break;
00FB            815   ;        sourcecode.c:168: case 1:
00FB 8000       816            sjmp    L006005?
00FD            817   L006002?:
00FD            818   ;        sourcecode.c:169: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         819            mov     a,r3
00FE F4         820            cpl     a
00FF FA         821            mov     r2,a
0100 52F2       822            anl     _P1MDIN,a
0102            823   ;        sourcecode.c:170: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         824            mov     a,r3
0103 42D5       825            orl     _P1SKIP,a
0105            826   ;        sourcecode.c:171: break;
0105            827   ;        sourcecode.c:172: case 2:
0105 8000       828            sjmp    L006005?
0107            829   L006003?:
0107            830   ;        sourcecode.c:173: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         831            mov     a,r3
0108 F4         832            cpl     a
0109 FA         833            mov     r2,a
010A 52F3       834            anl     _P2MDIN,a
010C            835   ;        sourcecode.c:174: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         836            mov     a,r3
010D 42CC       837            orl     _P2SKIP,a
010F            838   ;        sourcecode.c:178: }
010F            839   L006005?:
010F            840   ;        sourcecode.c:179: SFRPAGE = 0x00;
010F 75A700     841            mov     _SFRPAGE,#0x00
0112 22         842            ret
0113            843   ;------------------------------------------------------------
0113            844   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            845   ;------------------------------------------------------------
0113            846   ;pin                       Allocated to registers 
0113            847   ;------------------------------------------------------------
0113            848   ;        sourcecode.c:182: unsigned int ADC_at_Pin(unsigned char pin)
0113            849   ;        -----------------------------------------
0113            850   ;         function ADC_at_Pin
0113            851   ;        -----------------------------------------
0113            852   _ADC_at_Pin:
0113 8582BB     853            mov     _ADC0MX,dpl
0116            854   ;        sourcecode.c:185: ADINT = 0;
0116 C2ED       855            clr     _ADINT
0118            856   ;        sourcecode.c:186: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       857            setb    _ADBUSY
011A            858   ;        sourcecode.c:187: while (!ADINT); // Wait for conversion to complete
011A            859   L007001?:
011A 30EDE8     860            jnb     _ADINT,L007001?
011D            861   ;        sourcecode.c:188: return (ADC0);
011D 85BD82     862            mov     dpl,_ADC0
0120 85BE83     863            mov     dph,(_ADC0 >> 8)
0123 22         864            ret
0124            865   ;------------------------------------------------------------
0124            866   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            867   ;------------------------------------------------------------
0124            868   ;pin                       Allocated to registers r2 
0124            869   ;------------------------------------------------------------
0124            870   ;        sourcecode.c:199: float Volts_at_Pin(unsigned char pin)
0124            871   ;        -----------------------------------------
0124            872   ;         function Volts_at_Pin
0124            873   ;        -----------------------------------------
0124            874   _Volts_at_Pin:
0124            875   ;        sourcecode.c:201: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     876            lcall   _ADC_at_Pin
0127 120000     877            lcall   ___uint2fs
012A AA82       878            mov     r2,dpl
012C AB83       879            mov     r3,dph
012E ACF0       880            mov     r4,b
0130 FD         881            mov     r5,a
0131 C002       882            push    ar2
0133 C003       883            push    ar3
0135 C004       884            push    ar4
0137 C005       885            push    ar5
0139 90923A     886            mov     dptr,#0x923A
013C 75F053     887            mov     b,#0x53
013F 7440       888            mov     a,#0x40
0141 120000     889            lcall   ___fsmul
0144 AA82       890            mov     r2,dpl
0146 AB83       891            mov     r3,dph
0148 ACF0       892            mov     r4,b
014A FD         893            mov     r5,a
014B E581       894            mov     a,sp
014D 24FC       895            add     a,#0xfc
014F F581       896            mov     sp,a
0151 E4         897            clr     a
0152 C0E0       898            push    acc
0154 74FC       899            mov     a,#0xFC
0156 C0E0       900            push    acc
0158 747F       901            mov     a,#0x7F
015A C0E0       902            push    acc
015C 7446       903            mov     a,#0x46
015E C0E0       904            push    acc
0160 8A82       905            mov     dpl,r2
0162 8B83       906            mov     dph,r3
0164 8CF0       907            mov     b,r4
0166 ED         908            mov     a,r5
0167 120000     909            lcall   ___fsdiv
016A AA82       910            mov     r2,dpl
016C AB83       911            mov     r3,dph
016E ACF0       912            mov     r4,b
0170 FD         913            mov     r5,a
0171 E581       914            mov     a,sp
0173 24FC       915            add     a,#0xfc
0175 F581       916            mov     sp,a
0177 8A82       917            mov     dpl,r2
0179 8B83       918            mov     dph,r3
017B 8CF0       919            mov     b,r4
017D ED         920            mov     a,r5
017E 22         921            ret
017F            922   ;------------------------------------------------------------
017F            923   ;Allocation info for local variables in function 'TIMER0_Init'
017F            924   ;------------------------------------------------------------
017F            925   ;------------------------------------------------------------
017F            926   ;        sourcecode.c:204: void TIMER0_Init(void)
017F            927   ;        -----------------------------------------
017F            928   ;         function TIMER0_Init
017F            929   ;        -----------------------------------------
017F            930   _TIMER0_Init:
017F            931   ;        sourcecode.c:206: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
017F 5389F0     932            anl     _TMOD,#0xF0
0182            933   ;        sourcecode.c:207: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0182 438901     934            orl     _TMOD,#0x01
0185            935   ;        sourcecode.c:208: TR0=0; // Stop Timer/Counter 0
0185 C28C       936            clr     _TR0
0187 22         937            ret
0188            938   ;------------------------------------------------------------
0188            939   ;Allocation info for local variables in function 'main'
0188            940   ;------------------------------------------------------------
0188            941   ;period                    Allocated with name '_main_period_1_61'
0188            942   ;Phase_Shift               Allocated to registers r2 r3 r4 r5 
0188            943   ;time_difference           Allocated to registers r2 r3 r4 r5 
0188            944   ;------------------------------------------------------------
0188            945   ;        sourcecode.c:217: void main (void)
0188            946   ;        -----------------------------------------
0188            947   ;         function main
0188            948   ;        -----------------------------------------
0188            949   _main:
0188            950   ;        sourcecode.c:223: TIMER0_Init();
0188 120000     951            lcall   _TIMER0_Init
018B            952   ;        sourcecode.c:225: waitms(500); // Give PuTTy a chance to start before sending
018B 9001F4     953            mov     dptr,#0x01F4
018E 120000     954            lcall   _waitms
0191            955   ;        sourcecode.c:226: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 7428       956            mov     a,#__str_0
0193 C0E0       957            push    acc
0195 74D1       958            mov     a,#(__str_0 >> 8)
0197 C0E0       959            push    acc
0199 7480       960            mov     a,#0x80
019B C0E0       961            push    acc
019D 120000     962            lcall   _printf
01A0 1581       963            dec     sp
01A2 1581       964            dec     sp
01A4 1581       965            dec     sp
01A6            966   ;        sourcecode.c:231: __FILE__, __DATE__, __TIME__);
01A6            967   ;        sourcecode.c:230: "Compiled: %s, %s\n\n",
01A6 74A8       968            mov     a,#__str_4
01A8 C0E0       969            push    acc
01AA 74D1       970            mov     a,#(__str_4 >> 8)
01AC C0E0       971            push    acc
01AE 7480       972            mov     a,#0x80
01B0 C0E0       973            push    acc
01B2 74E8       974            mov     a,#__str_3
01B4 C0E0       975            push    acc
01B6 74D1       976            mov     a,#(__str_3 >> 8)
01B8 C0E0       977            push    acc
01BA 7480       978            mov     a,#0x80
01BC C0E0       979            push    acc
01BE 7428       980            mov     a,#__str_2
01C0 C0E0       981            push    acc
01C2 74D2       982            mov     a,#(__str_2 >> 8)
01C4 C0E0       983            push    acc
01C6 7480       984            mov     a,#0x80
01C8 C0E0       985            push    acc
01CA 7468       986            mov     a,#__str_1
01CC C0E0       987            push    acc
01CE 74D2       988            mov     a,#(__str_1 >> 8)
01D0 C0E0       989            push    acc
01D2 7480       990            mov     a,#0x80
01D4 C0E0       991            push    acc
01D6 120000     992            lcall   _printf
01D9 E581       993            mov     a,sp
01DB 24F4       994            add     a,#0xf4
01DD F581       995            mov     sp,a
01DF            996   ;        sourcecode.c:233: InitPinADC(2, 1); // Configure P2.1 as analog input
01DF 75C801     997            mov     _InitPinADC_PARM_2,#0x01
01E2 758202     998            mov     dpl,#0x02
01E5 120000     999            lcall   _InitPinADC
01E8           1000   ;        sourcecode.c:234: InitPinADC(2, 2); // Configure P2.2 as analog input
01E8 75C802    1001            mov     _InitPinADC_PARM_2,#0x02
01EB 758202    1002            mov     dpl,#0x02
01EE 120000    1003            lcall   _InitPinADC
01F1           1004   ;        sourcecode.c:236: InitADC();
01F1 120000    1005            lcall   _InitADC
01F4           1006   ;        sourcecode.c:238: while(1)
01F4           1007   L010038?:
01F4           1008   ;        sourcecode.c:241: TL0 = 0; 
01F4 758A00    1009            mov     _TL0,#0x00
01F7           1010   ;        sourcecode.c:242: TH0 = 0;
01F7 758C00    1011            mov     _TH0,#0x00
01FA           1012   ;        sourcecode.c:243: TF0 = 0;
01FA C28D      1013            clr     _TF0
01FC           1014   ;        sourcecode.c:244: overflow_count = 0;
01FC 755800    1015            mov     _overflow_count,#0x00
01FF           1016   ;        sourcecode.c:246: while (P0_6 != 0); // Wait for the signal to be zero
01FF           1017   L010001?:
01FF 2086E8    1018            jb      _P0_6,L010001?
0202           1019   ;        sourcecode.c:247: while (P0_6 != 1); // Wait for the signal to be one
0202           1020   L010004?:
0202 308628    1021            jnb     _P0_6,L010004?
0205           1022   ;        sourcecode.c:248: TR0 = 1; // Start the timer
0205 D28C      1023            setb    _TR0
0207           1024   ;        sourcecode.c:249: while (P0_6 != 0) { // Wait for the signal to be zero
0207           1025   L010009?:
0207 3086A8    1026            jnb     _P0_6,L010014?
020A           1027   ;        sourcecode.c:250: if (TF0 == 1) { // Did the 16-bit timer overflow?
020A           1028   ;        sourcecode.c:251: TF0 = 0;
020A 108DE8    1029            jbc     _TF0,L010066?
020D 8000      1030            sjmp    L010009?
020F           1031   L010066?:
020F           1032   ;        sourcecode.c:252: overflow_count++;
020F 0558      1033            inc     _overflow_count
0211           1034   ;        sourcecode.c:255: while (P0_6 != 1) { // Wait for the signal to be one
0211 8000      1035            sjmp    L010009?
0213           1036   L010014?:
0213 208628    1037            jb      _P0_6,L010016?
0216           1038   ;        sourcecode.c:256: if (TF0 == 1) { // Did the 16-bit timer overflow?
0216           1039   ;        sourcecode.c:257: TF0 = 0;
0216 108D68    1040            jbc     _TF0,L010068?
0219 8000      1041            sjmp    L010014?
021B           1042   L010068?:
021B           1043   ;        sourcecode.c:258: overflow_count++;
021B 0558      1044            inc     _overflow_count
021D 8000      1045            sjmp    L010014?
021F           1046   L010016?:
021F           1047   ;        sourcecode.c:261: TR0 = 0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
021F C28C      1048            clr     _TR0
0221           1049   ;        sourcecode.c:262: period = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0221 855882    1050            mov     dpl,_overflow_count
0224 120000    1051            lcall   ___uchar2fs
0227 AA82      1052            mov     r2,dpl
0229 AB83      1053            mov     r3,dph
022B ACF0      1054            mov     r4,b
022D FD        1055            mov     r5,a
022E C002      1056            push    ar2
0230 C003      1057            push    ar3
0232 C004      1058            push    ar4
0234 C005      1059            push    ar5
0236 900000    1060            mov     dptr,#0x0000
0239 75F080    1061            mov     b,#0x80
023C 7447      1062            mov     a,#0x47
023E 120000    1063            lcall   ___fsmul
0241 AA82      1064            mov     r2,dpl
0243 AB83      1065            mov     r3,dph
0245 ACF0      1066            mov     r4,b
0247 FD        1067            mov     r5,a
0248 E581      1068            mov     a,sp
024A 24FC      1069            add     a,#0xfc
024C F581      1070            mov     sp,a
024E 858C82    1071            mov     dpl,_TH0
0251 C002      1072            push    ar2
0253 C003      1073            push    ar3
0255 C004      1074            push    ar4
0257 C005      1075            push    ar5
0259 120000    1076            lcall   ___uchar2fs
025C AE82      1077            mov     r6,dpl
025E AF83      1078            mov     r7,dph
0260 A8F0      1079            mov     r0,b
0262 F9        1080            mov     r1,a
0263 C006      1081            push    ar6
0265 C007      1082            push    ar7
0267 C000      1083            push    ar0
0269 C001      1084            push    ar1
026B 900000    1085            mov     dptr,#0x0000
026E 75F080    1086            mov     b,#0x80
0271 7443      1087            mov     a,#0x43
0273 120000    1088            lcall   ___fsmul
0276 AE82      1089            mov     r6,dpl
0278 AF83      1090            mov     r7,dph
027A A8F0      1091            mov     r0,b
027C F9        1092            mov     r1,a
027D E581      1093            mov     a,sp
027F 24FC      1094            add     a,#0xfc
0281 F581      1095            mov     sp,a
0283 D005      1096            pop     ar5
0285 D004      1097            pop     ar4
0287 D003      1098            pop     ar3
0289 D002      1099            pop     ar2
028B C006      1100            push    ar6
028D C007      1101            push    ar7
028F C000      1102            push    ar0
0291 C001      1103            push    ar1
0293 8A82      1104            mov     dpl,r2
0295 8B83      1105            mov     dph,r3
0297 8CF0      1106            mov     b,r4
0299 ED        1107            mov     a,r5
029A 120000    1108            lcall   ___fsadd
029D AA82      1109            mov     r2,dpl
029F AB83      1110            mov     r3,dph
02A1 ACF0      1111            mov     r4,b
02A3 FD        1112            mov     r5,a
02A4 E581      1113            mov     a,sp
02A6 24FC      1114            add     a,#0xfc
02A8 F581      1115            mov     sp,a
02AA AE8A      1116            mov     r6,_TL0
02AC 7F00      1117            mov     r7,#0x00
02AE 8E82      1118            mov     dpl,r6
02B0 8F83      1119            mov     dph,r7
02B2 C002      1120            push    ar2
02B4 C003      1121            push    ar3
02B6 C004      1122            push    ar4
02B8 C005      1123            push    ar5
02BA 120000    1124            lcall   ___sint2fs
02BD AE82      1125            mov     r6,dpl
02BF AF83      1126            mov     r7,dph
02C1 A8F0      1127            mov     r0,b
02C3 F9        1128            mov     r1,a
02C4 D005      1129            pop     ar5
02C6 D004      1130            pop     ar4
02C8 D003      1131            pop     ar3
02CA D002      1132            pop     ar2
02CC C006      1133            push    ar6
02CE C007      1134            push    ar7
02D0 C000      1135            push    ar0
02D2 C001      1136            push    ar1
02D4 8A82      1137            mov     dpl,r2
02D6 8B83      1138            mov     dph,r3
02D8 8CF0      1139            mov     b,r4
02DA ED        1140            mov     a,r5
02DB 120000    1141            lcall   ___fsadd
02DE AA82      1142            mov     r2,dpl
02E0 AB83      1143            mov     r3,dph
02E2 ACF0      1144            mov     r4,b
02E4 FD        1145            mov     r5,a
02E5 E581      1146            mov     a,sp
02E7 24FC      1147            add     a,#0xfc
02E9 F581      1148            mov     sp,a
02EB C002      1149            push    ar2
02ED C003      1150            push    ar3
02EF C004      1151            push    ar4
02F1 C005      1152            push    ar5
02F3 90F4FC    1153            mov     dptr,#0xF4FC
02F6 75F032    1154            mov     b,#0x32
02F9 7434      1155            mov     a,#0x34
02FB 120000    1156            lcall   ___fsmul
02FE 8582E0    1157            mov     _main_period_1_61,dpl
0301 8583E1    1158            mov     (_main_period_1_61 + 1),dph
0304 85F0E2    1159            mov     (_main_period_1_61 + 2),b
0307 F5E3      1160            mov     (_main_period_1_61 + 3),a
0309 E581      1161            mov     a,sp
030B 24FC      1162            add     a,#0xfc
030D F581      1163            mov     sp,a
030F           1164   ;        sourcecode.c:265: while(P0_6 != 0) //wait for zero cross of reference
030F E4        1165            clr     a
0310 C0E0      1166            push    acc
0312 C0E0      1167            push    acc
0314 7480      1168            mov     a,#0x80
0316 C0E0      1169            push    acc
0318 7440      1170            mov     a,#0x40
031A C0E0      1171            push    acc
031C 85E082    1172            mov     dpl,_main_period_1_61
031F 85E183    1173            mov     dph,(_main_period_1_61 + 1)
0322 85E2F0    1174            mov     b,(_main_period_1_61 + 2)
0325 E5E3      1175            mov     a,(_main_period_1_61 + 3)
0327 120000    1176            lcall   ___fsdiv
032A AE82      1177            mov     r6,dpl
032C AF83      1178            mov     r7,dph
032E A8F0      1179            mov     r0,b
0330 F9        1180            mov     r1,a
0331 E581      1181            mov     a,sp
0333 24FC      1182            add     a,#0xfc
0335 F581      1183            mov     sp,a
0337           1184   L010020?:
0337 3086A8    1185            jnb     _P0_6,L010022?
033A           1186   ;        sourcecode.c:266: while(P0_6 != 1)
033A           1187   L010017?:
033A 208668    1188            jb      _P0_6,L010020?
033D           1189   ;        sourcecode.c:267: waitms(period/4);
033D 8E82      1190            mov     dpl,r6
033F 8F83      1191            mov     dph,r7
0341 88F0      1192            mov     b,r0
0343 E9        1193            mov     a,r1
0344 C006      1194            push    ar6
0346 C007      1195            push    ar7
0348 C000      1196            push    ar0
034A C001      1197            push    ar1
034C 120000    1198            lcall   ___fs2uint
034F 120000    1199            lcall   _waitms
0352 D001      1200            pop     ar1
0354 D000      1201            pop     ar0
0356 D007      1202            pop     ar7
0358 D006      1203            pop     ar6
035A 8000      1204            sjmp    L010017?
035C           1205   L010022?:
035C           1206   ;        sourcecode.c:268: v1_max = Volts_at_Pin(QFP32_MUX_P2_1);
035C 75820E    1207            mov     dpl,#0x0E
035F 120000    1208            lcall   _Volts_at_Pin
0362 858218    1209            mov     _v1_max,dpl
0365 858319    1210            mov     (_v1_max + 1),dph
0368 85F01A    1211            mov     (_v1_max + 2),b
036B F51B      1212            mov     (_v1_max + 3),a
036D           1213   ;        sourcecode.c:270: while(P2_2 != 0) //wait for zero cross of other signal
036D E4        1214            clr     a
036E C0E0      1215            push    acc
0370 C0E0      1216            push    acc
0372 7480      1217            mov     a,#0x80
0374 C0E0      1218            push    acc
0376 7440      1219            mov     a,#0x40
0378 C0E0      1220            push    acc
037A 85E082    1221            mov     dpl,_main_period_1_61
037D 85E183    1222            mov     dph,(_main_period_1_61 + 1)
0380 85E2F0    1223            mov     b,(_main_period_1_61 + 2)
0383 E5E3      1224            mov     a,(_main_period_1_61 + 3)
0385 120000    1225            lcall   ___fsdiv
0388 AE82      1226            mov     r6,dpl
038A AF83      1227            mov     r7,dph
038C A8F0      1228            mov     r0,b
038E F9        1229            mov     r1,a
038F E581      1230            mov     a,sp
0391 24FC      1231            add     a,#0xfc
0393 F581      1232            mov     sp,a
0395           1233   L010026?:
0395 30A2A8    1234            jnb     _P2_2,L010028?
0398           1235   ;        sourcecode.c:271: while(P2_2 != 1)
0398           1236   L010023?:
0398 20A268    1237            jb      _P2_2,L010026?
039B           1238   ;        sourcecode.c:272: waitms(period/4);
039B 8E82      1239            mov     dpl,r6
039D 8F83      1240            mov     dph,r7
039F 88F0      1241            mov     b,r0
03A1 E9        1242            mov     a,r1
03A2 C006      1243            push    ar6
03A4 C007      1244            push    ar7
03A6 C000      1245            push    ar0
03A8 C001      1246            push    ar1
03AA 120000    1247            lcall   ___fs2uint
03AD 120000    1248            lcall   _waitms
03B0 D001      1249            pop     ar1
03B2 D000      1250            pop     ar0
03B4 D007      1251            pop     ar7
03B6 D006      1252            pop     ar6
03B8 8000      1253            sjmp    L010023?
03BA           1254   L010028?:
03BA           1255   ;        sourcecode.c:273: v2_max = Volts_at_Pin(QFP32_MUX_P2_2);
03BA 75820F    1256            mov     dpl,#0x0F
03BD 120000    1257            lcall   _Volts_at_Pin
03C0 8582D8    1258            mov     _v2_max,dpl
03C3 8583D9    1259            mov     (_v2_max + 1),dph
03C6 85F0DA    1260            mov     (_v2_max + 2),b
03C9 F5DB      1261            mov     (_v2_max + 3),a
03CB           1262   ;        sourcecode.c:304: TR0=0; // Stop timer 0
03CB C28C      1263            clr     _TR0
03CD           1264   ;        sourcecode.c:305: overflow_count = 0;
03CD 755800    1265            mov     _overflow_count,#0x00
03D0           1266   ;        sourcecode.c:306: TH0=0; TL0=0; TF0 = 0;                // Reset the timer
03D0 758C00    1267            mov     _TH0,#0x00
03D3 758A00    1268            mov     _TL0,#0x00
03D6 C28D      1269            clr     _TF0
03D8           1270   ;        sourcecode.c:309: while (Volts_at_Pin(QFP32_MUX_P2_2) > 0);                     // Wait for reference signal to be zero
03D8           1271   L010029?:
03D8 75820F    1272            mov     dpl,#0x0F
03DB 120000    1273            lcall   _Volts_at_Pin
03DE AE82      1274            mov     r6,dpl
03E0 AF83      1275            mov     r7,dph
03E2 A8F0      1276            mov     r0,b
03E4 F9        1277            mov     r1,a
03E5 E4        1278            clr     a
03E6 C0E0      1279            push    acc
03E8 C0E0      1280            push    acc
03EA C0E0      1281            push    acc
03EC C0E0      1282            push    acc
03EE 8E82      1283            mov     dpl,r6
03F0 8F83      1284            mov     dph,r7
03F2 88F0      1285            mov     b,r0
03F4 E9        1286            mov     a,r1
03F5 120000    1287            lcall   ___fsgt
03F8 AE82      1288            mov     r6,dpl
03FA E581      1289            mov     a,sp
03FC 24FC      1290            add     a,#0xfc
03FE F581      1291            mov     sp,a
0400 EE        1292            mov     a,r6
0401 7000      1293            jnz     L010029?
0403           1294   ;        sourcecode.c:310: TR0=1; // start timer
0403 D28C      1295            setb    _TR0
0405           1296   ;        sourcecode.c:312: while (Volts_at_Pin(QFP32_MUX_P2_1) > 0) { // Wait for test signal to hit zero
0405           1297   L010034?:
0405 75820E    1298            mov     dpl,#0x0E
0408 120000    1299            lcall   _Volts_at_Pin
040B AE82      1300            mov     r6,dpl
040D AF83      1301            mov     r7,dph
040F A8F0      1302            mov     r0,b
0411 F9        1303            mov     r1,a
0412 E4        1304            clr     a
0413 C0E0      1305            push    acc
0415 C0E0      1306            push    acc
0417 C0E0      1307            push    acc
0419 C0E0      1308            push    acc
041B 8E82      1309            mov     dpl,r6
041D 8F83      1310            mov     dph,r7
041F 88F0      1311            mov     b,r0
0421 E9        1312            mov     a,r1
0422 120000    1313            lcall   ___fsgt
0425 AE82      1314            mov     r6,dpl
0427 E581      1315            mov     a,sp
0429 24FC      1316            add     a,#0xfc
042B F581      1317            mov     sp,a
042D EE        1318            mov     a,r6
042E 6000      1319            jz      L010036?
0430           1320   ;        sourcecode.c:313: if (TF0 == 1) { // Did the 16-bit timer overflow?
0430           1321   ;        sourcecode.c:314: TF0 = 0;
0430 108D28    1322            jbc     _TF0,L010075?
0433 8000      1323            sjmp    L010034?
0435           1324   L010075?:
0435           1325   ;        sourcecode.c:315: overflow_count++;
0435 0558      1326            inc     _overflow_count
0437 8000      1327            sjmp    L010034?
0439           1328   L010036?:
0439           1329   ;        sourcecode.c:318: TR0=0; // stop timer
0439 C28C      1330            clr     _TR0
043B           1331   ;        sourcecode.c:323: time_difference = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
043B 855882    1332            mov     dpl,_overflow_count
043E 120000    1333            lcall   ___uchar2fs
0441 AE82      1334            mov     r6,dpl
0443 AF83      1335            mov     r7,dph
0445 A8F0      1336            mov     r0,b
0447 F9        1337            mov     r1,a
0448 C006      1338            push    ar6
044A C007      1339            push    ar7
044C C000      1340            push    ar0
044E C001      1341            push    ar1
0450 900000    1342            mov     dptr,#0x0000
0453 75F080    1343            mov     b,#0x80
0456 7447      1344            mov     a,#0x47
0458 120000    1345            lcall   ___fsmul
045B AE82      1346            mov     r6,dpl
045D AF83      1347            mov     r7,dph
045F A8F0      1348            mov     r0,b
0461 F9        1349            mov     r1,a
0462 E581      1350            mov     a,sp
0464 24FC      1351            add     a,#0xfc
0466 F581      1352            mov     sp,a
0468 858C82    1353            mov     dpl,_TH0
046B C006      1354            push    ar6
046D C007      1355            push    ar7
046F C000      1356            push    ar0
0471 C001      1357            push    ar1
0473 120000    1358            lcall   ___uchar2fs
0476 AA82      1359            mov     r2,dpl
0478 AB83      1360            mov     r3,dph
047A ACF0      1361            mov     r4,b
047C FD        1362            mov     r5,a
047D C002      1363            push    ar2
047F C003      1364            push    ar3
0481 C004      1365            push    ar4
0483 C005      1366            push    ar5
0485 900000    1367            mov     dptr,#0x0000
0488 75F080    1368            mov     b,#0x80
048B 7443      1369            mov     a,#0x43
048D 120000    1370            lcall   ___fsmul
0490 AA82      1371            mov     r2,dpl
0492 AB83      1372            mov     r3,dph
0494 ACF0      1373            mov     r4,b
0496 FD        1374            mov     r5,a
0497 E581      1375            mov     a,sp
0499 24FC      1376            add     a,#0xfc
049B F581      1377            mov     sp,a
049D D001      1378            pop     ar1
049F D000      1379            pop     ar0
04A1 D007      1380            pop     ar7
04A3 D006      1381            pop     ar6
04A5 C002      1382            push    ar2
04A7 C003      1383            push    ar3
04A9 C004      1384            push    ar4
04AB C005      1385            push    ar5
04AD 8E82      1386            mov     dpl,r6
04AF 8F83      1387            mov     dph,r7
04B1 88F0      1388            mov     b,r0
04B3 E9        1389            mov     a,r1
04B4 120000    1390            lcall   ___fsadd
04B7 AA82      1391            mov     r2,dpl
04B9 AB83      1392            mov     r3,dph
04BB ACF0      1393            mov     r4,b
04BD FD        1394            mov     r5,a
04BE E581      1395            mov     a,sp
04C0 24FC      1396            add     a,#0xfc
04C2 F581      1397            mov     sp,a
04C4 AE8A      1398            mov     r6,_TL0
04C6 7F00      1399            mov     r7,#0x00
04C8 8E82      1400            mov     dpl,r6
04CA 8F83      1401            mov     dph,r7
04CC C002      1402            push    ar2
04CE C003      1403            push    ar3
04D0 C004      1404            push    ar4
04D2 C005      1405            push    ar5
04D4 120000    1406            lcall   ___sint2fs
04D7 AE82      1407            mov     r6,dpl
04D9 AF83      1408            mov     r7,dph
04DB A8F0      1409            mov     r0,b
04DD F9        1410            mov     r1,a
04DE D005      1411            pop     ar5
04E0 D004      1412            pop     ar4
04E2 D003      1413            pop     ar3
04E4 D002      1414            pop     ar2
04E6 C006      1415            push    ar6
04E8 C007      1416            push    ar7
04EA C000      1417            push    ar0
04EC C001      1418            push    ar1
04EE 8A82      1419            mov     dpl,r2
04F0 8B83      1420            mov     dph,r3
04F2 8CF0      1421            mov     b,r4
04F4 ED        1422            mov     a,r5
04F5 120000    1423            lcall   ___fsadd
04F8 AA82      1424            mov     r2,dpl
04FA AB83      1425            mov     r3,dph
04FC ACF0      1426            mov     r4,b
04FE FD        1427            mov     r5,a
04FF E581      1428            mov     a,sp
0501 24FC      1429            add     a,#0xfc
0503 F581      1430            mov     sp,a
0505 C002      1431            push    ar2
0507 C003      1432            push    ar3
0509 C004      1433            push    ar4
050B C005      1434            push    ar5
050D 90F4FC    1435            mov     dptr,#0xF4FC
0510 75F032    1436            mov     b,#0x32
0513 7434      1437            mov     a,#0x34
0515 120000    1438            lcall   ___fsmul
0518 AA82      1439            mov     r2,dpl
051A AB83      1440            mov     r3,dph
051C ACF0      1441            mov     r4,b
051E FD        1442            mov     r5,a
051F E581      1443            mov     a,sp
0521 24FC      1444            add     a,#0xfc
0523 F581      1445            mov     sp,a
0525           1446   ;        sourcecode.c:324: Phase_Shift = (time_difference * 360.0) / period;   // we now have the phase shift   
0525 C002      1447            push    ar2
0527 C003      1448            push    ar3
0529 C004      1449            push    ar4
052B C005      1450            push    ar5
052D 900000    1451            mov     dptr,#0x0000
0530 75F0B4    1452            mov     b,#0xB4
0533 7443      1453            mov     a,#0x43
0535 120000    1454            lcall   ___fsmul
0538 AA82      1455            mov     r2,dpl
053A AB83      1456            mov     r3,dph
053C ACF0      1457            mov     r4,b
053E FD        1458            mov     r5,a
053F E581      1459            mov     a,sp
0541 24FC      1460            add     a,#0xfc
0543 F581      1461            mov     sp,a
0545 C0E0      1462            push    _main_period_1_61
0547 C0E1      1463            push    (_main_period_1_61 + 1)
0549 C0E2      1464            push    (_main_period_1_61 + 2)
054B C0E3      1465            push    (_main_period_1_61 + 3)
054D 8A82      1466            mov     dpl,r2
054F 8B83      1467            mov     dph,r3
0551 8CF0      1468            mov     b,r4
0553 ED        1469            mov     a,r5
0554 120000    1470            lcall   ___fsdiv
0557 AA82      1471            mov     r2,dpl
0559 AB83      1472            mov     r3,dph
055B ACF0      1473            mov     r4,b
055D FD        1474            mov     r5,a
055E E581      1475            mov     a,sp
0560 24FC      1476            add     a,#0xfc
0562 F581      1477            mov     sp,a
0564           1478   ;        sourcecode.c:327: period*1000.0, Phase_Shift, v1_max, v2_max);
0564 C002      1479            push    ar2
0566 C003      1480            push    ar3
0568 C004      1481            push    ar4
056A C005      1482            push    ar5
056C C0E0      1483            push    _main_period_1_61
056E C0E1      1484            push    (_main_period_1_61 + 1)
0570 C0E2      1485            push    (_main_period_1_61 + 2)
0572 C0E3      1486            push    (_main_period_1_61 + 3)
0574           1487   ;        sourcecode.c:326: printf("T=%fms, Phase: %f, v1_Max:%f, v2_Max:%f\r", 
0574 900000    1488            mov     dptr,#0x0000
0577 75F07A    1489            mov     b,#0x7A
057A 7444      1490            mov     a,#0x44
057C 120000    1491            lcall   ___fsmul
057F AE82      1492            mov     r6,dpl
0581 AF83      1493            mov     r7,dph
0583 A8F0      1494            mov     r0,b
0585 F9        1495            mov     r1,a
0586 E581      1496            mov     a,sp
0588 24FC      1497            add     a,#0xfc
058A F581      1498            mov     sp,a
058C D005      1499            pop     ar5
058E D004      1500            pop     ar4
0590 D003      1501            pop     ar3
0592 D002      1502            pop     ar2
0594 C0D8      1503            push    _v2_max
0596 C0D9      1504            push    (_v2_max + 1)
0598 C0DA      1505            push    (_v2_max + 2)
059A C0DB      1506            push    (_v2_max + 3)
059C C018      1507            push    _v1_max
059E C019      1508            push    (_v1_max + 1)
05A0 C01A      1509            push    (_v1_max + 2)
05A2 C01B      1510            push    (_v1_max + 3)
05A4 C002      1511            push    ar2
05A6 C003      1512            push    ar3
05A8 C004      1513            push    ar4
05AA C005      1514            push    ar5
05AC C006      1515            push    ar6
05AE C007      1516            push    ar7
05B0 C000      1517            push    ar0
05B2 C001      1518            push    ar1
05B4 7468      1519            mov     a,#__str_5
05B6 C0E0      1520            push    acc
05B8 74D8      1521            mov     a,#(__str_5 >> 8)
05BA C0E0      1522            push    acc
05BC 7480      1523            mov     a,#0x80
05BE C0E0      1524            push    acc
05C0 120000    1525            lcall   _printf
05C3 E581      1526            mov     a,sp
05C5 24ED      1527            add     a,#0xed
05C7 F581      1528            mov     sp,a
05C9 020000    1529            ljmp    L010038?
05CC           1530            rseg R_CSEG
05CC           1531   
0000           1532            rseg R_XINIT
0000           1533   
0000           1534            rseg R_CONST
0000           1535   __str_0:
0000 1B        1536            db 0x1B
0001 5B324A    1537            db '[2J'
0004 00        1538            db 0x00
0005           1539   __str_1:
0005 41444320  1540            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1541            db 0x0A
0016 46696C65  1542            db 'File: %s'
     3A202573
001E 0A        1543            db 0x0A
001F 436F6D70  1544            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1545            db 0x0A
0030 0A        1546            db 0x0A
0031 00        1547            db 0x00
0032           1548   __str_2:
0032 736F7572  1549            db 'sourcecode.c'
     6365636F
     64652E63
003E 00        1550            db 0x00
003F           1551   __str_3:
003F 4D617220  1552            db 'Mar  6 2024'
     20362032
     303234
004A 00        1553            db 0x00
004B           1554   __str_4:
004B 32323A31  1555            db '22:10:09'
     303A3039
0053 00        1556            db 0x00
0054           1557   __str_5:
0054 543D2566  1558            db 'T=%fms, Phase: %f, v1_Max:%f, v2_Max:%f'
     6D732C20
     50686173
     653A2025
     662C2076
     315F4D61
     783A2566
     2C207632
     5F4D6178
     3A2566
007B 0D        1559            db 0x0D
007C 00        1560            db 0x00
007D           1561   
0003           1562            CSEG
0003           1563   
0003           1564   end
